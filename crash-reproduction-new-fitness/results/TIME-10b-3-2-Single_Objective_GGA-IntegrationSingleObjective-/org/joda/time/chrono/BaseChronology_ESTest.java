/*
 * This file was automatically generated by EvoSuite
 * Sun May 17 00:17:19 UTC 2020
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeField;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.LocalDateTime;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadablePartial;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class BaseChronology_ESTest extends BaseChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = iSOChronology0.millisOfDay();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Locale locale0 = Locale.ENGLISH;
      dateTimeField0.getMaximumTextLength(locale0);
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assembledChronology_Fields0.weekyear = dateTimeField0;
      buddhistChronology0.assemble(assembledChronology_Fields0);
      int int0 = 1050;
      Object object0 = new Object();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType1 = IslamicChronology.LEAP_YEAR_INDIAN;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      Date date0 = new Date((-2183L));
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(date0);
      Hours hours0 = Hours.hoursBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      Duration duration0 = hours0.toStandardDuration();
      LocalDateTime localDateTime1 = localDateTime0.minus((ReadableDuration) duration0);
      // Undeclared exception!
      islamicChronology0.set(localDateTime1, (-2183L));
  }
}

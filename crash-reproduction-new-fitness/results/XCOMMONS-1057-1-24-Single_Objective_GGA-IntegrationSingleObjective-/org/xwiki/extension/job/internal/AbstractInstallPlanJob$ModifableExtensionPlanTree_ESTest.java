/*
 * This file was automatically generated by EvoSuite
 * Mon May 18 05:21:14 UTC 2020
 */

package org.xwiki.extension.job.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.xwiki.extension.job.internal.AbstractInstallPlanJob;
import org.xwiki.extension.job.plan.ExtensionPlanAction;
import org.xwiki.extension.job.plan.ExtensionPlanNode;
import org.xwiki.extension.job.plan.internal.DefaultExtensionPlanNode;
import org.xwiki.extension.version.VersionConstraint;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractInstallPlanJob$ModifableExtensionPlanTree_ESTest extends AbstractInstallPlanJob$ModifableExtensionPlanTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AbstractInstallPlanJob.ModifableExtensionPlanTree abstractInstallPlanJob_ModifableExtensionPlanTree0 = new AbstractInstallPlanJob.ModifableExtensionPlanTree();
      ExtensionPlanNode extensionPlanNode0 = mock(ExtensionPlanNode.class, new ViolatedAssumptionAnswer());
      doReturn((ExtensionPlanAction) null).when(extensionPlanNode0).getAction();
      doReturn((Collection) null).when(extensionPlanNode0).getChildren();
      doReturn((VersionConstraint) null).when(extensionPlanNode0).getInitialVersionConstraint();
      DefaultExtensionPlanNode defaultExtensionPlanNode0 = new DefaultExtensionPlanNode(extensionPlanNode0);
      Object[] objectArray0 = new Object[4];
      defaultExtensionPlanNode0.toString();
      DefaultExtensionPlanNode defaultExtensionPlanNode1 = new DefaultExtensionPlanNode();
      DefaultExtensionPlanNode defaultExtensionPlanNode2 = new DefaultExtensionPlanNode();
      int int0 = new Integer(0);
      abstractInstallPlanJob_ModifableExtensionPlanTree0.iterator();
      AbstractInstallPlanJob.ModifableExtensionPlanTree abstractInstallPlanJob_ModifableExtensionPlanTree1 = new AbstractInstallPlanJob.ModifableExtensionPlanTree();
      abstractInstallPlanJob_ModifableExtensionPlanTree1.toString();
      abstractInstallPlanJob_ModifableExtensionPlanTree0.retainAll(abstractInstallPlanJob_ModifableExtensionPlanTree1);
      abstractInstallPlanJob_ModifableExtensionPlanTree0.add(defaultExtensionPlanNode0);
      AbstractInstallPlanJob.ModifableExtensionPlanTree abstractInstallPlanJob_ModifableExtensionPlanTree2 = new AbstractInstallPlanJob.ModifableExtensionPlanTree();
      AbstractInstallPlanJob.ModifableExtensionPlanTree abstractInstallPlanJob_ModifableExtensionPlanTree3 = abstractInstallPlanJob_ModifableExtensionPlanTree2.clone();
      abstractInstallPlanJob_ModifableExtensionPlanTree3.toString();
      abstractInstallPlanJob_ModifableExtensionPlanTree3.retainAll(abstractInstallPlanJob_ModifableExtensionPlanTree2);
      AbstractInstallPlanJob.ModifableExtensionPlanTree abstractInstallPlanJob_ModifableExtensionPlanTree4 = new AbstractInstallPlanJob.ModifableExtensionPlanTree();
      abstractInstallPlanJob_ModifableExtensionPlanTree3.size();
      abstractInstallPlanJob_ModifableExtensionPlanTree3.add(defaultExtensionPlanNode2);
      // Undeclared exception!
      abstractInstallPlanJob_ModifableExtensionPlanTree0.clone();
  }
}

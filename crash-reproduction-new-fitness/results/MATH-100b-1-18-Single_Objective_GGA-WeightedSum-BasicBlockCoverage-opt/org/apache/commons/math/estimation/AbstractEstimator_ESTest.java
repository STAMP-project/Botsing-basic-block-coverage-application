/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 26 09:01:55 UTC 2021
 */

package org.apache.commons.math.estimation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.estimation.EstimationProblem;
import org.apache.commons.math.estimation.LevenbergMarquardtEstimator;
import org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest;
import org.apache.commons.math.estimation.SimpleEstimationProblem;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractEstimator_ESTest extends AbstractEstimator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EstimationProblem estimationProblem0 = mock(EstimationProblem.class, new ViolatedAssumptionAnswer());
      SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
      EstimationProblem estimationProblem1 = mock(EstimationProblem.class, new ViolatedAssumptionAnswer());
      SimpleEstimationProblem simpleEstimationProblem1 = new SimpleEstimationProblem();
      LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
      LevenbergMarquardtEstimator levenbergMarquardtEstimator1 = new LevenbergMarquardtEstimator();
      levenbergMarquardtEstimator1.setParRelativeTolerance(0.0);
      LevenbergMarquardtEstimatorTest levenbergMarquardtEstimatorTest0 = new LevenbergMarquardtEstimatorTest((String) null);
      LevenbergMarquardtEstimatorTest.QuadraticProblem levenbergMarquardtEstimatorTest_QuadraticProblem0 = levenbergMarquardtEstimatorTest0.new QuadraticProblem();
      levenbergMarquardtEstimator0.incrementJacobianEvaluationsCounter();
      levenbergMarquardtEstimator1.estimate(simpleEstimationProblem0);
      levenbergMarquardtEstimatorTest_QuadraticProblem0.addPoint(0.0, 0.0, 0.0);
      levenbergMarquardtEstimator0.setParRelativeTolerance(1331.76208885758);
      levenbergMarquardtEstimator0.estimate(levenbergMarquardtEstimatorTest_QuadraticProblem0);
      // Undeclared exception!
      levenbergMarquardtEstimator1.getCovariances(levenbergMarquardtEstimatorTest_QuadraticProblem0);
  }
}

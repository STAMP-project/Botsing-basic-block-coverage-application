/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 26 20:10:54 UTC 2021
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class Line_ESTest extends Line_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Vector3D vector3D1 = Vector3D.MINUS_I;
      Vector3D vector3D2 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = new Line(line0);
      Vector3D vector3D3 = line0.closestPoint(line1);
      Line line2 = new Line(vector3D2, vector3D1);
      Line line3 = line2.revert();
      Vector3D vector3D4 = line0.closestPoint(line3);
      Line line4 = new Line(line0);
      line4.isSimilarTo(line2);
      line3.getAbscissa(vector3D4);
      Line line5 = line4.revert();
      Vector3D vector3D5 = vector3D3.orthogonal();
      Vector3D vector3D6 = new Vector3D(3.141592653489793, Double.NaN, Double.NaN);
      line3.contains(vector3D3);
      Vector3D.crossProduct(vector3D4, vector3D5);
      line3.wholeLine();
      Vector3D vector3D7 = new Vector3D((-1.0), vector3D0, 0.0, vector3D5);
      double double0 = (-226.7716246241519);
      vector3D6.scalarMultiply((-226.7716246241519));
      line1.intersection(line5);
      line0.closestPoint(line1);
      Line line6 = new Line(line4);
      // Undeclared exception!
      line6.toSubSpace((Vector<Euclidean3D>) null);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 29 20:54:18 UTC 2021
 */

package org.xwiki.rest.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.xpn.xwiki.criteria.impl.Range;
import com.xpn.xwiki.doc.merge.MergeResult;
import java.net.URI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.xwiki.component.manager.ComponentManager;
import org.xwiki.job.DefaultJobStatus;
import org.xwiki.job.DefaultRequest;
import org.xwiki.job.event.status.JobStatus;
import org.xwiki.logging.LogQueue;
import org.xwiki.logging.logback.internal.DefaultLoggerManager;
import org.xwiki.observation.ObservationManager;
import org.xwiki.observation.internal.DefaultObservationManager;
import org.xwiki.rest.internal.DomainObjectFactory;
import org.xwiki.rest.model.jaxb.Attachments;
import org.xwiki.rest.model.jaxb.Object;
import org.xwiki.rest.model.jaxb.ObjectFactory;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class DomainObjectFactory_ESTest extends DomainObjectFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Attachments attachments0 = new Attachments();
      Object object0 = new Object();
      Range range0 = new Range(0, 0);
      DomainObjectFactory domainObjectFactory0 = new DomainObjectFactory();
      ObjectFactory objectFactory0 = new ObjectFactory();
      URI uRI0 = URI.create("");
      DefaultLoggerManager defaultLoggerManager0 = new DefaultLoggerManager();
      MergeResult mergeResult0 = new MergeResult();
      LogQueue logQueue0 = mergeResult0.getLog();
      Injector.inject(defaultLoggerManager0, (Class<?>) DefaultLoggerManager.class, "logger", (java.lang.Object) logQueue0);
      DefaultObservationManager defaultObservationManager0 = new DefaultObservationManager();
      ComponentManager componentManager0 = mock(ComponentManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(defaultObservationManager0, (Class<?>) DefaultObservationManager.class, "componentManager", (java.lang.Object) componentManager0);
      DefaultRequest defaultRequest0 = new DefaultRequest();
      DefaultRequest defaultRequest1 = new DefaultRequest(defaultRequest0);
      DefaultJobStatus<DefaultRequest> defaultJobStatus0 = new DefaultJobStatus<DefaultRequest>(defaultRequest1, (JobStatus) null, defaultObservationManager0, defaultLoggerManager0);
      LogQueue logQueue1 = defaultJobStatus0.getLog();
      Injector.inject(defaultObservationManager0, (Class<?>) DefaultObservationManager.class, "logger", (java.lang.Object) logQueue1);
      Injector.validateBean(defaultObservationManager0, (Class<?>) DefaultObservationManager.class);
      Injector.inject(defaultLoggerManager0, (Class<?>) DefaultLoggerManager.class, "observation", (java.lang.Object) defaultObservationManager0);
      Injector.validateBean(defaultLoggerManager0, (Class<?>) DefaultLoggerManager.class);
      MergeResult mergeResult1 = new MergeResult();
      mergeResult0.getLog();
      DefaultJobStatus<DefaultRequest> defaultJobStatus1 = new DefaultJobStatus<DefaultRequest>(defaultRequest1, defaultJobStatus0, (ObservationManager) null, defaultLoggerManager0);
      defaultJobStatus0.getParentJobStatus();
      // Undeclared exception!
      DomainObjectFactory.createJobStatus(objectFactory0, uRI0, defaultJobStatus1);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 25 22:18:07 UTC 2021
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.LocalDateTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.ReadableDuration;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class BaseChronology_ESTest extends BaseChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MonthDay monthDay0 = MonthDay.now((DateTimeZone) fixedDateTimeZone0);
      julianChronology0.set(monthDay0, (-25534000L));
      JulianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(julianChronology0);
      DateMidnight dateMidnight0 = new DateMidnight((-2894L));
      DateMidnight dateMidnight1 = dateMidnight0.withDurationAdded((-1217L), 2);
      MutableInterval mutableInterval0 = new MutableInterval();
      Minutes minutes0 = Minutes.minutesIn(mutableInterval0);
      Days days0 = minutes0.toStandardDays();
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      Duration duration0 = mutablePeriod0.toDurationTo(dateMidnight1);
      mutablePeriod0.getHours();
      DateMidnight dateMidnight2 = dateMidnight0.withDurationAdded((ReadableDuration) duration0, 2);
      Date date0 = dateMidnight2.toDate();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(date0);
      lenientChronology0.set(monthDay0, 0L);
      LocalDateTime.now((Chronology) julianChronology0);
      int int0 = 1;
      JulianChronology.getInstanceUTC();
      localDateTime0.withYearOfEra(1);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      // Undeclared exception!
      ethiopicChronology0.set(localDateTime0, (-1L));
  }
}

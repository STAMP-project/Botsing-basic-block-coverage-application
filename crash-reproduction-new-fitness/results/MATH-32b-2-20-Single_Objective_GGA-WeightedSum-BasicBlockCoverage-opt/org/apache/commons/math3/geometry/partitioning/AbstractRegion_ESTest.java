/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 26 09:53:04 UTC 2021
 */

package org.apache.commons.math3.geometry.partitioning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;
import org.apache.commons.math3.geometry.euclidean.threed.RotationOrder;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.Line;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.euclidean.twod.SubLine;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractRegion_ESTest extends AbstractRegion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BSPTree.LeafMerger<Euclidean1D> bSPTree_LeafMerger0 = (BSPTree.LeafMerger<Euclidean1D>) mock(BSPTree.LeafMerger.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 0.0;
      Vector2D vector2D0 = Vector2D.ZERO;
      vector2D0.toString();
      vector2D0.getNorm();
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      Line line0 = new Line(vector2D0, vector2D0);
      subLine0.getSize();
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>();
      BSPTree<Euclidean2D> bSPTree1 = bSPTree0.copySelf();
      bSPTree0.setAttribute("{0; 0}");
      BSPTree.LeafMerger<Euclidean2D> bSPTree_LeafMerger1 = (BSPTree.LeafMerger<Euclidean2D>) mock(BSPTree.LeafMerger.class, new ViolatedAssumptionAnswer());
      doReturn((BSPTree) null).when(bSPTree_LeafMerger1).merge(nullable(org.apache.commons.math3.geometry.partitioning.BSPTree.class) , nullable(org.apache.commons.math3.geometry.partitioning.BSPTree.class) , nullable(org.apache.commons.math3.geometry.partitioning.BSPTree.class) , anyBoolean() , anyBoolean());
      bSPTree0.merge(bSPTree1, bSPTree_LeafMerger1);
      SubLine subLine1 = new SubLine(vector2D0, vector2D0);
      bSPTree0.split(subLine1);
      IntervalsSet intervalsSet0 = new IntervalsSet((-829.8623811414034), (-1490.2));
      BSPTree<Euclidean3D> bSPTree2 = new BSPTree<Euclidean3D>();
      RotationOrder rotationOrder0 = RotationOrder.ZYZ;
      Vector3D vector3D0 = rotationOrder0.getA2();
      bSPTree2.getCell(vector3D0);
      PolyhedronsSet polyhedronsSet0 = new PolyhedronsSet(bSPTree2);
      PolyhedronsSet polyhedronsSet1 = new PolyhedronsSet();
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false);
      OrientedPoint orientedPoint1 = orientedPoint0.copySelf();
      intervalsSet0.side(orientedPoint1);
      PolygonsSet polygonsSet0 = new PolygonsSet(bSPTree0);
      // Undeclared exception!
      polygonsSet0.getSize();
  }
}

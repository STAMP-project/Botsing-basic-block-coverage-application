/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 27 15:30:44 UTC 2021
 */

package com.xpn.xwiki.store.hibernate.query;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.xpn.xwiki.store.hibernate.HibernateSessionFactory;
import com.xpn.xwiki.store.hibernate.query.HqlQueryExecutor;
import java.lang.reflect.Type;
import java.util.AbstractMap;
import java.util.ArrayDeque;
import java.util.Map;
import javax.inject.Provider;
import org.apache.commons.dbcp2.PoolingConnection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.hibernate.Query;
import org.hibernate.engine.NamedQueryDefinition;
import org.hibernate.engine.SessionImplementor;
import org.hibernate.engine.query.OrdinalParameterDescriptor;
import org.hibernate.engine.query.ParameterMetadata;
import org.hibernate.impl.CollectionFilterImpl;
import org.hibernate.type.ShortType;
import org.jboss.marshalling.ByteInputStream;
import org.junit.runner.RunWith;
import org.slf4j.event.SubstituteLoggingEvent;
import org.slf4j.helpers.SubstituteLogger;
import org.xwiki.bridge.DocumentAccessBridge;
import org.xwiki.component.embed.EmbeddableComponentManager;
import org.xwiki.component.internal.AbstractEntityComponentManager;
import org.xwiki.component.internal.ContextComponentManager;
import org.xwiki.component.internal.WikiComponentManager;
import org.xwiki.component.internal.multi.AbstractGenericComponentManager;
import org.xwiki.component.internal.multi.ComponentManagerManager;
import org.xwiki.configuration.ConfigurationSource;
import org.xwiki.context.Execution;
import org.xwiki.job.event.status.JobProgressManager;
import org.xwiki.model.reference.EntityReferenceSerializer;
import org.xwiki.query.internal.AbstractHiddenFilter;
import org.xwiki.query.internal.AbstractWhereQueryFilter;
import org.xwiki.query.internal.CountDocumentFilter;
import org.xwiki.query.internal.DefaultQuery;
import org.xwiki.query.internal.HiddenDocumentFilter;
import org.xwiki.query.internal.LanguageQueryFilter;
import org.xwiki.query.internal.NoOpQueryFilter;
import org.xwiki.security.authorization.ContextualAuthorizationManager;
import org.xwiki.wiki.descriptor.WikiDescriptorManager;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class HqlQueryExecutor_ESTest extends HqlQueryExecutor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ContextualAuthorizationManager contextualAuthorizationManager0 = mock(ContextualAuthorizationManager.class, new ViolatedAssumptionAnswer());
      Execution execution0 = mock(Execution.class, new ViolatedAssumptionAnswer());
      HibernateSessionFactory hibernateSessionFactory0 = mock(HibernateSessionFactory.class, new ViolatedAssumptionAnswer());
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      HqlQueryExecutor hqlQueryExecutor0 = new HqlQueryExecutor();
      ContextualAuthorizationManager contextualAuthorizationManager1 = mock(ContextualAuthorizationManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(hqlQueryExecutor0, (Class<?>) HqlQueryExecutor.class, "authorization", (Object) contextualAuthorizationManager1);
      Provider<LanguageQueryFilter> provider0 = (Provider<LanguageQueryFilter>) mock(Provider.class, new ViolatedAssumptionAnswer());
      Injector.inject(hqlQueryExecutor0, (Class<?>) HqlQueryExecutor.class, "componentManagerProvider", (Object) provider0);
      Execution execution1 = mock(Execution.class, new ViolatedAssumptionAnswer());
      ContextualAuthorizationManager contextualAuthorizationManager2 = mock(ContextualAuthorizationManager.class, new ViolatedAssumptionAnswer());
      JobProgressManager jobProgressManager0 = mock(JobProgressManager.class, new ViolatedAssumptionAnswer());
      ContextualAuthorizationManager contextualAuthorizationManager3 = mock(ContextualAuthorizationManager.class, new ViolatedAssumptionAnswer());
      Provider<CountDocumentFilter> provider1 = (Provider<CountDocumentFilter>) mock(Provider.class, new ViolatedAssumptionAnswer());
      Execution execution2 = mock(Execution.class, new ViolatedAssumptionAnswer());
      JobProgressManager jobProgressManager1 = mock(JobProgressManager.class, new ViolatedAssumptionAnswer());
      HibernateSessionFactory hibernateSessionFactory1 = mock(HibernateSessionFactory.class, new ViolatedAssumptionAnswer());
      Provider<ContextComponentManager> provider2 = (Provider<ContextComponentManager>) mock(Provider.class, new ViolatedAssumptionAnswer());
      DocumentAccessBridge documentAccessBridge0 = mock(DocumentAccessBridge.class, new ViolatedAssumptionAnswer());
      WikiComponentManager wikiComponentManager0 = new WikiComponentManager();
      EmbeddableComponentManager embeddableComponentManager0 = new EmbeddableComponentManager((String) null);
      ShortType shortType0 = ShortType.INSTANCE;
      Class class0 = shortType0.getPrimitiveClass();
      Map<String, AbstractMap.SimpleImmutableEntry<EmbeddableComponentManager, NamedQueryDefinition>> map0 = embeddableComponentManager0.getInstanceMap((Type) class0);
      Injector.inject(wikiComponentManager0, (Class<?>) WikiComponentManager.class, "rootComponentManager", (Object) embeddableComponentManager0);
      WikiDescriptorManager wikiDescriptorManager0 = mock(WikiDescriptorManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(wikiComponentManager0, (Class<?>) WikiComponentManager.class, "wikis", (Object) wikiDescriptorManager0);
      Execution execution3 = mock(Execution.class, new ViolatedAssumptionAnswer());
      Injector.inject(wikiComponentManager0, (Class<?>) AbstractEntityComponentManager.class, "execution", (Object) execution3);
      EntityReferenceSerializer<DefaultQuery> entityReferenceSerializer0 = (EntityReferenceSerializer<DefaultQuery>) mock(EntityReferenceSerializer.class, new ViolatedAssumptionAnswer());
      Injector.inject(wikiComponentManager0, (Class<?>) AbstractEntityComponentManager.class, "serializer", (Object) entityReferenceSerializer0);
      ComponentManagerManager componentManagerManager0 = mock(ComponentManagerManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(wikiComponentManager0, (Class<?>) AbstractGenericComponentManager.class, "componentManagerManager", (Object) componentManagerManager0);
      Injector.validateBean(wikiComponentManager0, (Class<?>) WikiComponentManager.class);
      EntityReferenceSerializer<PoolingConnection> entityReferenceSerializer1 = (EntityReferenceSerializer<PoolingConnection>) mock(EntityReferenceSerializer.class, new ViolatedAssumptionAnswer());
      Execution execution4 = mock(Execution.class, new ViolatedAssumptionAnswer());
      Execution execution5 = mock(Execution.class, new ViolatedAssumptionAnswer());
      EntityReferenceSerializer<ByteInputStream> entityReferenceSerializer2 = (EntityReferenceSerializer<ByteInputStream>) mock(EntityReferenceSerializer.class, new ViolatedAssumptionAnswer());
      NoOpQueryFilter noOpQueryFilter0 = new NoOpQueryFilter();
      SessionImplementor sessionImplementor0 = mock(SessionImplementor.class, new ViolatedAssumptionAnswer());
      OrdinalParameterDescriptor[] ordinalParameterDescriptorArray0 = new OrdinalParameterDescriptor[0];
      ParameterMetadata parameterMetadata0 = new ParameterMetadata(ordinalParameterDescriptorArray0, map0);
      CollectionFilterImpl collectionFilterImpl0 = new CollectionFilterImpl("T@EjrS&&qMM2&Hek", noOpQueryFilter0, sessionImplementor0, parameterMetadata0);
      Query query0 = collectionFilterImpl0.setMaxResults((-1));
      HiddenDocumentFilter hiddenDocumentFilter0 = new HiddenDocumentFilter();
      ConfigurationSource configurationSource0 = mock(ConfigurationSource.class, new ViolatedAssumptionAnswer());
      Injector.inject(hiddenDocumentFilter0, (Class<?>) AbstractHiddenFilter.class, "userPreferencesSource", (Object) configurationSource0);
      SubstituteLogger substituteLogger0 = new SubstituteLogger("order by ah2/#o", arrayDeque0, true);
      Injector.inject(hiddenDocumentFilter0, (Class<?>) AbstractWhereQueryFilter.class, "logger", (Object) substituteLogger0);
      Injector.validateBean(hiddenDocumentFilter0, (Class<?>) HiddenDocumentFilter.class);
      // Undeclared exception!
      hqlQueryExecutor0.setNamedParameter(query0, "w>q", hiddenDocumentFilter0);
  }
}

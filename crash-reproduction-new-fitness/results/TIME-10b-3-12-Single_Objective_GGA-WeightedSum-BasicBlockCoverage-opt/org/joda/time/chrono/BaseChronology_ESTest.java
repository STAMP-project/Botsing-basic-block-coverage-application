/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 27 00:11:34 UTC 2021
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.ReadablePartial;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BasicChronology;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJEraDateTimeField;
import org.joda.time.chrono.ZonedChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class BaseChronology_ESTest extends BaseChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      AssembledChronology.Fields assembledChronology_Fields1 = new AssembledChronology.Fields();
      BuddhistChronology.getInstance();
      DateMidnight.now();
      DateTime.now();
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField((BasicChronology) null);
      DurationField durationField0 = buddhistChronology0.days();
      assembledChronology_Fields1.eras = durationField0;
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      BuddhistChronology.getInstance();
      ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
      assembledChronology_Fields0.minuteOfDay = null;
      assembledChronology_Fields0.dayOfYear = null;
      MonthDay monthDay0 = new MonthDay((-4032L));
      int int0 = (-2062);
      MonthDay monthDay1 = monthDay0.plusMonths((-2062));
      // Undeclared exception!
      Minutes.minutesBetween((ReadablePartial) monthDay1, (ReadablePartial) monthDay0);
  }
}

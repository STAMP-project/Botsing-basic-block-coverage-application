/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 25 15:26:25 UTC 2021
 */

package com.xpn.xwiki.store.hibernate.query;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.qos.logback.classic.Logger;
import com.xpn.xwiki.store.hibernate.HibernateSessionFactory;
import com.xpn.xwiki.store.hibernate.query.HqlQueryExecutor;
import java.sql.Savepoint;
import org.apache.commons.dbcp2.DelegatingConnection;
import org.apache.commons.dbcp2.PoolingConnection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.hibernate.Session;
import org.junit.runner.RunWith;
import org.xwiki.context.Execution;
import org.xwiki.job.event.status.JobProgressManager;
import org.xwiki.query.Query;
import org.xwiki.query.internal.CountDocumentFilter;
import org.xwiki.query.internal.DefaultQuery;
import org.xwiki.query.internal.NoOpQueryFilter;
import org.xwiki.security.authorization.ContextualAuthorizationManager;
import ucar.nc2.util.net.URLStreamHandlerFactory;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class HqlQueryExecutor_ESTest extends HqlQueryExecutor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HqlQueryExecutor hqlQueryExecutor0 = new HqlQueryExecutor();
      ContextualAuthorizationManager contextualAuthorizationManager0 = mock(ContextualAuthorizationManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(hqlQueryExecutor0, (Class<?>) HqlQueryExecutor.class, "authorization", (Object) contextualAuthorizationManager0);
      Execution execution0 = mock(Execution.class, new ViolatedAssumptionAnswer());
      Injector.inject(hqlQueryExecutor0, (Class<?>) HqlQueryExecutor.class, "execution", (Object) execution0);
      JobProgressManager jobProgressManager0 = mock(JobProgressManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(hqlQueryExecutor0, (Class<?>) HqlQueryExecutor.class, "progress", (Object) jobProgressManager0);
      HibernateSessionFactory hibernateSessionFactory0 = mock(HibernateSessionFactory.class, new ViolatedAssumptionAnswer());
      HqlQueryExecutor.isSafeSelect("Execute HQL query [{}]");
      DefaultQuery defaultQuery0 = new DefaultQuery("Execute HQL query [{}]", "Execute HQL query [{}]", hqlQueryExecutor0);
      DelegatingConnection<PoolingConnection> delegatingConnection0 = (DelegatingConnection<PoolingConnection>) mock(DelegatingConnection.class, new ViolatedAssumptionAnswer());
      doReturn((Savepoint) null).when(delegatingConnection0).setSavepoint(anyString());
      DelegatingConnection<DelegatingConnection<PoolingConnection>> delegatingConnection1 = new DelegatingConnection<DelegatingConnection<PoolingConnection>>(delegatingConnection0);
      DelegatingConnection<PoolingConnection> delegatingConnection2 = delegatingConnection1.getDelegate();
      delegatingConnection1.setSavepoint("ilrb91");
      delegatingConnection2.releaseSavepoint((Savepoint) null);
      PoolingConnection poolingConnection0 = new PoolingConnection(delegatingConnection2);
      String string0 = "Error performing load command";
      HqlQueryExecutor.isSafeSelect("Error performing load command");
      DefaultQuery defaultQuery1 = new DefaultQuery("Error performing load command", "!", hqlQueryExecutor0);
      NoOpQueryFilter noOpQueryFilter0 = new NoOpQueryFilter();
      CountDocumentFilter countDocumentFilter0 = new CountDocumentFilter();
      Logger logger0 = (Logger)URLStreamHandlerFactory.log;
      Injector.inject(countDocumentFilter0, (Class<?>) CountDocumentFilter.class, "logger", (Object) logger0);
      Injector.validateBean(countDocumentFilter0, (Class<?>) CountDocumentFilter.class);
      Query query0 = defaultQuery1.addFilter(countDocumentFilter0);
      // Undeclared exception!
      hqlQueryExecutor0.createHibernateQuery((Session) null, query0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 29 03:40:08 UTC 2021
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class Line_ESTest extends Line_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector1D vector1D0 = Vector1D.ZERO;
      Vector3D vector3D1 = new Vector3D((-3964.204988809), (-3964.204988809), (-3964.204988809));
      Vector3D vector3D2 = Vector3D.ZERO;
      line0.distance(vector3D2);
      line0.getOrigin();
      Line line1 = new Line(line0);
      Vector3D vector3D3 = line1.toSpace(vector1D0);
      line1.isSimilarTo(line0);
      line0.intersection(line1);
      Vector3D vector3D4 = line1.closestPoint(line0);
      line0.distance(vector3D0);
      Vector3D vector3D5 = Vector3D.NEGATIVE_INFINITY;
      Vector3D vector3D6 = Vector3D.MINUS_I;
      Vector3D vector3D7 = Vector3D.PLUS_I;
      Vector3D vector3D8 = new Vector3D((-44.4), vector3D6, (-1842.1215), vector3D1, 3.141592653489793, vector3D7);
      Vector3D vector3D9 = new Vector3D((-4.503599627370496E15), Double.NaN);
      Line line2 = new Line(vector3D5, vector3D9);
      Line line3 = new Line(vector3D4, vector3D7);
      vector3D7.subtract((Vector<Euclidean3D>) vector3D3);
      Line line4 = new Line(line2);
      Vector3D vector3D10 = Vector3D.MINUS_I;
      line4.toSubSpace(vector3D10);
      Vector3D vector3D11 = new Vector3D((-4.503599627370496E15), vector3D4);
      // Undeclared exception!
      line3.getAbscissa((Vector3D) null);
  }
}

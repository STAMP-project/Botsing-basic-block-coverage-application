/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 29 10:23:45 UTC 2021
 */

package org.xwiki.extension.job.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.Connection;
import java.util.LinkedList;
import org.apache.commons.dbcp2.DelegatingConnection;
import org.apache.commons.dbcp2.PoolingConnection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.xwiki.extension.InstalledExtension;
import org.xwiki.extension.job.internal.AbstractInstallPlanJob;
import org.xwiki.extension.job.plan.internal.DefaultExtensionPlanNode;
import org.xwiki.extension.wrap.WrappingInstalledExtension;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractInstallPlanJob$ModifableExtensionPlanTree_ESTest extends AbstractInstallPlanJob$ModifableExtensionPlanTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AbstractInstallPlanJob.ModifableExtensionPlanTree abstractInstallPlanJob_ModifableExtensionPlanTree0 = new AbstractInstallPlanJob.ModifableExtensionPlanTree();
      InstalledExtension installedExtension0 = mock(InstalledExtension.class, new ViolatedAssumptionAnswer());
      WrappingInstalledExtension<InstalledExtension> wrappingInstalledExtension0 = new WrappingInstalledExtension<InstalledExtension>(installedExtension0);
      LinkedList<DefaultExtensionPlanNode> linkedList0 = new LinkedList<DefaultExtensionPlanNode>();
      PoolingConnection poolingConnection0 = mock(PoolingConnection.class, new ViolatedAssumptionAnswer());
      DelegatingConnection<PoolingConnection> delegatingConnection0 = new DelegatingConnection<PoolingConnection>(poolingConnection0);
      PoolingConnection poolingConnection1 = delegatingConnection0.getDelegate();
      DelegatingConnection<PoolingConnection> delegatingConnection1 = new DelegatingConnection<PoolingConnection>((PoolingConnection) null);
      delegatingConnection1.getDelegate();
      DelegatingConnection<PoolingConnection> delegatingConnection2 = new DelegatingConnection<PoolingConnection>(poolingConnection1);
      PoolingConnection poolingConnection2 = new PoolingConnection(delegatingConnection2);
      PoolingConnection poolingConnection3 = new PoolingConnection(poolingConnection2);
      PoolingConnection poolingConnection4 = new PoolingConnection((Connection) null);
      abstractInstallPlanJob_ModifableExtensionPlanTree0.lastIndexOf((Object) poolingConnection4);
      AbstractInstallPlanJob.ModifableExtensionPlanTree abstractInstallPlanJob_ModifableExtensionPlanTree1 = abstractInstallPlanJob_ModifableExtensionPlanTree0.clone();
      DefaultExtensionPlanNode defaultExtensionPlanNode0 = new DefaultExtensionPlanNode();
      abstractInstallPlanJob_ModifableExtensionPlanTree1.addIfAbsent(defaultExtensionPlanNode0);
      WrappingInstalledExtension<InstalledExtension> wrappingInstalledExtension1 = new WrappingInstalledExtension<InstalledExtension>(wrappingInstalledExtension0);
      // Undeclared exception!
      abstractInstallPlanJob_ModifableExtensionPlanTree1.clone();
  }
}

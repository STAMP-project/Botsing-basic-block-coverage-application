/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 26 20:11:26 UTC 2021
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.Plane;
import org.apache.commons.math3.geometry.euclidean.threed.SubLine;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class SubLine_ESTest extends SubLine_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Plane plane0 = new Plane(vector3D0);
      Plane plane1 = new Plane(plane0);
      Line line0 = plane1.intersection(plane0);
      Line line1 = new Line(line0);
      Vector1D vector1D0 = new Vector1D((-2555.0));
      Vector1D vector1D1 = new Vector1D((-2555.0), vector1D0, 5808.931038036, vector1D0, 0.0, vector1D0);
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D1, false);
      OrientedPoint orientedPoint1 = orientedPoint0.copySelf();
      IntervalsSet intervalsSet0 = orientedPoint1.wholeSpace();
      SubLine subLine0 = new SubLine(line1, intervalsSet0);
      subLine0.getSegments();
      line1.wholeLine();
      Line line2 = new Line(vector3D0, vector3D0);
      Vector1D vector1D2 = Vector1D.NaN;
      OrientedPoint orientedPoint2 = new OrientedPoint(vector1D2, true);
      OrientedPoint orientedPoint3 = orientedPoint2.copySelf();
      IntervalsSet intervalsSet1 = orientedPoint3.wholeSpace();
      SubLine subLine1 = new SubLine(line2, intervalsSet1);
      SubLine subLine2 = line2.wholeLine();
      // Undeclared exception!
      subLine0.intersection(subLine2, true);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Mon May 18 05:22:54 UTC 2020
 */

package org.xwiki.extension.job.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayDeque;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.xwiki.extension.ExtensionId;
import org.xwiki.extension.InstalledExtension;
import org.xwiki.extension.job.internal.AbstractInstallPlanJob;
import org.xwiki.extension.job.plan.ExtensionPlanNode;
import org.xwiki.extension.job.plan.internal.DefaultExtensionPlanNode;
import org.xwiki.extension.test.EmptyExtension;
import org.xwiki.extension.version.Version;
import org.xwiki.extension.version.VersionConstraint;
import org.xwiki.extension.version.internal.DefaultVersionConstraint;
import org.xwiki.extension.wrap.WrappingExtension;
import org.xwiki.extension.wrap.WrappingInstalledExtension;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractInstallPlanJob$ModifableExtensionPlanTree_ESTest extends AbstractInstallPlanJob$ModifableExtensionPlanTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ArrayDeque<ExtensionPlanNode> arrayDeque0 = new ArrayDeque<ExtensionPlanNode>();
      VersionConstraint versionConstraint0 = mock(VersionConstraint.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(versionConstraint0).getRanges();
      doReturn((Version) null).when(versionConstraint0).getVersion();
      DefaultVersionConstraint defaultVersionConstraint0 = new DefaultVersionConstraint(versionConstraint0);
      Object[] objectArray0 = new Object[5];
      AbstractInstallPlanJob.ModifableExtensionPlanTree abstractInstallPlanJob_ModifableExtensionPlanTree0 = new AbstractInstallPlanJob.ModifableExtensionPlanTree();
      InstalledExtension installedExtension0 = mock(InstalledExtension.class, new ViolatedAssumptionAnswer());
      doReturn((ExtensionId) null).when(installedExtension0).getId();
      WrappingInstalledExtension<InstalledExtension> wrappingInstalledExtension0 = new WrappingInstalledExtension<InstalledExtension>(installedExtension0);
      WrappingExtension<InstalledExtension> wrappingExtension0 = new WrappingExtension<InstalledExtension>(wrappingInstalledExtension0);
      wrappingExtension0.getId();
      EmptyExtension emptyExtension0 = new EmptyExtension((ExtensionId) null, "=aF'E#\"8ds?a,4u");
      ArrayDeque<InstalledExtension> arrayDeque1 = new ArrayDeque<InstalledExtension>();
      abstractInstallPlanJob_ModifableExtensionPlanTree0.clone();
      DefaultVersionConstraint defaultVersionConstraint1 = new DefaultVersionConstraint(defaultVersionConstraint0);
      AbstractInstallPlanJob.ModifableExtensionPlanTree abstractInstallPlanJob_ModifableExtensionPlanTree1 = new AbstractInstallPlanJob.ModifableExtensionPlanTree();
      AbstractInstallPlanJob.ModifableExtensionPlanTree abstractInstallPlanJob_ModifableExtensionPlanTree2 = new AbstractInstallPlanJob.ModifableExtensionPlanTree();
      DefaultExtensionPlanNode defaultExtensionPlanNode0 = new DefaultExtensionPlanNode();
      abstractInstallPlanJob_ModifableExtensionPlanTree2.addIfAbsent(defaultExtensionPlanNode0);
      // Undeclared exception!
      abstractInstallPlanJob_ModifableExtensionPlanTree2.clone();
  }
}

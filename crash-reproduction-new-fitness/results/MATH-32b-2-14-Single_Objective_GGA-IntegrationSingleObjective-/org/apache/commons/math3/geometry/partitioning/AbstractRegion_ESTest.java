/*
 * This file was automatically generated by EvoSuite
 * Sat May 16 12:25:36 UTC 2020
 */

package org.apache.commons.math3.geometry.partitioning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.Line;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.Transform;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractRegion_ESTest extends AbstractRegion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BSPTree.LeafMerger<Euclidean1D> bSPTree_LeafMerger0 = (BSPTree.LeafMerger<Euclidean1D>) mock(BSPTree.LeafMerger.class, new ViolatedAssumptionAnswer());
      IntervalsSet intervalsSet0 = new IntervalsSet();
      Transform<Euclidean1D, Euclidean1D> transform0 = (Transform<Euclidean1D, Euclidean1D>) mock(Transform.class, new ViolatedAssumptionAnswer());
      intervalsSet0.applyTransform(transform0);
      Vector1D vector1D0 = Vector1D.ONE;
      Vector1D vector1D1 = Vector1D.POSITIVE_INFINITY;
      Vector1D vector1D2 = new Vector1D((-1512.23913542239), vector1D0, (-1512.23913542239), vector1D1, (-1512.23913542239), vector1D1);
      Transform<Euclidean1D, Euclidean1D> transform1 = (Transform<Euclidean1D, Euclidean1D>) mock(Transform.class, new ViolatedAssumptionAnswer());
      intervalsSet0.getSup();
      intervalsSet0.getBarycenter();
      intervalsSet0.getInf();
      Vector2D vector2D0 = new Vector2D(Double.POSITIVE_INFINITY, 3.4028234663852886E38);
      Line line0 = new Line(vector2D0, vector2D0);
      line0.wholeHyperplane();
      Line line1 = line0.getReverse();
      PolygonsSet polygonsSet0 = line1.wholeSpace();
      Object object0 = new Object();
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>(object0);
      PolygonsSet polygonsSet1 = polygonsSet0.buildNew(bSPTree0);
      // Undeclared exception!
      polygonsSet1.getSize();
  }
}

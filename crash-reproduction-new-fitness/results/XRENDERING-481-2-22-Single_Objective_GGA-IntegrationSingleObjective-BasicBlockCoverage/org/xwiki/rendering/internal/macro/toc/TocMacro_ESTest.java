/*
 * This file was automatically generated by EvoSuite
 * Mon May 18 06:15:41 UTC 2020
 */

package org.xwiki.rendering.internal.macro.toc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import javax.inject.Provider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.xwiki.component.descriptor.ComponentDescriptor;
import org.xwiki.properties.BeanManager;
import org.xwiki.rendering.block.EmptyLinesBlock;
import org.xwiki.rendering.block.MacroBlock;
import org.xwiki.rendering.block.TableCellBlock;
import org.xwiki.rendering.internal.macro.toc.TocMacro;
import org.xwiki.rendering.internal.renderer.DefaultLinkLabelGenerator;
import org.xwiki.rendering.macro.AbstractMacro;
import org.xwiki.rendering.macro.toc.TocMacroParameters;
import org.xwiki.rendering.parser.Parser;
import org.xwiki.rendering.syntax.Syntax;
import org.xwiki.rendering.transformation.MacroTransformationContext;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class TocMacro_ESTest extends TocMacro_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ComponentDescriptor<TableCellBlock> componentDescriptor0 = (ComponentDescriptor<TableCellBlock>) mock(ComponentDescriptor.class, new ViolatedAssumptionAnswer());
      MacroTransformationContext macroTransformationContext0 = new MacroTransformationContext();
      Parser parser0 = mock(Parser.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      TocMacro tocMacro0 = new TocMacro();
      DefaultLinkLabelGenerator defaultLinkLabelGenerator0 = new DefaultLinkLabelGenerator();
      Injector.inject(tocMacro0, (Class<?>) TocMacro.class, "linkLabelGenerator", (Object) defaultLinkLabelGenerator0);
      Injector.inject(tocMacro0, (Class<?>) TocMacro.class, "plainTextParser", (Object) parser0);
      Provider<EmptyLinesBlock> provider0 = (Provider<EmptyLinesBlock>) mock(Provider.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(provider0).get();
      Injector.inject(tocMacro0, (Class<?>) TocMacro.class, "wikiModelProvider", (Object) provider0);
      BeanManager beanManager0 = mock(BeanManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(tocMacro0, (Class<?>) AbstractMacro.class, "beanManager", (Object) beanManager0);
      Injector.inject(tocMacro0, (Class<?>) AbstractMacro.class, "componentDescriptor", (Object) componentDescriptor0);
      Injector.validateBean(tocMacro0, (Class<?>) TocMacro.class);
      tocMacro0.setPriority((-448));
      Syntax syntax0 = Syntax.XHTML_1_0;
      syntax0.toIdString();
      macroTransformationContext0.setSyntax(syntax0);
      DefaultLinkLabelGenerator defaultLinkLabelGenerator1 = new DefaultLinkLabelGenerator();
      DefaultLinkLabelGenerator defaultLinkLabelGenerator2 = new DefaultLinkLabelGenerator();
      TocMacroParameters tocMacroParameters0 = new TocMacroParameters();
      TocMacroParameters.Scope tocMacroParameters_Scope0 = TocMacroParameters.Scope.PAGE;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MacroBlock macroBlock0 = new MacroBlock("", hashMap0, "", true);
      macroTransformationContext0.setCurrentMacroBlock(macroBlock0);
      tocMacroParameters0.setNumbered(false);
      tocMacroParameters0.setScope(tocMacroParameters_Scope0);
      TocMacroParameters.Scope tocMacroParameters_Scope1 = TocMacroParameters.Scope.LOCAL;
      tocMacroParameters0.setScope(tocMacroParameters_Scope1);
      // Undeclared exception!
      tocMacro0.execute(tocMacroParameters0, "", macroTransformationContext0);
  }
}

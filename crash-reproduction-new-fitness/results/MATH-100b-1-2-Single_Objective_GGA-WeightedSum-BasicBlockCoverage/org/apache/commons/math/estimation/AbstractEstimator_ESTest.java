/*
 * This file was automatically generated by EvoSuite
 * Thu May 14 11:38:57 UTC 2020
 */

package org.apache.commons.math.estimation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.estimation.EstimatedParameter;
import org.apache.commons.math.estimation.LevenbergMarquardtEstimator;
import org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest;
import org.apache.commons.math.estimation.SimpleEstimationProblem;
import org.apache.commons.math.estimation.WeightedMeasurement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractEstimator_ESTest extends AbstractEstimator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
      EstimatedParameter estimatedParameter0 = new EstimatedParameter("sqI|u8^k1;3", (-3816.900807790202), true);
      estimatedParameter0.estimate = 0.0;
      EstimatedParameter estimatedParameter1 = new EstimatedParameter(".v{", 0.0);
      EstimatedParameter estimatedParameter2 = new EstimatedParameter("sqI|u8^k1;3", 0.0, true);
      EstimatedParameter estimatedParameter3 = new EstimatedParameter("illegal column argument", 0.0);
      EstimatedParameter estimatedParameter4 = new EstimatedParameter("illegal column argument", (-3522.9088768), true);
      EstimatedParameter estimatedParameter5 = new EstimatedParameter(estimatedParameter4);
      LevenbergMarquardtEstimatorTest levenbergMarquardtEstimatorTest0 = new LevenbergMarquardtEstimatorTest(";v.XR_S!DSD");
      LevenbergMarquardtEstimatorTest.QuadraticProblem levenbergMarquardtEstimatorTest_QuadraticProblem0 = levenbergMarquardtEstimatorTest0.new QuadraticProblem();
      levenbergMarquardtEstimatorTest_QuadraticProblem0.addParameter(estimatedParameter0);
      levenbergMarquardtEstimator0.estimate(levenbergMarquardtEstimatorTest_QuadraticProblem0);
      levenbergMarquardtEstimator0.updateJacobian();
      levenbergMarquardtEstimator0.updateJacobian();
      SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
      WeightedMeasurement weightedMeasurement0 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
      levenbergMarquardtEstimatorTest_QuadraticProblem0.addMeasurement(weightedMeasurement0);
      // Undeclared exception!
      levenbergMarquardtEstimator0.getCovariances(levenbergMarquardtEstimatorTest_QuadraticProblem0);
  }
}

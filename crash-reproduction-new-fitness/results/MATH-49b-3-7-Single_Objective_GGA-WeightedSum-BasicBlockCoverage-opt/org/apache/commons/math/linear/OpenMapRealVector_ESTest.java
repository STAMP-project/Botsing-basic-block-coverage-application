/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 25 21:00:48 UTC 2021
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class OpenMapRealVector_ESTest extends OpenMapRealVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      UnivariateRealFunction univariateRealFunction0 = mock(UnivariateRealFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(univariateRealFunction0).value(anyDouble());
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      openMapRealVector0.combineToSelf(0.14285714285714285, 1.5, (RealVector) openMapRealVector1);
      openMapRealVector0.toArray();
      openMapRealVector0.getNorm();
      openMapRealVector0.getMaxValue();
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.ebeMultiply((RealVector) openMapRealVector1);
      openMapRealVector2.isInfinite();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.1410329079915499E10;
      doubleArray0[1] = 0.0;
      doubleArray0[3] = Double.NaN;
      OpenMapRealVector openMapRealVector3 = new OpenMapRealVector(doubleArray0);
      RealVector realVector0 = openMapRealVector3.mapMultiplyToSelf(3920.3903716024447);
      realVector0.mapToSelf(univariateRealFunction0);
      OpenMapRealVector openMapRealVector4 = new OpenMapRealVector();
      // Undeclared exception!
      openMapRealVector3.ebeMultiply(realVector0);
  }
}

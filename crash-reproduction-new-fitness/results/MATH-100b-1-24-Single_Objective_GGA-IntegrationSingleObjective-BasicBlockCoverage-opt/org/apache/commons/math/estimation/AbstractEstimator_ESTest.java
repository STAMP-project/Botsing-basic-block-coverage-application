/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 28 09:46:30 UTC 2021
 */

package org.apache.commons.math.estimation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import junit.framework.TestCase;
import org.apache.commons.math.estimation.LevenbergMarquardtEstimator;
import org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest;
import org.apache.commons.math.estimation.SimpleEstimationProblem;
import org.apache.commons.math.estimation.WeightedMeasurement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractEstimator_ESTest extends AbstractEstimator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      WeightedMeasurement[] weightedMeasurementArray0 = new WeightedMeasurement[8];
      WeightedMeasurement weightedMeasurement0 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(weightedMeasurement0).getResidual();
      doReturn(0.0, 0.0, 0.0, 0.0).when(weightedMeasurement0).getWeight();
      SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
      weightedMeasurementArray0[7] = weightedMeasurementArray0[3];
      LevenbergMarquardtEstimatorTest levenbergMarquardtEstimatorTest0 = new LevenbergMarquardtEstimatorTest("=)x");
      Object object0 = new Object();
      TestCase.assertNotNull("=)x", object0);
      TestCase.assertEquals("\"R|~,(M*9<msv", (byte)1, (byte)1);
      simpleEstimationProblem0.addMeasurement(weightedMeasurement0);
      TestCase.assertEquals("$eVLVL:i5![gsWr<0=}", (long) (byte)1, (long) (byte)1);
      Object object1 = new Object();
      TestCase.format("_TBClx3", simpleEstimationProblem0, object1);
      levenbergMarquardtEstimatorTest0.testMoreEstimatedParametersSimple();
      levenbergMarquardtEstimatorTest0.testNonInversible();
      LevenbergMarquardtEstimatorTest.QuadraticProblem levenbergMarquardtEstimatorTest_QuadraticProblem0 = levenbergMarquardtEstimatorTest0.new QuadraticProblem();
      levenbergMarquardtEstimatorTest_QuadraticProblem0.addPoint((byte)1, (byte)1, (byte)1);
      levenbergMarquardtEstimatorTest_QuadraticProblem0.addPoint((-231.0), (byte)1, (-231.0));
      SimpleEstimationProblem simpleEstimationProblem1 = new SimpleEstimationProblem();
      LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
      levenbergMarquardtEstimator0.estimate(simpleEstimationProblem0);
      // Undeclared exception!
      levenbergMarquardtEstimator0.getCovariances(levenbergMarquardtEstimatorTest_QuadraticProblem0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat May 16 12:21:45 UTC 2020
 */

package org.apache.commons.math3.geometry.partitioning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.euclidean.threed.Plane;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractRegion_ESTest extends AbstractRegion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-4741.655679), (-4741.655679), 1275.6594058885);
      Plane plane0 = new Plane(vector3D0);
      Plane plane1 = new Plane(plane0);
      plane1.wholeHyperplane();
      Vector3D vector3D1 = Vector3D.MINUS_J;
      plane0.intersection(plane1);
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>(vector3D1);
      Vector3D vector3D2 = Vector3D.MINUS_I;
      Vector2D vector2D0 = plane1.toSubSpace(vector3D2);
      Vector2D vector2D1 = Vector2D.NEGATIVE_INFINITY;
      Vector2D vector2D2 = new Vector2D(0.0, vector2D0, 0.0, vector2D1, 0.0, vector2D0, 0.0, vector2D0);
      BSPTree.LeafMerger<Euclidean2D> bSPTree_LeafMerger0 = (BSPTree.LeafMerger<Euclidean2D>) mock(BSPTree.LeafMerger.class, new ViolatedAssumptionAnswer());
      doReturn((BSPTree) null).when(bSPTree_LeafMerger0).merge(nullable(org.apache.commons.math3.geometry.partitioning.BSPTree.class) , nullable(org.apache.commons.math3.geometry.partitioning.BSPTree.class) , nullable(org.apache.commons.math3.geometry.partitioning.BSPTree.class) , anyBoolean() , anyBoolean());
      bSPTree0.merge(bSPTree0, bSPTree_LeafMerger0);
      PolygonsSet polygonsSet0 = new PolygonsSet(bSPTree0);
      polygonsSet0.getVertices();
      // Undeclared exception!
      polygonsSet0.getSize();
  }
}

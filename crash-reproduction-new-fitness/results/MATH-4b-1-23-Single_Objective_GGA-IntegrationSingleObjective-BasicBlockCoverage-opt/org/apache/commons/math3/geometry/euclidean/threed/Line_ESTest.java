/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 29 03:39:48 UTC 2021
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.util.Locale;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class Line_ESTest extends Line_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Vector3D vector3D0 = mock(Vector3D.class, new ViolatedAssumptionAnswer());
      doReturn((Vector3D) null).when(vector3D0).crossProduct(nullable(org.apache.commons.math3.geometry.Vector.class));
      doReturn(0.0).when(vector3D0).dotProduct(nullable(org.apache.commons.math3.geometry.Vector.class));
      Vector3D vector3D1 = Vector3D.POSITIVE_INFINITY;
      Vector3D vector3D2 = Vector3D.crossProduct(vector3D1, vector3D1);
      Line line0 = new Line(vector3D2, vector3D2);
      Vector3D.dotProduct(vector3D0, vector3D0);
      Line line1 = new Line(line0);
      Line line2 = new Line(vector3D2, vector3D1);
      Vector3D.crossProduct(vector3D0, vector3D0);
      Line line3 = new Line(vector3D2, vector3D1);
      line2.pointAt(0.0);
      Vector1D vector1D0 = Vector1D.ZERO;
      Vector3D vector3D3 = line0.toSpace(vector1D0);
      vector3D3.getSpace();
      Locale locale0 = Locale.PRC;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Vector3D.angle(vector3D1, vector3D2);
      line0.reset(vector3D3, vector3D2);
      line1.toSpace(vector1D0);
      line1.distance(line3);
      line2.isSimilarTo(line3);
      line0.distance(line2);
      Line line4 = line1.revert();
      line2.intersection(line4);
      // Undeclared exception!
      line2.getAbscissa((Vector3D) null);
  }
}

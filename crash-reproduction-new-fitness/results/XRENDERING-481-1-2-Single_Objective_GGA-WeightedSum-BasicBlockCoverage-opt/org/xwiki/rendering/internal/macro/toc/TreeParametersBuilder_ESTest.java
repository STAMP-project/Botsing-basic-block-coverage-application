/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 25 22:53:01 UTC 2021
 */

package org.xwiki.rendering.internal.macro.toc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.xwiki.component.embed.EmbeddableComponentManager;
import org.xwiki.component.manager.ComponentEventManager;
import org.xwiki.component.util.DefaultParameterizedType;
import org.xwiki.model.reference.SpaceReference;
import org.xwiki.rendering.block.Block;
import org.xwiki.rendering.block.MacroBlock;
import org.xwiki.rendering.internal.macro.toc.TreeParametersBuilder;
import org.xwiki.rendering.macro.toc.TocMacroParameters;
import org.xwiki.rendering.syntax.Syntax;
import org.xwiki.rendering.transformation.MacroTransformationContext;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class TreeParametersBuilder_ESTest extends TreeParametersBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      TreeParametersBuilder treeParametersBuilder0 = new TreeParametersBuilder();
      TocMacroParameters.Scope tocMacroParameters_Scope0 = TocMacroParameters.Scope.LOCAL;
      TocMacroParameters tocMacroParameters0 = new TocMacroParameters();
      MacroTransformationContext macroTransformationContext0 = new MacroTransformationContext();
      macroTransformationContext0.getXDOM();
      EmbeddableComponentManager embeddableComponentManager0 = new EmbeddableComponentManager();
      embeddableComponentManager0.getComponentEventManager();
      embeddableComponentManager0.setComponentEventManager((ComponentEventManager) null);
      MacroTransformationContext macroTransformationContext1 = macroTransformationContext0.clone();
      StringReader stringReader0 = new StringReader("'");
      Syntax syntax0 = Syntax.CONFLUENCEXHTML_1_0;
      MacroTransformationContext macroTransformationContext2 = macroTransformationContext1.clone();
      DefaultParameterizedType defaultParameterizedType0 = (DefaultParameterizedType)SpaceReference.TYPE_PROVIDER;
      Map<String, String> map0 = embeddableComponentManager0.getInstanceMap((Type) defaultParameterizedType0);
      MacroBlock macroBlock0 = new MacroBlock("'", map0, false);
      macroBlock0.setParent((Block) null);
      macroTransformationContext2.setCurrentMacroBlock(macroBlock0);
      tocMacroParameters0.setDepth(0);
      tocMacroParameters0.setScope(tocMacroParameters_Scope0);
      macroTransformationContext1.clone();
      MacroTransformationContext macroTransformationContext3 = macroTransformationContext2.clone();
      // Undeclared exception!
      treeParametersBuilder0.build((Block) null, tocMacroParameters0, macroTransformationContext3);
  }
}

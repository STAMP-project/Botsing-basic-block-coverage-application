/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 28 10:51:25 UTC 2021
 */

package org.apache.commons.math3.geometry.euclidean.twod;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class PolygonsSet_ESTest extends PolygonsSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BSPTree.LeafMerger<Euclidean2D> bSPTree_LeafMerger0 = (BSPTree.LeafMerger<Euclidean2D>) mock(BSPTree.LeafMerger.class, new ViolatedAssumptionAnswer());
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      vector2D0.getNorm();
      Vector2D vector2D1 = vector2D0.scalarMultiply(1438.2603);
      Vector2D.distanceInf(vector2D0, vector2D0);
      vector2D1.add((-0.16666666666666666), (Vector<Euclidean2D>) vector2D0);
      Vector2D vector2D2 = new Vector2D(Double.POSITIVE_INFINITY, vector2D0);
      Vector2D vector2D3 = Vector2D.ZERO;
      vector2D2.subtract((Vector<Euclidean2D>) vector2D0);
      PolygonsSet polygonsSet0 = new PolygonsSet((-0.16666666666666666), 3965.514399128956, (-0.16666666666666666), 3.0);
      Vector2D vector2D4 = Vector2D.NEGATIVE_INFINITY;
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>(vector2D4);
      LinkedList<SubHyperplane<Euclidean1D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean1D>>();
      IntervalsSet intervalsSet0 = new IntervalsSet(linkedList0);
      polygonsSet0.buildNew(bSPTree0);
      PolygonsSet polygonsSet1 = polygonsSet0.buildNew(bSPTree0);
      polygonsSet0.buildNew(bSPTree0);
      PolygonsSet polygonsSet2 = polygonsSet1.buildNew(bSPTree0);
      // Undeclared exception!
      polygonsSet2.computeGeometricalProperties();
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 29 11:02:36 UTC 2021
 */

package org.xwiki.rendering.internal.macro.toc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.datatransfer.DataFlavor;
import java.lang.reflect.Type;
import java.time.ZoneId;
import java.util.Map;
import javax.inject.Provider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.xwiki.component.embed.EmbeddableComponentManager;
import org.xwiki.properties.BeanManager;
import org.xwiki.rendering.block.BulletedListBlock;
import org.xwiki.rendering.block.ImageBlock;
import org.xwiki.rendering.block.MacroBlock;
import org.xwiki.rendering.internal.macro.toc.TocMacro;
import org.xwiki.rendering.internal.renderer.DefaultLinkLabelGenerator;
import org.xwiki.rendering.listener.reference.ResourceReference;
import org.xwiki.rendering.macro.box.BoxMacroParameters;
import org.xwiki.rendering.macro.toc.TocMacroParameters;
import org.xwiki.rendering.transformation.MacroTransformationContext;
import org.xwiki.rendering.xdomxmlcurrent.internal.parser.XDOMXMLParser;
import org.xwiki.rendering.xml.internal.parser.AbstractStreamParser;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class TocMacro_ESTest extends TocMacro_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BeanManager beanManager0 = mock(BeanManager.class, new ViolatedAssumptionAnswer());
      TocMacro tocMacro0 = new TocMacro();
      DefaultLinkLabelGenerator defaultLinkLabelGenerator0 = new DefaultLinkLabelGenerator();
      Injector.inject(tocMacro0, (Class<?>) TocMacro.class, "linkLabelGenerator", (Object) defaultLinkLabelGenerator0);
      XDOMXMLParser xDOMXMLParser0 = new XDOMXMLParser();
      EmbeddableComponentManager embeddableComponentManager0 = new EmbeddableComponentManager();
      DataFlavor dataFlavor0 = DataFlavor.allHtmlFlavor;
      Class<?> class0 = dataFlavor0.getRepresentationClass();
      DataFlavor dataFlavor1 = DataFlavor.allHtmlFlavor;
      embeddableComponentManager0.hasComponent((Type) class0, "");
      Boolean boolean0 = new Boolean(false);
      ClassLoader.getSystemClassLoader();
      BoxMacroParameters boxMacroParameters0 = new BoxMacroParameters();
      boxMacroParameters0.getImage();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ImageBlock imageBlock0 = new ImageBlock((ResourceReference) null, false, map0);
      embeddableComponentManager0.release(imageBlock0);
      ClassLoader.getSystemResourceAsStream("!LS6$9");
      Injector.inject(xDOMXMLParser0, (Class<?>) AbstractStreamParser.class, "componentManager", (Object) embeddableComponentManager0);
      Injector.validateBean(xDOMXMLParser0, (Class<?>) XDOMXMLParser.class);
      Injector.inject(tocMacro0, (Class<?>) TocMacro.class, "plainTextParser", (Object) xDOMXMLParser0);
      Provider<BulletedListBlock> provider0 = (Provider<BulletedListBlock>) mock(Provider.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(provider0).get();
      Injector.inject(tocMacro0, (Class<?>) TocMacro.class, "wikiModelProvider", (Object) provider0);
      TocMacroParameters tocMacroParameters0 = new TocMacroParameters();
      TocMacroParameters.Scope tocMacroParameters_Scope0 = TocMacroParameters.Scope.LOCAL;
      tocMacroParameters0.setScope(tocMacroParameters_Scope0);
      MacroTransformationContext macroTransformationContext0 = new MacroTransformationContext();
      MacroBlock macroBlock0 = new MacroBlock("", map0, "7FJ", false);
      macroTransformationContext0.setCurrentMacroBlock(macroBlock0);
      // Undeclared exception!
      tocMacro0.execute(tocMacroParameters0, "!LS6$9", macroTransformationContext0);
  }
}

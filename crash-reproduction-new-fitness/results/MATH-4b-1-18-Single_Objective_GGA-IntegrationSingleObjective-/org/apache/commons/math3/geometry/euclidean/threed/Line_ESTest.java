/*
 * This file was automatically generated by EvoSuite
 * Mon May 18 01:34:29 UTC 2020
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.NumberFormat;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class Line_ESTest extends Line_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Vector3D vector3D1 = Vector3D.NEGATIVE_INFINITY;
      vector3D1.dotProduct((Vector<Euclidean3D>) vector3D0);
      Vector3D vector3D2 = vector3D1.add((Vector<Euclidean3D>) vector3D0);
      Vector3D vector3D3 = vector3D1.negate();
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D4 = new Vector3D(Double.NaN, vector3D1, Double.NaN, vector3D3);
      Vector3D vector3D5 = line0.getOrigin();
      Vector3D vector3D6 = new Vector3D(Double.NaN, vector3D2, Double.NaN, vector3D1, Double.NaN, vector3D1);
      Line line1 = new Line(vector3D2, vector3D0);
      line1.intersection(line0);
      line0.distance(line1);
      vector3D6.add((Vector<Euclidean3D>) vector3D3);
      Vector3D.crossProduct(vector3D3, vector3D1);
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      line0.getAbscissa(vector3D6);
      vector3D2.add(Double.NaN, (Vector<Euclidean3D>) vector3D6);
      vector3D2.toString(numberFormat0);
      Line line2 = new Line(line1);
      line2.intersection(line0);
      line0.intersection(line2);
      Vector3D vector3D7 = line0.getDirection();
      line0.getAbscissa(vector3D6);
      Vector3D vector3D8 = Vector3D.PLUS_K;
      Line line3 = new Line(vector3D1, vector3D5);
      Line line4 = new Line(line3);
      line4.intersection(line0);
      Line line5 = new Line(line0);
      Vector3D vector3D9 = Vector3D.NEGATIVE_INFINITY;
      Line line6 = new Line(vector3D9, vector3D7);
      // Undeclared exception!
      line0.toSubSpace((Vector<Euclidean3D>) null);
  }
}

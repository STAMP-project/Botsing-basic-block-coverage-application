/*
 * This file was automatically generated by EvoSuite
 * Mon May 18 04:44:46 UTC 2020
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDateTime;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class BaseChronology_ESTest extends BaseChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      int[] intArray0 = new int[0];
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      IslamicChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = new LocalDateTime((long) 1377);
      DateMidnight dateMidnight0 = new DateMidnight(537L);
      dateMidnight0.minusWeeks(1350);
      dateMidnight0.toMutableDateTimeISO();
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      int int0 = IslamicChronology.AH;
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      gJChronology0.getMinimumDaysInFirstWeek();
      gJChronology0.withUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      gJChronology0.julianToGregorianByYear(2224L);
      dateTimeZone0.getNameKey(1300L);
      BuddhistChronology.getInstance(dateTimeZone0);
      IslamicChronology.getInstance(dateTimeZone0);
      islamicChronology0.getAverageMillisPerMonth();
      julianChronology0.calculateFirstDayOfYearMillis(1);
      // Undeclared exception!
      islamicChronology0.set(localDateTime0, (-2253L));
  }
}

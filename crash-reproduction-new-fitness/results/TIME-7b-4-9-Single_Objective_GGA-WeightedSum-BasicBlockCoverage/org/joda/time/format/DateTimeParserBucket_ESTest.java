/*
 * This file was automatically generated by EvoSuite
 * Fri May 15 12:23:12 UTC 2020
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.format.DateTimeParserBucket;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class DateTimeParserBucket_ESTest extends DateTimeParserBucket_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DateTimeParserBucket.SavedField[] dateTimeParserBucket_SavedFieldArray0 = new DateTimeParserBucket.SavedField[2];
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(durationField0).isSupported();
      DateTimeParserBucket.compareReverse(durationField0, durationField0);
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      Locale locale0 = Locale.GERMAN;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(43L, buddhistChronology0, locale0);
      dateTimeParserBucket0.saveField(dateTimeField0, 830);
      dateTimeParserBucket0.computeMillis(false, "");
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      DateTimeParserBucket dateTimeParserBucket1 = new DateTimeParserBucket(3600023L, buddhistChronology0, locale1);
      Locale locale2 = dateTimeParserBucket0.getLocale();
      dateTimeParserBucket1.computeMillis(true, "");
      Locale.setDefault(locale2);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      dateTimeParserBucket1.saveField(dateTimeFieldType0, 1629);
      Locale.getISOLanguages();
      DateTimeParserBucket dateTimeParserBucket2 = new DateTimeParserBucket(3600023L, buddhistChronology0, locale0);
      // Undeclared exception!
      dateTimeParserBucket1.computeMillis(false, " 5kIgvt*Eb|^rB~?m");
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 27 07:23:02 UTC 2021
 */

package org.xwiki.rest.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.xwiki.component.manager.ComponentManager;
import org.xwiki.job.DefaultJobStatus;
import org.xwiki.job.DefaultRequest;
import org.xwiki.job.event.status.JobProgress;
import org.xwiki.job.event.status.JobStatus;
import org.xwiki.logging.LogQueue;
import org.xwiki.logging.LoggerManager;
import org.xwiki.observation.ObservationManager;
import org.xwiki.observation.internal.DefaultObservationManager;
import org.xwiki.rest.internal.DomainObjectFactory;
import org.xwiki.rest.model.jaxb.ObjectFactory;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class DomainObjectFactory_ESTest extends DomainObjectFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DomainObjectFactory domainObjectFactory0 = new DomainObjectFactory();
      URI uRI0 = null;
      DomainObjectFactory domainObjectFactory1 = new DomainObjectFactory();
      DomainObjectFactory domainObjectFactory2 = new DomainObjectFactory();
      DefaultRequest defaultRequest0 = new DefaultRequest();
      DefaultRequest defaultRequest1 = new DefaultRequest(defaultRequest0);
      DefaultObservationManager defaultObservationManager0 = new DefaultObservationManager();
      ComponentManager componentManager0 = mock(ComponentManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(defaultObservationManager0, (Class<?>) DefaultObservationManager.class, "componentManager", (Object) componentManager0);
      DefaultJobStatus<DefaultRequest> defaultJobStatus0 = new DefaultJobStatus<DefaultRequest>(defaultRequest1, (JobStatus) null, defaultObservationManager0, (LoggerManager) null);
      LogQueue logQueue0 = defaultJobStatus0.getLog();
      Injector.inject(defaultObservationManager0, (Class<?>) DefaultObservationManager.class, "logger", (Object) logQueue0);
      Injector.validateBean(defaultObservationManager0, (Class<?>) DefaultObservationManager.class);
      DefaultJobStatus<DefaultRequest> defaultJobStatus1 = new DefaultJobStatus<DefaultRequest>(defaultRequest1, (JobStatus) null, defaultObservationManager0, (LoggerManager) null);
      DefaultJobStatus<DefaultRequest> defaultJobStatus2 = new DefaultJobStatus<DefaultRequest>(defaultRequest1, defaultJobStatus1, (ObservationManager) null, (LoggerManager) null);
      JobProgress jobProgress0 = defaultJobStatus2.getProgress();
      ObjectFactory objectFactory0 = new ObjectFactory();
      DomainObjectFactory.createJobProgress(objectFactory0, jobProgress0);
      // Undeclared exception!
      DomainObjectFactory.createJobStatus(objectFactory0, (URI) null, defaultJobStatus1);
  }
}

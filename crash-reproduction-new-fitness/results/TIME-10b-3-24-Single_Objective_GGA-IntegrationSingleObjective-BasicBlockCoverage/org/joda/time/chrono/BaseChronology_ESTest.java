/*
 * This file was automatically generated by EvoSuite
 * Mon May 18 04:44:03 UTC 2020
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.LocalDateTime;
import org.joda.time.ReadablePeriod;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class BaseChronology_ESTest extends BaseChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DateTimeZone.getDefault();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null, 1);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      islamicChronology0.minuteOfDay();
      Hours hours0 = Hours.FIVE;
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance((DateTimeZone) null);
      islamicChronology0.minuteOfDay();
      Hours hours1 = Hours.FIVE;
      hours0.toStandardMinutes();
      gregorianChronology0.add((ReadablePeriod) hours1, (long) 1, 1);
      islamicChronology0.dayOfYear();
      islamicChronology1.yearOfCentury();
      gregorianChronology0.seconds();
      LocalDateTime localDateTime0 = new LocalDateTime((-1963L));
      Duration duration0 = Duration.millis(172799999L);
      localDateTime0.dayOfWeek();
      duration0.toDuration();
      // Undeclared exception!
      islamicChronology0.set(localDateTime0, 288L);
  }
}

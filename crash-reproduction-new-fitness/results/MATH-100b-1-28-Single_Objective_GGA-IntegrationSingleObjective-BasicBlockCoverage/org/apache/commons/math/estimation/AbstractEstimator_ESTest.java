/*
 * This file was automatically generated by EvoSuite
 * Sun May 17 16:06:44 UTC 2020
 */

package org.apache.commons.math.estimation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.estimation.EstimatedParameter;
import org.apache.commons.math.estimation.EstimationProblem;
import org.apache.commons.math.estimation.LevenbergMarquardtEstimator;
import org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest;
import org.apache.commons.math.estimation.SimpleEstimationProblem;
import org.apache.commons.math.estimation.WeightedMeasurement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractEstimator_ESTest extends AbstractEstimator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
      EstimationProblem estimationProblem0 = mock(EstimationProblem.class, new ViolatedAssumptionAnswer());
      SimpleEstimationProblem simpleEstimationProblem1 = new SimpleEstimationProblem();
      simpleEstimationProblem0.getAllParameters();
      SimpleEstimationProblem simpleEstimationProblem2 = new SimpleEstimationProblem();
      EstimatedParameter[] estimatedParameterArray0 = new EstimatedParameter[4];
      SimpleEstimationProblem simpleEstimationProblem3 = new SimpleEstimationProblem();
      simpleEstimationProblem2.getAllParameters();
      SimpleEstimationProblem simpleEstimationProblem4 = new SimpleEstimationProblem();
      simpleEstimationProblem4.getUnboundParameters();
      EstimatedParameter estimatedParameter0 = new EstimatedParameter((String) null, Double.POSITIVE_INFINITY);
      EstimatedParameter estimatedParameter1 = new EstimatedParameter("gDnID?@-}vsJ", 0.0, true);
      simpleEstimationProblem3.addParameter(estimatedParameter1);
      LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
      LevenbergMarquardtEstimatorTest levenbergMarquardtEstimatorTest0 = new LevenbergMarquardtEstimatorTest("esZ2Horibxz\"pEm#k");
      LevenbergMarquardtEstimatorTest.QuadraticProblem levenbergMarquardtEstimatorTest_QuadraticProblem0 = levenbergMarquardtEstimatorTest0.new QuadraticProblem();
      levenbergMarquardtEstimatorTest_QuadraticProblem0.addMeasurement((WeightedMeasurement) null);
      levenbergMarquardtEstimatorTest_QuadraticProblem0.getMeasurements();
      levenbergMarquardtEstimator0.estimate(simpleEstimationProblem4);
      // Undeclared exception!
      levenbergMarquardtEstimator0.getCovariances(levenbergMarquardtEstimatorTest_QuadraticProblem0);
  }
}

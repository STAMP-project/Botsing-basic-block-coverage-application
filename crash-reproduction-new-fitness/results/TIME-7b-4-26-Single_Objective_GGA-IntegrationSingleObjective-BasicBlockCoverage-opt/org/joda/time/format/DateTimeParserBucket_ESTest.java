/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 30 11:08:00 UTC 2021
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DurationField;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.field.DividedDateTimeField;
import org.joda.time.field.RemainderDateTimeField;
import org.joda.time.format.DateTimeParserBucket;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class DateTimeParserBucket_ESTest extends DateTimeParserBucket_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(durationField0).isSupported();
      DateTimeParserBucket.compareReverse(durationField0, (DurationField) null);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      dateTimeFieldType0.getDurationType();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.hourOfDay();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DateTimeField dateTimeField0 = dateTimeFieldType1.getField(gregorianChronology0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, (Locale) null);
      DateTimeParserBucket.SavedState dateTimeParserBucket_SavedState0 = dateTimeParserBucket0.new SavedState();
      Integer integer0 = dateTimeParserBucket_SavedState0.iOffset;
      DateTimeParserBucket dateTimeParserBucket1 = new DateTimeParserBucket(0, gregorianChronology0, (Locale) null, (Integer) null, 0);
      dateTimeParserBucket1.saveField(dateTimeFieldType0, 0);
      DateTimeParserBucket.SavedState dateTimeParserBucket_SavedState1 = dateTimeParserBucket1.new SavedState();
      Integer integer1 = dateTimeParserBucket_SavedState0.iOffset;
      Integer integer2 = new Integer(1647);
      dateTimeParserBucket0.restoreState(dateTimeParserBucket1);
      dateTimeParserBucket0.getOffset();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType1, 535);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0);
      dateTimeParserBucket0.saveField(dateTimeField0, 8);
      // Undeclared exception!
      dateTimeParserBucket1.computeMillis(false, "M`UKzP\"= %NsD(dk");
  }
}

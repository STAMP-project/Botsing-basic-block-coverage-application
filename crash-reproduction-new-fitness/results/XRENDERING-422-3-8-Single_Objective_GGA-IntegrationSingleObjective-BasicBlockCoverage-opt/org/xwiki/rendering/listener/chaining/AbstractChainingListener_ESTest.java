/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 29 15:06:34 UTC 2021
 */

package org.xwiki.rendering.listener.chaining;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.xwiki.rendering.listener.Format;
import org.xwiki.rendering.listener.HeaderLevel;
import org.xwiki.rendering.listener.Listener;
import org.xwiki.rendering.listener.chaining.BlockStateChainingListener;
import org.xwiki.rendering.listener.chaining.ConsecutiveNewLineStateChainingListener;
import org.xwiki.rendering.listener.chaining.EmptyBlockChainingListener;
import org.xwiki.rendering.listener.chaining.ListenerChain;
import org.xwiki.rendering.listener.chaining.StackableChainingListener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractChainingListener_ESTest extends AbstractChainingListener_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ListenerChain listenerChain0 = new ListenerChain();
      hashMap0.put("8r0", "");
      ConsecutiveNewLineStateChainingListener consecutiveNewLineStateChainingListener0 = new ConsecutiveNewLineStateChainingListener(listenerChain0);
      ConsecutiveNewLineStateChainingListener consecutiveNewLineStateChainingListener1 = new ConsecutiveNewLineStateChainingListener(listenerChain0);
      StackableChainingListener stackableChainingListener0 = consecutiveNewLineStateChainingListener1.createChainingListenerInstance();
      listenerChain0.addListener(stackableChainingListener0);
      BlockStateChainingListener blockStateChainingListener0 = new BlockStateChainingListener(listenerChain0);
      Map<String, String> map0 = Listener.EMPTY_PARAMETERS;
      HeaderLevel headerLevel0 = HeaderLevel.LEVEL1;
      blockStateChainingListener0.endHeader(headerLevel0, "", map0);
      EmptyBlockChainingListener emptyBlockChainingListener0 = new EmptyBlockChainingListener(listenerChain0);
      listenerChain0.addListener(emptyBlockChainingListener0);
      Format format0 = Format.NONE;
      // Undeclared exception!
      consecutiveNewLineStateChainingListener0.endFormat(format0, hashMap0);
  }
}

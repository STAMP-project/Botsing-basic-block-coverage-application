/*
 * This file was automatically generated by EvoSuite
 * Sat May 16 11:43:58 UTC 2020
 */

package org.apache.commons.math.estimation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import junit.framework.TestCase;
import org.apache.commons.math.estimation.EstimatedParameter;
import org.apache.commons.math.estimation.LevenbergMarquardtEstimator;
import org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest;
import org.apache.commons.math.estimation.WeightedMeasurement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractEstimator_ESTest extends AbstractEstimator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
      levenbergMarquardtEstimator0.setParRelativeTolerance((-2179.4916628204865));
      levenbergMarquardtEstimator0.setCostRelativeTolerance((-3520.032146199316));
      LevenbergMarquardtEstimatorTest levenbergMarquardtEstimatorTest0 = new LevenbergMarquardtEstimatorTest("+S#:6H");
      LevenbergMarquardtEstimatorTest.QuadraticProblem levenbergMarquardtEstimatorTest_QuadraticProblem0 = levenbergMarquardtEstimatorTest0.new QuadraticProblem();
      WeightedMeasurement weightedMeasurement0 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(weightedMeasurement0).getPartial(any(org.apache.commons.math.estimation.EstimatedParameter.class));
      doReturn(0.0).when(weightedMeasurement0).getResidual();
      doReturn(0.0, 0.0).when(weightedMeasurement0).getWeight();
      levenbergMarquardtEstimatorTest_QuadraticProblem0.addMeasurement(weightedMeasurement0);
      TestCase.assertEquals('k', 'k');
      levenbergMarquardtEstimator0.initializeEstimate(levenbergMarquardtEstimatorTest_QuadraticProblem0);
      levenbergMarquardtEstimator0.setCostRelativeTolerance(0.0);
      levenbergMarquardtEstimator0.setInitialStepBoundFactor(0.0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2179.4916628204865);
      doubleArray0[1] = 1933.702509497348;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1933.702509497348;
      doubleArray0[5] = (double) (-1);
      levenbergMarquardtEstimator0.residuals = doubleArray0;
      EstimatedParameter estimatedParameter0 = new EstimatedParameter("+S#:6H", 0.0, true);
      estimatedParameter0.setBound(true);
      levenbergMarquardtEstimatorTest_QuadraticProblem0.addParameter(estimatedParameter0);
      levenbergMarquardtEstimator0.getRMS(levenbergMarquardtEstimatorTest_QuadraticProblem0);
      levenbergMarquardtEstimator0.initializeEstimate(levenbergMarquardtEstimatorTest_QuadraticProblem0);
      // Undeclared exception!
      levenbergMarquardtEstimator0.getCovariances(levenbergMarquardtEstimatorTest_QuadraticProblem0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 30 11:05:20 UTC 2021
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.field.MillisDurationField;
import org.joda.time.format.DateTimeParserBucket;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class DateTimeParserBucket_ESTest extends DateTimeParserBucket_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DateTimeParserBucket.SavedField[] dateTimeParserBucket_SavedFieldArray0 = new DateTimeParserBucket.SavedField[4];
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn((DateTimeZone) null).when(chronology0).getZone();
      doReturn((Chronology) null).when(chronology0).withUTC();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DateTimeParserBucket.compareReverse(millisDurationField0, millisDurationField0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(586L, chronology0, (Locale) null);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Instant instant0 = new Instant((-71L));
      Chronology chronology1 = instant0.getChronology();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      instant0.isSupported(dateTimeFieldType0);
      DateTimeParserBucket dateTimeParserBucket1 = new DateTimeParserBucket((-9223372036854775808L), chronology1, (Locale) null);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfYear();
      dateTimeFieldType1.getField(chronology1);
      String string0 = null;
      dateTimeParserBucket1.saveField(dateTimeFieldType1, (String) null, (Locale) null);
      // Undeclared exception!
      dateTimeParserBucket1.computeMillis(true, "");
  }
}

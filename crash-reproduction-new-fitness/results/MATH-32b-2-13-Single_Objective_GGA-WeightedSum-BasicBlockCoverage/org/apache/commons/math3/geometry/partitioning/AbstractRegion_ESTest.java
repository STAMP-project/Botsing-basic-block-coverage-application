/*
 * This file was automatically generated by EvoSuite
 * Thu May 14 12:24:21 UTC 2020
 */

package org.apache.commons.math3.geometry.partitioning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.Line;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractRegion_ESTest extends AbstractRegion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PolyhedronsSet polyhedronsSet0 = new PolyhedronsSet();
      PolyhedronsSet polyhedronsSet1 = new PolyhedronsSet();
      polyhedronsSet1.contains(polyhedronsSet0);
      polyhedronsSet1.getBoundarySize();
      polyhedronsSet0.contains(polyhedronsSet1);
      polyhedronsSet0.getTree(false);
      polyhedronsSet0.getSize();
      Vector2D vector2D0 = new Vector2D(825.9631563, (-306.4583567868));
      Vector2D vector2D1 = new Vector2D((-306.4583567868), vector2D0, 0.0, vector2D0, 0.0, vector2D0, 3.0, vector2D0);
      Vector2D vector2D2 = Vector2D.POSITIVE_INFINITY;
      Vector2D vector2D3 = new Vector2D(Double.POSITIVE_INFINITY, vector2D1, 1.9868161777724352E-8, vector2D2);
      Line line0 = new Line(vector2D3, 0.0);
      Line line1 = new Line(line0);
      Vector1D vector1D0 = line1.toSubSpace(vector2D0);
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true);
      IntervalsSet intervalsSet0 = orientedPoint0.wholeSpace();
      intervalsSet0.getSize();
      IntervalsSet intervalsSet1 = new IntervalsSet();
      PolygonsSet polygonsSet0 = line0.wholeSpace();
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>(intervalsSet1);
      BSPTree<Euclidean2D> bSPTree1 = new BSPTree<Euclidean2D>((SubHyperplane<Euclidean2D>) null, bSPTree0, bSPTree0, polygonsSet0);
      PolygonsSet polygonsSet1 = polygonsSet0.buildNew(bSPTree1);
      // Undeclared exception!
      polygonsSet1.getSize();
  }
}

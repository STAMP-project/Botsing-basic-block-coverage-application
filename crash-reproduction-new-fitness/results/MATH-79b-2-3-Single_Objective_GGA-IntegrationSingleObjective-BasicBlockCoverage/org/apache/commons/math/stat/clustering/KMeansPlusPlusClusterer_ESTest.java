/*
 * This file was automatically generated by EvoSuite
 * Sat May 16 12:40:30 UTC 2020
 */

package org.apache.commons.math.stat.clustering;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Random;
import org.apache.commons.math.stat.clustering.Cluster;
import org.apache.commons.math.stat.clustering.EuclideanIntegerPoint;
import org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class KMeansPlusPlusClusterer_ESTest extends KMeansPlusPlusClusterer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Cluster<EuclideanIntegerPoint>> linkedList0 = new LinkedList<Cluster<EuclideanIntegerPoint>>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList1.addAll((Collection<? extends String>) linkedList2);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = Integer.MAX_VALUE;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
      LinkedList<EuclideanIntegerPoint> linkedList3 = new LinkedList<EuclideanIntegerPoint>();
      EuclideanIntegerPoint euclideanIntegerPoint1 = new EuclideanIntegerPoint(intArray0);
      linkedList3.add(euclideanIntegerPoint1);
      linkedList3.add(euclideanIntegerPoint0);
      Random random0 = new Random(0);
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(random0);
      EuclideanIntegerPoint euclideanIntegerPoint2 = new EuclideanIntegerPoint(intArray0);
      linkedList3.add(euclideanIntegerPoint2);
      // Undeclared exception!
      kMeansPlusPlusClusterer0.cluster(linkedList3, 1, 1);
  }
}

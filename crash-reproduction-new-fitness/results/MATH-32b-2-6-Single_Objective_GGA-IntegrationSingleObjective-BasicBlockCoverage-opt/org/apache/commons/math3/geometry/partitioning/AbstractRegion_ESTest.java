/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 28 10:51:13 UTC 2021
 */

package org.apache.commons.math3.geometry.partitioning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.Line;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.euclidean.twod.SubLine;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor;
import org.apache.commons.math3.geometry.partitioning.Hyperplane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractRegion_ESTest extends AbstractRegion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Hyperplane<Euclidean3D> hyperplane0 = (Hyperplane<Euclidean3D>) mock(Hyperplane.class, new ViolatedAssumptionAnswer());
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>();
      BoundarySizeVisitor<Euclidean1D> boundarySizeVisitor0 = new BoundarySizeVisitor<Euclidean1D>();
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Vector2D vector2D1 = new Vector2D((-1071.57), vector2D0);
      Line line0 = new Line(vector2D1, 996.84);
      PolygonsSet polygonsSet0 = line0.wholeSpace();
      polygonsSet0.checkPoint(vector2D0);
      Vector1D vector1D0 = line0.toSubSpace(vector2D0);
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true);
      OrientedPoint orientedPoint1 = orientedPoint0.copySelf();
      IntervalsSet intervalsSet0 = orientedPoint1.wholeSpace();
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      vector2D1.getNormInf();
      BSPTree<Euclidean2D> bSPTree1 = new BSPTree<Euclidean2D>(subLine0);
      orientedPoint1.revertSelf();
      PolygonsSet polygonsSet1 = polygonsSet0.buildNew(bSPTree1);
      // Undeclared exception!
      polygonsSet1.getSize();
  }
}

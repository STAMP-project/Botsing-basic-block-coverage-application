/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 29 06:56:11 UTC 2021
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.SinFunction;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.solvers.BrentSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class BrentSolver_ESTest extends BrentSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver();
      brentSolver0.resetRelativeAccuracy();
      UnivariateRealFunction univariateRealFunction0 = mock(UnivariateRealFunction.class, new ViolatedAssumptionAnswer());
      double double0 = brentSolver0.result;
      double double1 = brentSolver0.defaultFunctionValueAccuracy;
      brentSolver0.resetFunctionValueAccuracy();
      brentSolver0.resetAbsoluteAccuracy();
      brentSolver0.setFunctionValueAccuracy(1.0E-15);
      UnivariateRealFunction univariateRealFunction1 = mock(UnivariateRealFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(univariateRealFunction1).value(anyDouble());
      brentSolver0.isBracketing(996.1, 0.5, univariateRealFunction1);
      SinFunction sinFunction0 = new SinFunction();
      UnivariateRealFunction univariateRealFunction2 = sinFunction0.derivative();
      // Undeclared exception!
      brentSolver0.solve(univariateRealFunction2, 0.0, 1.0);
  }
}

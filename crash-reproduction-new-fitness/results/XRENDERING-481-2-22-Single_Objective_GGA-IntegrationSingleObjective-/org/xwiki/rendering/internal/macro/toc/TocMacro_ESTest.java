/*
 * This file was automatically generated by EvoSuite
 * Mon May 18 06:17:00 UTC 2020
 */

package org.xwiki.rendering.internal.macro.toc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Hashtable;
import java.util.Stack;
import javax.inject.Provider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.xwiki.component.descriptor.DefaultComponentDescriptor;
import org.xwiki.properties.BeanManager;
import org.xwiki.rendering.block.GroupBlock;
import org.xwiki.rendering.block.HeaderBlock;
import org.xwiki.rendering.block.MacroBlock;
import org.xwiki.rendering.block.XDOM;
import org.xwiki.rendering.internal.macro.toc.TocMacro;
import org.xwiki.rendering.macro.AbstractMacro;
import org.xwiki.rendering.macro.toc.TocMacroParameters;
import org.xwiki.rendering.parser.Parser;
import org.xwiki.rendering.renderer.reference.link.LinkLabelGenerator;
import org.xwiki.rendering.syntax.Syntax;
import org.xwiki.rendering.transformation.MacroTransformationContext;
import org.xwiki.rendering.transformation.TransformationContext;
import org.xwiki.rendering.util.IdGenerator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class TocMacro_ESTest extends TocMacro_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkLabelGenerator linkLabelGenerator0 = mock(LinkLabelGenerator.class, new ViolatedAssumptionAnswer());
      Parser parser0 = mock(Parser.class, new ViolatedAssumptionAnswer());
      BeanManager beanManager0 = mock(BeanManager.class, new ViolatedAssumptionAnswer());
      Provider<GroupBlock> provider0 = (Provider<GroupBlock>) mock(Provider.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(provider0).get();
      MacroTransformationContext macroTransformationContext0 = new MacroTransformationContext();
      IdGenerator idGenerator0 = new IdGenerator();
      Stack<HeaderBlock> stack0 = new Stack<HeaderBlock>();
      IdGenerator idGenerator1 = new IdGenerator();
      macroTransformationContext0.getXDOM();
      Syntax syntax0 = Syntax.CREOLE_1_0;
      TransformationContext transformationContext0 = new TransformationContext((XDOM) null, syntax0, false);
      MacroTransformationContext macroTransformationContext1 = new MacroTransformationContext(transformationContext0);
      TocMacroParameters tocMacroParameters0 = new TocMacroParameters();
      MacroTransformationContext macroTransformationContext2 = new MacroTransformationContext(transformationContext0);
      TocMacro tocMacro0 = new TocMacro();
      tocMacro0.supportsInlineMode();
      Injector.inject(tocMacro0, (Class<?>) TocMacro.class, "linkLabelGenerator", (Object) linkLabelGenerator0);
      Injector.inject(tocMacro0, (Class<?>) TocMacro.class, "plainTextParser", (Object) parser0);
      Injector.inject(tocMacro0, (Class<?>) TocMacro.class, "wikiModelProvider", (Object) provider0);
      Injector.inject(tocMacro0, (Class<?>) AbstractMacro.class, "beanManager", (Object) beanManager0);
      DefaultComponentDescriptor<HeaderBlock> defaultComponentDescriptor0 = new DefaultComponentDescriptor<HeaderBlock>();
      Class<HeaderBlock> class0 = HeaderBlock.class;
      TocMacroParameters.Scope tocMacroParameters_Scope0 = TocMacroParameters.Scope.LOCAL;
      tocMacroParameters0.setScope(tocMacroParameters_Scope0);
      defaultComponentDescriptor0.setImplementation(class0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      MacroBlock macroBlock0 = new MacroBlock("q^JA=o", hashtable0, "successfully received response from ", false);
      macroTransformationContext1.setCurrentMacroBlock(macroBlock0);
      Injector.inject(tocMacro0, (Class<?>) AbstractMacro.class, "componentDescriptor", (Object) defaultComponentDescriptor0);
      Injector.validateBean(tocMacro0, (Class<?>) TocMacro.class);
      // Undeclared exception!
      tocMacro0.execute(tocMacroParameters0, "Navigation", macroTransformationContext1);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 30 11:03:33 UTC 2021
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.field.DelegatedDateTimeField;
import org.joda.time.format.DateTimeParserBucket;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class DateTimeParserBucket_ESTest extends DateTimeParserBucket_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      IslamicChronology.getInstanceUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      Locale locale0 = Locale.PRC;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1960, islamicChronology0, locale0);
      dateTimeParserBucket0.restoreState(dateTimeZone0);
      Integer integer0 = new Integer(23);
      locale0.toLanguageTag();
      locale0.toLanguageTag();
      DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      dateTimeParserBucket0.saveField((DateTimeField) delegatedDateTimeField0, 3);
      Locale locale1 = Locale.ENGLISH;
      dateTimeParserBucket0.saveField(dateTimeFieldType0, (String) null, locale1);
      dateTimeParserBucket0.getLocale();
      Integer integer1 = new Integer(23);
      Object object0 = new Object();
      dateTimeParserBucket0.getLocale();
      // Undeclared exception!
      dateTimeParserBucket0.computeMillis(false, "Multiplication overflows a long: ");
  }
}

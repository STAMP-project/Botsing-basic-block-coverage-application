/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 25 21:28:19 UTC 2021
 */

package org.apache.commons.math.optimization.direct;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import org.apache.commons.math.analysis.MultivariateRealFunction;
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.OptimizationException;
import org.apache.commons.math.optimization.RealPointValuePair;
import org.apache.commons.math.optimization.SimpleScalarValueChecker;
import org.apache.commons.math.optimization.direct.MultiDirectional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class DirectSearchOptimizer_ESTest extends DirectSearchOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultivariateRealFunction multivariateRealFunction0 = mock(MultivariateRealFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(multivariateRealFunction0).value(any(double[].class));
      Comparator<RealPointValuePair> comparator0 = (Comparator<RealPointValuePair>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[22];
      doubleArray0[1] = (-891.0);
      doubleArray0[2] = (-919.0);
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = new double[0];
      RealPointValuePair realPointValuePair0 = new RealPointValuePair(doubleArray1, 0.0);
      Comparator<RealPointValuePair> comparator1 = (Comparator<RealPointValuePair>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray2 = new double[2][8];
      doubleArray2[0] = doubleArray0;
      MultiDirectional multiDirectional0 = new MultiDirectional();
      multiDirectional0.setMaxEvaluations(1163);
      multiDirectional0.setMaxIterations(1163);
      multiDirectional0.setMaxEvaluations((-2130));
      multiDirectional0.getIterations();
      SimpleScalarValueChecker simpleScalarValueChecker0 = new SimpleScalarValueChecker();
      multiDirectional0.setConvergenceChecker(simpleScalarValueChecker0);
      multiDirectional0.setMaxEvaluations(949);
      GoalType goalType0 = GoalType.MINIMIZE;
      try { 
        multiDirectional0.optimize(multivariateRealFunction0, goalType0, doubleArray1);
        fail("Expecting exception: OptimizationException");
      
      } catch(OptimizationException e) {
         //
         // org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (1,163) exceeded
         //
         verifyException("org.apache.commons.math.optimization.direct.DirectSearchOptimizer", e);
      }
  }
}

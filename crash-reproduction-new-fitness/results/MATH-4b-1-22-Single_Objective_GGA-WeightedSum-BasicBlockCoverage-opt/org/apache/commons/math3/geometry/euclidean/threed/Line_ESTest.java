/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 26 20:11:15 UTC 2021
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class Line_ESTest extends Line_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D((-4740.84432), vector3D0, 584.095863, vector3D0, 584.095863, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = line0.revert();
      Vector3D vector3D2 = line0.pointAt(584.095863);
      line1.isSimilarTo(line0);
      Line line2 = new Line(line0);
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector1D vector1D1 = new Vector1D(1386.2046118888115, vector1D0, (-3508.9811), vector1D0);
      Vector3D vector3D3 = line2.toSpace(vector1D1);
      line0.toSubSpace(vector3D2);
      line2.pointAt(1386.2046118888115);
      Vector3D vector3D4 = line0.getOrigin();
      line1.distance(vector3D0);
      Vector3D vector3D5 = Vector3D.POSITIVE_INFINITY;
      Line line3 = new Line(vector3D5, vector3D1);
      line1.getAbscissa(vector3D0);
      Vector3D vector3D6 = line3.pointAt(584.095863);
      vector3D0.dotProduct((Vector<Euclidean3D>) vector3D6);
      Line line4 = new Line(vector3D3, vector3D5);
      line3.isSimilarTo(line2);
      line3.contains(vector3D4);
      line2.distance(line3);
      line1.wholeLine();
      line4.intersection(line3);
      line0.reset(vector3D3, vector3D3);
      // Undeclared exception!
      line0.getAbscissa((Vector3D) null);
  }
}

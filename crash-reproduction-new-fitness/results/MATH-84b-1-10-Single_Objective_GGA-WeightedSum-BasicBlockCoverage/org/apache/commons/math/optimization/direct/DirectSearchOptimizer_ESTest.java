/*
 * This file was automatically generated by EvoSuite
 * Thu May 14 22:17:37 UTC 2020
 */

package org.apache.commons.math.optimization.direct;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.MultivariateVectorialFunction;
import org.apache.commons.math.optimization.OptimizationException;
import org.apache.commons.math.optimization.SimpleRealPointChecker;
import org.apache.commons.math.optimization.direct.MultiDirectional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class DirectSearchOptimizer_ESTest extends DirectSearchOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double double0 = 5417.510899889888;
      double double1 = (-2817.3321711653);
      MultiDirectional multiDirectional0 = new MultiDirectional(5417.510899889888, (-2817.3321711653));
      multiDirectional0.incrementIterationsCounter();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2817.3321711653);
      doubleArray0[1] = 5417.510899889888;
      doubleArray0[2] = (-2817.3321711653);
      doubleArray0[3] = 5417.510899889888;
      doubleArray0[4] = (-2817.3321711653);
      multiDirectional0.setStartConfiguration(doubleArray0);
      int int0 = 0;
      multiDirectional0.setMaxIterations(0);
      SimpleRealPointChecker simpleRealPointChecker0 = new SimpleRealPointChecker();
      MultivariateVectorialFunction multivariateVectorialFunction0 = mock(MultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
      try { 
        multiDirectional0.incrementIterationsCounter();
        fail("Expecting exception: OptimizationException");
      
      } catch(OptimizationException e) {
         //
         // org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (0) exceeded
         //
         verifyException("org.apache.commons.math.optimization.direct.DirectSearchOptimizer", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 26 09:59:52 UTC 2021
 */

package org.apache.commons.math3.geometry.partitioning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.AbstractRegion;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractRegion_ESTest extends AbstractRegion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>();
      bSPTree0.getCut();
      Euclidean3D euclidean3D0 = Euclidean3D.getInstance();
      Euclidean2D euclidean2D0 = euclidean3D0.getSubSpace();
      BSPTree<Euclidean1D> bSPTree1 = new BSPTree<Euclidean1D>((SubHyperplane<Euclidean1D>) null, bSPTree0, bSPTree0, euclidean2D0);
      IntervalsSet intervalsSet0 = new IntervalsSet(bSPTree1);
      BSPTree<Euclidean2D> bSPTree2 = new BSPTree<Euclidean2D>();
      Vector2D vector2D0 = new Vector2D(0.0, 0.0);
      Vector2D vector2D1 = new Vector2D(0.0, vector2D0);
      BSPTree<Euclidean2D> bSPTree3 = bSPTree2.split((SubHyperplane<Euclidean2D>) null);
      BSPTree<Euclidean2D> bSPTree4 = new BSPTree<Euclidean2D>((SubHyperplane<Euclidean2D>) null, bSPTree3, bSPTree2, vector2D0);
      PolygonsSet polygonsSet0 = new PolygonsSet(bSPTree4);
      AbstractRegion abstractRegion0 = polygonsSet0.copySelf();
      IntervalsSet intervalsSet1 = new IntervalsSet(bSPTree0);
      abstractRegion0.copySelf();
      // Undeclared exception!
      abstractRegion0.getSize();
  }
}

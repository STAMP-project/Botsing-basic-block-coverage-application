/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 25 15:08:15 UTC 2021
 */

package org.apache.commons.math3.geometry.euclidean.twod;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint;
import org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.Hyperplane;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class PolygonsSet_ESTest extends PolygonsSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet();
      polygonsSet0.copySelf();
      Vector<Euclidean2D> vector0 = polygonsSet0.getBarycenter();
      polygonsSet0.copySelf();
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      PolygonsSet polygonsSet1 = new PolygonsSet(linkedList0);
      polygonsSet0.isEmpty();
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Vector1D vector1D1 = Vector1D.POSITIVE_INFINITY;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D1, false);
      OrientedPoint orientedPoint1 = new OrientedPoint((Vector1D) null, false);
      OrientedPoint orientedPoint2 = orientedPoint1.copySelf();
      SubOrientedPoint subOrientedPoint0 = orientedPoint2.wholeHyperplane();
      Hyperplane<Euclidean1D> hyperplane0 = subOrientedPoint0.getHyperplane();
      IntervalsSet intervalsSet0 = new IntervalsSet((-4060.178), 0.0);
      SubOrientedPoint subOrientedPoint1 = new SubOrientedPoint(hyperplane0, intervalsSet0);
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>(vector0);
      PolygonsSet polygonsSet2 = polygonsSet1.buildNew(bSPTree0);
      // Undeclared exception!
      polygonsSet2.computeGeometricalProperties();
  }
}

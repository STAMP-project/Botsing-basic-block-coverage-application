/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 26 22:40:11 UTC 2021
 */

package org.apache.commons.math.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.distribution.CauchyDistributionImpl;
import org.apache.commons.math.distribution.FDistributionImpl;
import org.apache.commons.math.distribution.NormalDistributionImpl;
import org.apache.commons.math.distribution.TDistributionImpl;
import org.apache.commons.math.distribution.WeibullDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractContinuousDistribution_ESTest extends AbstractContinuousDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double double0 = Double.NaN;
      TDistributionImpl tDistributionImpl0 = new TDistributionImpl(Double.NaN);
      Double double1 = new Double(Double.NaN);
      Double double2 = new Double(Double.NaN);
      tDistributionImpl0.inverseCumulativeProbability((double) double1);
      WeibullDistributionImpl weibullDistributionImpl0 = new WeibullDistributionImpl(159.14427454622088, Double.NaN);
      weibullDistributionImpl0.setScale((double) double1);
      Double double3 = new Double(1.0);
      Double double4 = new Double((-100.63240086292932));
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      Double.isFinite((double) double2);
      Double double5 = new Double(Double.NaN);
      CauchyDistributionImpl cauchyDistributionImpl0 = new CauchyDistributionImpl();
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl((double) double1, 0.40311726890146815);
      // Undeclared exception!
      fDistributionImpl0.inverseCumulativeProbability(0.40311726890146815);
  }
}

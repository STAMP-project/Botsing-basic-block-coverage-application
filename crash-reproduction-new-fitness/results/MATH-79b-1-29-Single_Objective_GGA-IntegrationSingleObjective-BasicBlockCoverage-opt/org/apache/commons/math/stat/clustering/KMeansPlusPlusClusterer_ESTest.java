/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 28 11:44:35 UTC 2021
 */

package org.apache.commons.math.stat.clustering;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;
import org.apache.commons.math.stat.clustering.Cluster;
import org.apache.commons.math.stat.clustering.EuclideanIntegerPoint;
import org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class KMeansPlusPlusClusterer_ESTest extends KMeansPlusPlusClusterer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1283);
      intArray0[1] = (-1062);
      intArray0[2] = (-1062);
      intArray0[3] = (-1283);
      intArray0[4] = (-1062);
      intArray0[5] = Integer.MAX_VALUE;
      intArray0[6] = (-1283);
      intArray0[7] = 1008;
      EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
      Cluster<EuclideanIntegerPoint> cluster0 = new Cluster<EuclideanIntegerPoint>(euclideanIntegerPoint0);
      cluster0.addPoint(euclideanIntegerPoint0);
      EuclideanIntegerPoint euclideanIntegerPoint1 = new EuclideanIntegerPoint(intArray0);
      List<EuclideanIntegerPoint> list0 = cluster0.getPoints();
      Random random0 = new Random();
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(random0);
      cluster0.addPoint(euclideanIntegerPoint1);
      LinkedList<Cluster<EuclideanIntegerPoint>> linkedList0 = new LinkedList<Cluster<EuclideanIntegerPoint>>();
      random0.nextDouble();
      cluster0.addPoint(euclideanIntegerPoint0);
      // Undeclared exception!
      kMeansPlusPlusClusterer0.cluster(list0, (-1283), (-2296));
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sun May 17 16:04:15 UTC 2020
 */

package org.apache.commons.math.estimation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.estimation.LevenbergMarquardtEstimator;
import org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest;
import org.apache.commons.math.estimation.SimpleEstimationProblem;
import org.apache.commons.math.estimation.WeightedMeasurement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractEstimator_ESTest extends AbstractEstimator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
      SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
      WeightedMeasurement weightedMeasurement0 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(weightedMeasurement0).getResidual();
      doReturn(0.0, 0.0, 0.0, 0.0).when(weightedMeasurement0).getWeight();
      simpleEstimationProblem0.getMeasurements();
      levenbergMarquardtEstimator0.updateResidualsAndCost();
      levenbergMarquardtEstimator0.updateResidualsAndCost();
      levenbergMarquardtEstimator0.setParRelativeTolerance((-3368));
      simpleEstimationProblem0.addMeasurement(weightedMeasurement0);
      double[] doubleArray0 = new double[0];
      levenbergMarquardtEstimator0.residuals = doubleArray0;
      levenbergMarquardtEstimator0.setCostRelativeTolerance(Double.POSITIVE_INFINITY);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 2242.876658461076;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      levenbergMarquardtEstimator0.jacobian = doubleArray1;
      LevenbergMarquardtEstimatorTest levenbergMarquardtEstimatorTest0 = new LevenbergMarquardtEstimatorTest("S'(t8YipsY|)M(kb");
      LevenbergMarquardtEstimatorTest.QuadraticProblem levenbergMarquardtEstimatorTest_QuadraticProblem0 = levenbergMarquardtEstimatorTest0.new QuadraticProblem();
      levenbergMarquardtEstimator0.estimate(simpleEstimationProblem0);
      levenbergMarquardtEstimatorTest_QuadraticProblem0.addPoint(1715.9, 1715.9, (-4412.0));
      // Undeclared exception!
      levenbergMarquardtEstimator0.getCovariances(levenbergMarquardtEstimatorTest_QuadraticProblem0);
  }
}

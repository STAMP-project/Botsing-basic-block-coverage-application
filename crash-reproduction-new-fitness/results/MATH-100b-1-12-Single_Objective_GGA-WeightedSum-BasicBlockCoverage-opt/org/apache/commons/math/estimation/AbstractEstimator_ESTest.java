/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 26 09:01:51 UTC 2021
 */

package org.apache.commons.math.estimation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.estimation.EstimatedParameter;
import org.apache.commons.math.estimation.LevenbergMarquardtEstimator;
import org.apache.commons.math.estimation.SimpleEstimationProblem;
import org.apache.commons.math.estimation.WeightedMeasurement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractEstimator_ESTest extends AbstractEstimator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
      LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
      EstimatedParameter estimatedParameter0 = new EstimatedParameter("RealMatrixImpl{", (-3063.59429802002), true);
      simpleEstimationProblem0.addParameter(estimatedParameter0);
      levenbergMarquardtEstimator0.setCostRelativeTolerance(2059.0);
      levenbergMarquardtEstimator0.initializeEstimate(simpleEstimationProblem0);
      levenbergMarquardtEstimator0.setCostRelativeTolerance((-3063.59429802002));
      LevenbergMarquardtEstimator levenbergMarquardtEstimator1 = new LevenbergMarquardtEstimator();
      levenbergMarquardtEstimator1.setCostRelativeTolerance((-0.6512821533732934));
      levenbergMarquardtEstimator1.initializeEstimate(simpleEstimationProblem0);
      levenbergMarquardtEstimator1.getRMS(simpleEstimationProblem0);
      WeightedMeasurement weightedMeasurement0 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(weightedMeasurement0).getResidual();
      doReturn(0.0).when(weightedMeasurement0).getWeight();
      simpleEstimationProblem0.addMeasurement(weightedMeasurement0);
      levenbergMarquardtEstimator0.setCostRelativeTolerance(0.18112759460028924);
      levenbergMarquardtEstimator0.setCostRelativeTolerance(0.0);
      levenbergMarquardtEstimator1.initializeEstimate(simpleEstimationProblem0);
      levenbergMarquardtEstimator1.setCostRelativeTolerance((-3638.930482));
      levenbergMarquardtEstimator0.getChiSquare(simpleEstimationProblem0);
      // Undeclared exception!
      levenbergMarquardtEstimator0.getCovariances(simpleEstimationProblem0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Thu May 14 11:39:18 UTC 2020
 */

package org.apache.commons.math.estimation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.estimation.EstimatedParameter;
import org.apache.commons.math.estimation.LevenbergMarquardtEstimator;
import org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest;
import org.apache.commons.math.estimation.SimpleEstimationProblem;
import org.apache.commons.math.estimation.WeightedMeasurement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractEstimator_ESTest extends AbstractEstimator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
      LevenbergMarquardtEstimatorTest levenbergMarquardtEstimatorTest0 = new LevenbergMarquardtEstimatorTest((String) null);
      WeightedMeasurement weightedMeasurement0 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
      levenbergMarquardtEstimator0.cols = (-90);
      WeightedMeasurement[] weightedMeasurementArray0 = levenbergMarquardtEstimator0.measurements;
      SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
      levenbergMarquardtEstimator0.initializeEstimate(simpleEstimationProblem0);
      levenbergMarquardtEstimator0.updateResidualsAndCost();
      LevenbergMarquardtEstimator levenbergMarquardtEstimator1 = new LevenbergMarquardtEstimator();
      levenbergMarquardtEstimator1.estimate(simpleEstimationProblem0);
      levenbergMarquardtEstimator1.setParRelativeTolerance((-90));
      SimpleEstimationProblem simpleEstimationProblem1 = new SimpleEstimationProblem();
      EstimatedParameter estimatedParameter0 = new EstimatedParameter((String) null, 0.606);
      simpleEstimationProblem1.addMeasurement(weightedMeasurement0);
      EstimatedParameter estimatedParameter1 = new EstimatedParameter(estimatedParameter0);
      levenbergMarquardtEstimator1.cost = 0.606;
      simpleEstimationProblem1.addParameter(estimatedParameter1);
      simpleEstimationProblem1.getMeasurements();
      levenbergMarquardtEstimator1.getRMS(simpleEstimationProblem0);
      levenbergMarquardtEstimator0.getChiSquare(simpleEstimationProblem0);
      levenbergMarquardtEstimator1.getCostEvaluations();
      levenbergMarquardtEstimator0.setCostRelativeTolerance((-90));
      levenbergMarquardtEstimator1.getJacobianEvaluations();
      levenbergMarquardtEstimator0.incrementJacobianEvaluationsCounter();
      // Undeclared exception!
      levenbergMarquardtEstimator0.getCovariances(simpleEstimationProblem1);
  }
}

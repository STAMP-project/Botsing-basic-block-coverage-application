/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 29 09:23:49 UTC 2021
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BuddhistChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class BaseChronology_ESTest extends BaseChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      buddhistChronology0.centuries();
      DateTimeFieldType.centuryOfEra();
      int int0 = 20;
      DateTimeZone.forOffsetHours(20);
      buddhistChronology0.dayOfYear();
      BuddhistChronology buddhistChronology1 = BuddhistChronology.getInstance();
      LocalDate.now((Chronology) buddhistChronology0);
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withCenturyOfEra(1);
      DateTime dateTime0 = dateMidnight1.toDateTimeISO();
      Hours hours0 = Hours.FIVE;
      Duration duration0 = hours0.toStandardDuration();
      dateTime0.withWeekyear(2021);
      DurationFieldType.hours();
      DateTime dateTime1 = dateTime0.minusMonths(20);
      LocalDateTime localDateTime0 = dateTime1.toLocalDateTime();
      DateMidnight dateMidnight2 = dateMidnight0.withYear(20);
      duration0.toIntervalTo(dateMidnight2);
      // Undeclared exception!
      buddhistChronology1.set(localDateTime0, 1399L);
  }
}

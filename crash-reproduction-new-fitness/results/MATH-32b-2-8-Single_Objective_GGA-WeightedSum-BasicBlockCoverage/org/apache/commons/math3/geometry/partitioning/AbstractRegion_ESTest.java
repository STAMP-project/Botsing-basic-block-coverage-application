/*
 * This file was automatically generated by EvoSuite
 * Thu May 14 12:18:27 UTC 2020
 */

package org.apache.commons.math3.geometry.partitioning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint;
import org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.BoundaryAttribute;
import org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractRegion_ESTest extends AbstractRegion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean1D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean1D>>();
      PolygonsSet polygonsSet0 = new PolygonsSet();
      IntervalsSet intervalsSet0 = new IntervalsSet();
      intervalsSet0.asList();
      intervalsSet0.getSup();
      intervalsSet0.asList();
      intervalsSet0.isEmpty();
      intervalsSet0.asList();
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>(polygonsSet0);
      BoundarySizeVisitor<Euclidean1D> boundarySizeVisitor0 = new BoundarySizeVisitor<Euclidean1D>();
      Vector1D vector1D0 = Vector1D.ONE;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false);
      SubOrientedPoint subOrientedPoint0 = new SubOrientedPoint(orientedPoint0, intervalsSet0);
      BoundaryAttribute<Euclidean1D> boundaryAttribute0 = new BoundaryAttribute<Euclidean1D>(subOrientedPoint0, subOrientedPoint0);
      SubHyperplane<Euclidean1D> subHyperplane0 = boundaryAttribute0.getPlusOutside();
      BSPTree<Euclidean1D> bSPTree1 = bSPTree0.split((SubHyperplane<Euclidean1D>) null);
      Object object0 = new Object();
      BSPTree<Euclidean1D> bSPTree2 = new BSPTree<Euclidean1D>(subHyperplane0, bSPTree1, bSPTree0, object0);
      IntervalsSet intervalsSet1 = new IntervalsSet(bSPTree2);
      Object object1 = new Object();
      BSPTree<Euclidean2D> bSPTree3 = new BSPTree<Euclidean2D>(object1);
      BSPTree<Euclidean2D> bSPTree4 = bSPTree3.copySelf();
      PolygonsSet polygonsSet1 = new PolygonsSet(bSPTree4);
      // Undeclared exception!
      polygonsSet1.getSize();
  }
}

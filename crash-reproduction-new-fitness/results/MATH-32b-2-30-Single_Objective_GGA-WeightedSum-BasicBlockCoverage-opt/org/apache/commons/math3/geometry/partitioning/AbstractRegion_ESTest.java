/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 26 10:01:55 UTC 2021
 */

package org.apache.commons.math3.geometry.partitioning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint;
import org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.Plane;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.AbstractRegion;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.Transform;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractRegion_ESTest extends AbstractRegion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet();
      Euclidean1D euclidean1D0 = Euclidean1D.getInstance();
      AbstractRegion<Euclidean1D, Euclidean1D> abstractRegion0 = intervalsSet0.applyTransform((Transform<Euclidean1D, Euclidean1D>) null);
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>(euclidean1D0);
      intervalsSet0.getSize();
      intervalsSet0.getInf();
      Plane plane0 = new Plane(vector3D0, vector3D0);
      Plane plane1 = new Plane(plane0);
      Euclidean3D euclidean3D0 = Euclidean3D.getInstance();
      euclidean3D0.getSubSpace();
      Integer integer0 = new Integer(1);
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true);
      orientedPoint0.copySelf();
      SubOrientedPoint subOrientedPoint0 = orientedPoint0.wholeHyperplane();
      subOrientedPoint0.getHyperplane();
      SubOrientedPoint subOrientedPoint1 = new SubOrientedPoint(orientedPoint0, abstractRegion0);
      BSPTree<Euclidean2D> bSPTree1 = new BSPTree<Euclidean2D>(intervalsSet0);
      PolygonsSet polygonsSet0 = new PolygonsSet(bSPTree1);
      double double0 = 0.097;
      Vector2D vector2D0 = Vector2D.ZERO;
      // Undeclared exception!
      polygonsSet0.getSize();
  }
}

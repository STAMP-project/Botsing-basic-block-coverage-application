/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 26 09:53:58 UTC 2021
 */

package org.apache.commons.math3.geometry.partitioning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.partitioning.AbstractRegion;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.BoundaryAttribute;
import org.apache.commons.math3.geometry.partitioning.Hyperplane;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractRegion_ESTest extends AbstractRegion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet();
      Hyperplane<Euclidean3D> hyperplane0 = (Hyperplane<Euclidean3D>) mock(Hyperplane.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      BSPTree bSPTree0 = intervalsSet0.getTree(false);
      AbstractRegion abstractRegion0 = intervalsSet0.copySelf();
      abstractRegion0.buildNew(bSPTree0);
      PolygonsSet polygonsSet0 = new PolygonsSet();
      BoundaryAttribute<Euclidean2D> boundaryAttribute0 = new BoundaryAttribute<Euclidean2D>((SubHyperplane<Euclidean2D>) null, (SubHyperplane<Euclidean2D>) null);
      boundaryAttribute0.getPlusInside();
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      BSPTree<Euclidean2D> bSPTree1 = new BSPTree<Euclidean2D>((SubHyperplane<Euclidean2D>) null, bSPTree0, bSPTree0, integer0);
      PolygonsSet polygonsSet1 = new PolygonsSet(bSPTree1);
      BSPTree.LeafMerger<Euclidean2D> bSPTree_LeafMerger0 = (BSPTree.LeafMerger<Euclidean2D>) mock(BSPTree.LeafMerger.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      polygonsSet1.getSize();
  }
}

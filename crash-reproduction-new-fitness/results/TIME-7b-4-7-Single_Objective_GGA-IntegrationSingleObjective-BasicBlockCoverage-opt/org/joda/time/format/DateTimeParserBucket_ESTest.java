/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 30 11:04:32 UTC 2021
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Duration;
import java.time.temporal.TemporalField;
import java.util.HashMap;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.format.DateTimeParserBucket;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class DateTimeParserBucket_ESTest extends DateTimeParserBucket_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      BuddhistChronology buddhistChronology1 = BuddhistChronology.getInstance((DateTimeZone) null);
      buddhistChronology1.clockhourOfDay();
      Locale locale0 = Locale.PRC;
      Integer integer0 = new Integer(3639);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-83L), buddhistChronology0, locale0, integer0, 2642);
      BuddhistChronology buddhistChronology2 = BuddhistChronology.getInstanceUTC();
      buddhistChronology2.toString();
      DateTimeField dateTimeField0 = buddhistChronology2.dayOfMonth();
      dateTimeParserBucket0.saveField(dateTimeField0, 2642);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.getDefault(locale_Category0);
      dateTimeParserBucket0.restoreState((Object) null);
      Integer.getInteger("]nA)C", integer0);
      HashMap<TemporalField, Long> hashMap0 = new HashMap<TemporalField, Long>();
      Duration.ofSeconds(866L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      dateTimeParserBucket0.saveField(dateTimeFieldType0, 2642);
      // Undeclared exception!
      dateTimeParserBucket0.computeMillis(false, " + ");
  }
}

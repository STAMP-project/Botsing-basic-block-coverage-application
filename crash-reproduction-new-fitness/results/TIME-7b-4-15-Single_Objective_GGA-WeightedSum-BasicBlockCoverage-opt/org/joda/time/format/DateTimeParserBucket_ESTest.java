/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 27 16:35:59 UTC 2021
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeFieldType;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.format.DateTimeParserBucket;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class DateTimeParserBucket_ESTest extends DateTimeParserBucket_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      Integer integer0 = Integer.valueOf((-1));
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-1), julianChronology0, (Locale) null, integer0);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.centuryOfEra();
      dateTimeFieldType0.getDurationType();
      dateTimeFieldType1.getRangeDurationType();
      JulianChronology julianChronology1 = JulianChronology.getInstance();
      dateTimeFieldType0.getDurationType();
      DateTimeParserBucket dateTimeParserBucket1 = new DateTimeParserBucket((-1), julianChronology1, (Locale) null);
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.dayOfYear();
      dateTimeParserBucket1.saveField(dateTimeFieldType2, (String) null, (Locale) null);
      dateTimeParserBucket0.restoreState((Object) null);
      dateTimeParserBucket0.computeMillis();
      // Undeclared exception!
      dateTimeParserBucket1.computeMillis(true, (String) null);
  }
}

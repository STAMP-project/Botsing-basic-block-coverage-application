/*
 * This file was automatically generated by EvoSuite
 * Sat May 16 21:13:26 UTC 2020
 */

package org.jfree.chart.block;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Graphics2D;
import java.util.Locale;
import java.util.Vector;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.LengthConstraintType;
import org.jfree.chart.labels.StandardCategoryToolTipGenerator;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class BorderArrangement_ESTest extends BorderArrangement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BlockContainer blockContainer0 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      BlockContainer blockContainer1 = mock(BlockContainer.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D1 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D2 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Graphics2D graphics2D3 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.RANGE;
      int int0 = 1116;
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator();
      int int1 = (-1765);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      BlockContainer blockContainer2 = new BlockContainer();
      Locale locale0 = Locale.FRENCH;
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      stackedAreaRenderer0.getItemLabelFont((-1765), (-1765));
      Vector<Object> vector0 = new Vector<Object>();
      locale0.getDisplayScript(locale0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      Color color0 = Color.WHITE;
      double double0 = 1.4744840074713057;
      // Undeclared exception!
      cyclicNumberAxis0.zoomRange(30.711482310540422, (-1522.61458751));
  }
}

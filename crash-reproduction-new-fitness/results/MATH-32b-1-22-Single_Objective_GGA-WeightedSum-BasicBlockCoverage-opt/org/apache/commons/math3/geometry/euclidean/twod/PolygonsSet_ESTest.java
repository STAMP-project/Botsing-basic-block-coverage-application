/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 26 09:52:47 UTC 2021
 */

package org.apache.commons.math3.geometry.euclidean.twod;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.partitioning.AbstractRegion;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.apache.commons.math3.geometry.partitioning.Transform;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class PolygonsSet_ESTest extends PolygonsSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      PolygonsSet polygonsSet0 = new PolygonsSet(linkedList0);
      AbstractRegion<Euclidean2D, Euclidean1D> abstractRegion0 = polygonsSet0.copySelf();
      polygonsSet0.computeGeometricalProperties();
      Transform<Euclidean2D, Euclidean1D> transform0 = (Transform<Euclidean2D, Euclidean1D>) mock(Transform.class, new ViolatedAssumptionAnswer());
      AbstractRegion<Euclidean2D, Euclidean1D> abstractRegion1 = polygonsSet0.applyTransform(transform0);
      polygonsSet0.computeGeometricalProperties();
      Transform<Euclidean2D, Euclidean1D> transform1 = (Transform<Euclidean2D, Euclidean1D>) mock(Transform.class, new ViolatedAssumptionAnswer());
      AbstractRegion<Euclidean2D, Euclidean1D> abstractRegion2 = polygonsSet0.applyTransform(transform1);
      polygonsSet0.contains(abstractRegion0);
      polygonsSet0.getVertices();
      PolygonsSet polygonsSet1 = new PolygonsSet(linkedList0);
      polygonsSet0.copySelf();
      polygonsSet1.contains(abstractRegion1);
      PolygonsSet polygonsSet2 = new PolygonsSet();
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>(abstractRegion2);
      polygonsSet0.isEmpty();
      Vector<Euclidean2D> vector0 = polygonsSet0.getBarycenter();
      polygonsSet2.checkPoint(vector0);
      PolygonsSet polygonsSet3 = new PolygonsSet(bSPTree0);
      // Undeclared exception!
      polygonsSet3.getSize();
  }
}

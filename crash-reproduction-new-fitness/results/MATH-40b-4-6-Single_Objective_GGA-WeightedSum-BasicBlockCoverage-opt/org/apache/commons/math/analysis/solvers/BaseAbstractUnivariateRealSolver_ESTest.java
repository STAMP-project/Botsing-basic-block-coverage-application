/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 25 21:00:17 UTC 2021
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.Expm1Function;
import org.apache.commons.math.analysis.SinFunction;
import org.apache.commons.math.analysis.UnivariateFunction;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.BaseSecantSolver;
import org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math.analysis.solvers.SecantSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class BaseAbstractUnivariateRealSolver_ESTest extends BaseAbstractUnivariateRealSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Expm1Function expm1Function0 = new Expm1Function();
      SinFunction sinFunction0 = new SinFunction();
      double double0 = SecantSolver.DEFAULT_ABSOLUTE_ACCURACY;
      expm1Function0.value(1923.7286);
      expm1Function0.derivative();
      sinFunction0.value(0.0);
      double double1 = BaseSecantSolver.DEFAULT_ABSOLUTE_ACCURACY;
      sinFunction0.derivative();
      expm1Function0.value(1923.7286);
      UnivariateFunction univariateFunction0 = sinFunction0.derivative();
      double double2 = SecantSolver.DEFAULT_ABSOLUTE_ACCURACY;
      expm1Function0.derivative();
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(0.0, (-1.8242418979321309), (-1.8242418979321309), 698);
      bracketingNthOrderBrentSolver0.isSequence((-1.8242418979321309), (-2545.5315), 0.0);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      bracketingNthOrderBrentSolver0.solve(698, univariateFunction0, 0.0, (double) 698, allowedSolution0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Mon May 18 02:00:20 UTC 2020
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.QuinticFunction;
import org.apache.commons.math.analysis.UnivariateFunction;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class BracketingNthOrderBrentSolver_ESTest extends BracketingNthOrderBrentSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver((-0.21235359025351577), 1747);
      bracketingNthOrderBrentSolver0.getRelativeAccuracy();
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(univariateFunction0).value(anyDouble());
      bracketingNthOrderBrentSolver0.solve(1747, univariateFunction0, (-367.5295151056012));
      bracketingNthOrderBrentSolver0.doSolve();
      bracketingNthOrderBrentSolver0.incrementEvaluationCount();
      bracketingNthOrderBrentSolver0.getRelativeAccuracy();
      bracketingNthOrderBrentSolver0.doSolve();
      bracketingNthOrderBrentSolver0.getFunctionValueAccuracy();
      QuinticFunction quinticFunction0 = new QuinticFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      // Undeclared exception!
      bracketingNthOrderBrentSolver0.solve(13, (UnivariateFunction) quinticFunction0, (-909.30513), 4565.9, allowedSolution0);
  }
}

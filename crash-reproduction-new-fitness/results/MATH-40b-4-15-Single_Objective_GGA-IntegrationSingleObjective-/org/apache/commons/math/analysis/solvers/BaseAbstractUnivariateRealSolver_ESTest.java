/*
 * This file was automatically generated by EvoSuite
 * Sat May 16 22:18:26 UTC 2020
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.Expm1Function;
import org.apache.commons.math.analysis.SincFunction;
import org.apache.commons.math.analysis.UnivariateFunction;
import org.apache.commons.math.analysis.XMinus5Function;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math.analysis.solvers.MullerSolver;
import org.apache.commons.math.analysis.solvers.SecantSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class BaseAbstractUnivariateRealSolver_ESTest extends BaseAbstractUnivariateRealSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MullerSolver mullerSolver0 = new MullerSolver();
      double[] doubleArray0 = new double[2];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
      PolynomialFunction polynomialFunction2 = (PolynomialFunction)polynomialFunction1.derivative();
      polynomialFunction1.negate();
      polynomialFunction0.add(polynomialFunction1);
      polynomialFunction0.derivative();
      polynomialFunction2.add(polynomialFunction1);
      mullerSolver0.getEvaluations();
      XMinus5Function xMinus5Function0 = new XMinus5Function();
      SincFunction sincFunction0 = new SincFunction();
      xMinus5Function0.derivative();
      xMinus5Function0.derivative();
      double double0 = SecantSolver.DEFAULT_ABSOLUTE_ACCURACY;
      double double1 = SecantSolver.DEFAULT_ABSOLUTE_ACCURACY;
      double double2 = 1.1992295328636466E289;
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(0, 0.5, 81);
      Expm1Function expm1Function0 = new Expm1Function();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      bracketingNthOrderBrentSolver0.solve(81, (UnivariateFunction) expm1Function0, (-4260.0), 1.1992295328636466E289, (-130.65273924121), allowedSolution0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sun May 17 00:17:34 UTC 2020
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDateTime;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class BaseChronology_ESTest extends BaseChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      gregorianChronology0.getAverageMillisPerYear();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(100);
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(100);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      gregorianChronology0.isLeapYear(292272992);
      gregorianChronology0.isLeapYear(411);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      islamicChronology_LeapYearPatternType0.isLeapYear(100);
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance(dateTimeZone1, islamicChronology_LeapYearPatternType0);
      islamicChronology0.isLeapYear(100);
      DateMidnight.now();
      islamicChronology1.isLeapYear(100);
      JulianChronology.adjustYearForSet((-4));
      JulianChronology.getInstance();
      islamicChronology1.secondOfMinute();
      LocalDateTime localDateTime0 = new LocalDateTime((-3074L), (Chronology) gregorianChronology0);
      localDateTime0.minusMonths(292272992);
      LocalDateTime localDateTime1 = new LocalDateTime((DateTimeZone) null);
      // Undeclared exception!
      islamicChronology1.set(localDateTime0, 515L);
  }
}

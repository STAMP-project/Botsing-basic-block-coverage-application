/*
 * This file was automatically generated by EvoSuite
 * Sat May 16 22:24:03 UTC 2020
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.QuinticFunction;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class OpenMapRealVector_ESTest extends OpenMapRealVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-0.22592665280913415));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.add(openMapRealVector0);
      openMapRealVector0.unitVector();
      RealVector realVector0 = openMapRealVector0.projection((RealVector) openMapRealVector1);
      OpenMapRealVector openMapRealVector2 = new OpenMapRealVector(realVector0);
      QuinticFunction quinticFunction0 = new QuinticFunction();
      UnivariateRealFunction univariateRealFunction0 = quinticFunction0.derivative();
      openMapRealVector1.mapToSelf(univariateRealFunction0);
      QuinticFunction quinticFunction1 = new QuinticFunction();
      quinticFunction1.derivative();
      openMapRealVector2.isNaN();
      Double double0 = new Double(1.0E-12);
      OpenMapRealVector openMapRealVector3 = new OpenMapRealVector((RealVector) openMapRealVector1);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      quinticFunction0.derivative();
      // Undeclared exception!
      openMapRealVector3.ebeMultiply((RealVector) arrayRealVector0);
  }
}

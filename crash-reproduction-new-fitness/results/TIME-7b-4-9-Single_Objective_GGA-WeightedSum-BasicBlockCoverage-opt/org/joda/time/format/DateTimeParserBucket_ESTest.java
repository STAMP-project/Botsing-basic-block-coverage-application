/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 26 06:36:36 UTC 2021
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeZone;
import org.joda.time.MockZone;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.format.DateTimeParserBucket;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class DateTimeParserBucket_ESTest extends DateTimeParserBucket_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn((DateTimeZone) null).when(chronology0).getZone();
      doReturn((Chronology) null).when(chronology0).withUTC();
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-4284L), chronology0, (Locale) null, (Integer) null);
      dateTimeParserBucket0.computeMillis(true);
      Locale locale0 = Locale.KOREAN;
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Locale locale1 = Locale.FRENCH;
      DateTimeParserBucket dateTimeParserBucket1 = new DateTimeParserBucket(0L, julianChronology0, locale1);
      dateTimeParserBucket0.computeMillis(false, ":4:?2]|`VvWuq 66%P5");
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      dateTimeParserBucket1.saveField(dateTimeField0, 10);
      MockZone mockZone0 = new MockZone(10, 2675, 10);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(julianChronology0, mockZone0);
      DateTimeZone dateTimeZone0 = zonedChronology0.getZone();
      BuddhistChronology buddhistChronology1 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField1 = buddhistChronology1.weekOfWeekyear();
      dateTimeParserBucket1.saveField(dateTimeField1, 2632);
      // Undeclared exception!
      dateTimeParserBucket1.computeMillis(false, "Cannot parse \"");
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sun May 17 00:19:50 UTC 2020
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.LocalDate;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.Seconds;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.UnsupportedDateTimeField;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.centuries();
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
      DateTimeFieldType dateTimeFieldType1 = unsupportedDateTimeField0.getType();
      LocalDate localDate0 = new LocalDate((-2485L), (Chronology) buddhistChronology0);
      localDate0.get(dateTimeFieldType1);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.hourOfDay();
      dateTimeFieldType2.isSupported(ethiopicChronology0);
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      ISOChronology iSOChronology1 = ISOChronology.getInstance((DateTimeZone) null);
      iSOChronology1.withZone((DateTimeZone) null);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(iSOChronology0, fixedDateTimeZone0);
      zonedChronology0.getZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      LocalDate localDate1 = new LocalDate((Chronology) ethiopicChronology0);
      localDate1.toDateTimeAtStartOfDay(dateTimeZone1);
      localDate1.get(dateTimeFieldType0);
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = new Period((long) 7, periodType0);
      Seconds seconds0 = period0.toStandardSeconds();
      // Undeclared exception!
      BaseSingleFieldPeriod.between(localDate1, localDate0, seconds0);
  }
}

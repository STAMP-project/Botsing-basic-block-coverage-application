/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 29 09:18:42 UTC 2021
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationFieldType;
import org.joda.time.LocalDate;
import org.joda.time.Minutes;
import org.joda.time.PeriodType;
import org.joda.time.ReadablePeriod;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.field.UnsupportedDurationField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class BaseChronology_ESTest extends BaseChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      minutes0.toString();
      Minutes minutes1 = Minutes.MAX_VALUE;
      PeriodType.yearWeekDayTime();
      int int0 = 34;
      int int1 = 119;
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      ISOChronology.getInstanceUTC();
      durationFieldType0.isSupported((Chronology) null);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(34, 34);
      UnsupportedDurationField.getInstance(durationFieldType0);
      DurationFieldType.days();
      CopticChronology.getInstanceUTC();
      int int2 = (-2726);
      int int3 = EthiopicChronology.EE;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      EthiopicChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = new DateMidnight((long) 119, (Chronology) islamicChronology0);
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      LocalDate localDate1 = new LocalDate();
      localDate0.toInterval();
      LocalDate.now();
      islamicChronology0.get((ReadablePeriod) minutes1, (long) 1);
      // Undeclared exception!
      dateMidnight0.withFields(localDate0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 26 09:43:29 UTC 2021
 */

package org.apache.commons.math3.geometry.partitioning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.partitioning.AbstractRegion;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractRegion_ESTest extends AbstractRegion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet();
      AbstractRegion abstractRegion0 = intervalsSet0.copySelf();
      AbstractRegion abstractRegion1 = abstractRegion0.copySelf();
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>(abstractRegion1);
      IntervalsSet intervalsSet1 = intervalsSet0.buildNew(bSPTree0);
      intervalsSet1.copySelf();
      AbstractRegion abstractRegion2 = abstractRegion0.copySelf();
      BSPTree<Euclidean1D> bSPTree1 = new BSPTree<Euclidean1D>();
      BoundarySizeVisitor<Euclidean1D> boundarySizeVisitor0 = new BoundarySizeVisitor<Euclidean1D>();
      bSPTree1.visit(boundarySizeVisitor0);
      Euclidean2D.getInstance();
      Object object0 = new Object();
      bSPTree1.setAttribute(object0);
      AbstractRegion abstractRegion3 = new PolygonsSet();
      abstractRegion3.getSize();
      intervalsSet0.getSup();
      intervalsSet0.buildNew(bSPTree0);
      abstractRegion1.copySelf();
      abstractRegion2.getSize();
      Vector1D vector1D0 = Vector1D.ZERO;
      Vector1D vector1D1 = new Vector1D(0.9999999999, vector1D0, Double.POSITIVE_INFINITY, vector1D0, 1551.0, vector1D0);
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false);
      orientedPoint0.wholeHyperplane();
      bSPTree0.setAttribute(abstractRegion3);
      Object object1 = new Object();
      BSPTree<Euclidean2D> bSPTree2 = new BSPTree<Euclidean2D>(object1);
      PolygonsSet polygonsSet0 = new PolygonsSet(bSPTree2);
      // Undeclared exception!
      polygonsSet0.getSize();
  }
}

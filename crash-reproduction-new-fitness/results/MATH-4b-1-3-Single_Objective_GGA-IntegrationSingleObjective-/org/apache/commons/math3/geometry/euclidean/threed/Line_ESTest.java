/*
 * This file was automatically generated by EvoSuite
 * Sat May 16 21:10:32 UTC 2020
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class Line_ESTest extends Line_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = Vector3D.PLUS_I;
      vector3D0.getSpace();
      Vector3D vector3D2 = new Vector3D((-1.364696317893598), (-35.4356411218));
      Line line0 = new Line(vector3D1, vector3D2);
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Vector1D vector1D1 = Vector1D.ONE;
      Vector1D vector1D2 = new Vector1D(0.0, vector1D0, 0.0, vector1D0, (-1.364696317893598), vector1D0, 0.25, vector1D1);
      Vector1D vector1D3 = vector1D2.scalarMultiply(0.0);
      Vector3D vector3D3 = line0.toSpace(vector1D2);
      vector1D2.add(3685.4681098275655, (Vector<Euclidean1D>) vector1D3);
      line0.getAbscissa(vector3D0);
      vector1D1.scalarMultiply(0.4156727208504592);
      line0.wholeLine();
      line0.reset(vector3D3, vector3D2);
      line0.wholeLine();
      // Undeclared exception!
      line0.toSubSpace((Vector<Euclidean3D>) null);
  }
}

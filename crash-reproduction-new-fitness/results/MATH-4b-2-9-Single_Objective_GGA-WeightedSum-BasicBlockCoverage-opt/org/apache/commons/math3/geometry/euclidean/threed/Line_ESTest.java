/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 25 20:19:29 UTC 2021
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class Line_ESTest extends Line_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Vector3D vector3D1 = Vector3D.ZERO;
      vector3D1.add((Vector<Euclidean3D>) vector3D1);
      Vector3D vector3D2 = vector3D0.scalarMultiply((-1821.8));
      Line line0 = new Line(vector3D0, vector3D0);
      line0.distance(vector3D2);
      Vector3D vector3D3 = Vector3D.MINUS_I;
      vector3D0.getSpace();
      line0.getDirection();
      Line line1 = line0.revert();
      line0.intersection(line1);
      line0.wholeLine();
      Vector3D vector3D4 = Vector3D.MINUS_I;
      vector3D4.toString();
      line1.getAbscissa(vector3D4);
      line0.distance(line0);
      line0.getAbscissa(vector3D2);
      line1.pointAt(Double.NaN);
      line0.intersection(line1);
      // Undeclared exception!
      line0.toSubSpace((Vector<Euclidean3D>) null);
  }
}

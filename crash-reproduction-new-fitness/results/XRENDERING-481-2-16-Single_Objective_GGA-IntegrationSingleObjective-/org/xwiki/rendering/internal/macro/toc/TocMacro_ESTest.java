/*
 * This file was automatically generated by EvoSuite
 * Mon May 18 05:29:36 UTC 2020
 */

package org.xwiki.rendering.internal.macro.toc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Hashtable;
import javax.inject.Provider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.xwiki.component.descriptor.ComponentDescriptor;
import org.xwiki.properties.BeanManager;
import org.xwiki.rendering.block.BulletedListBlock;
import org.xwiki.rendering.block.GroupBlock;
import org.xwiki.rendering.block.MacroBlock;
import org.xwiki.rendering.internal.macro.toc.TocMacro;
import org.xwiki.rendering.macro.AbstractMacro;
import org.xwiki.rendering.macro.toc.TocMacroParameters;
import org.xwiki.rendering.parser.Parser;
import org.xwiki.rendering.renderer.reference.link.LinkLabelGenerator;
import org.xwiki.rendering.syntax.Syntax;
import org.xwiki.rendering.transformation.MacroTransformationContext;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class TocMacro_ESTest extends TocMacro_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkLabelGenerator linkLabelGenerator0 = mock(LinkLabelGenerator.class, new ViolatedAssumptionAnswer());
      Parser parser0 = mock(Parser.class, new ViolatedAssumptionAnswer());
      Provider<BulletedListBlock> provider0 = (Provider<BulletedListBlock>) mock(Provider.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(provider0).get();
      BeanManager beanManager0 = mock(BeanManager.class, new ViolatedAssumptionAnswer());
      ComponentDescriptor<GroupBlock> componentDescriptor0 = (ComponentDescriptor<GroupBlock>) mock(ComponentDescriptor.class, new ViolatedAssumptionAnswer());
      MacroTransformationContext macroTransformationContext0 = new MacroTransformationContext();
      MacroTransformationContext macroTransformationContext1 = macroTransformationContext0.clone();
      macroTransformationContext1.setId("#1_j_n");
      TocMacroParameters tocMacroParameters0 = new TocMacroParameters();
      MacroTransformationContext macroTransformationContext2 = new MacroTransformationContext();
      macroTransformationContext0.clone();
      TocMacro tocMacro0 = new TocMacro();
      Injector.inject(tocMacro0, (Class<?>) TocMacro.class, "linkLabelGenerator", (Object) linkLabelGenerator0);
      Syntax syntax0 = Syntax.MARKDOWN_1_0;
      macroTransformationContext1.setSyntax(syntax0);
      Injector.inject(tocMacro0, (Class<?>) TocMacro.class, "plainTextParser", (Object) parser0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      MacroBlock macroBlock0 = new MacroBlock("d^", hashtable0, "v=:!0q:.0", true);
      macroTransformationContext1.setCurrentMacroBlock(macroBlock0);
      Injector.inject(tocMacro0, (Class<?>) TocMacro.class, "wikiModelProvider", (Object) provider0);
      Injector.inject(tocMacro0, (Class<?>) AbstractMacro.class, "beanManager", (Object) beanManager0);
      Injector.inject(tocMacro0, (Class<?>) AbstractMacro.class, "componentDescriptor", (Object) componentDescriptor0);
      Injector.validateBean(tocMacro0, (Class<?>) TocMacro.class);
      Syntax syntax1 = Syntax.JSPWIKI_1_0;
      macroTransformationContext0.setSyntax(syntax1);
      tocMacro0.supportsInlineMode();
      macroTransformationContext2.setInline(false);
      TocMacroParameters.Scope tocMacroParameters_Scope0 = TocMacroParameters.Scope.LOCAL;
      tocMacroParameters0.setScope(tocMacroParameters_Scope0);
      // Undeclared exception!
      tocMacro0.execute(tocMacroParameters0, "#1_j_n", macroTransformationContext1);
  }
}

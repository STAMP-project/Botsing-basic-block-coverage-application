/*
 * This file was automatically generated by EvoSuite
 * Sat May 16 11:41:51 UTC 2020
 */

package org.apache.commons.math.estimation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.estimation.EstimatedParameter;
import org.apache.commons.math.estimation.LevenbergMarquardtEstimator;
import org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest;
import org.apache.commons.math.estimation.SimpleEstimationProblem;
import org.apache.commons.math.estimation.WeightedMeasurement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractEstimator_ESTest extends AbstractEstimator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
      levenbergMarquardtEstimator0.getJacobianEvaluations();
      LevenbergMarquardtEstimatorTest levenbergMarquardtEstimatorTest0 = new LevenbergMarquardtEstimatorTest("@vi^,>iD=qKejp3/Mh");
      LevenbergMarquardtEstimatorTest.QuadraticProblem levenbergMarquardtEstimatorTest_QuadraticProblem0 = levenbergMarquardtEstimatorTest0.new QuadraticProblem();
      WeightedMeasurement weightedMeasurement0 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(weightedMeasurement0).getPartial(any(org.apache.commons.math.estimation.EstimatedParameter.class));
      doReturn(0.0, 0.0).when(weightedMeasurement0).getResidual();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(weightedMeasurement0).getWeight();
      levenbergMarquardtEstimatorTest_QuadraticProblem0.addMeasurement(weightedMeasurement0);
      SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
      LevenbergMarquardtEstimator levenbergMarquardtEstimator1 = new LevenbergMarquardtEstimator();
      levenbergMarquardtEstimator1.initializeEstimate(levenbergMarquardtEstimatorTest_QuadraticProblem0);
      LevenbergMarquardtEstimator levenbergMarquardtEstimator2 = new LevenbergMarquardtEstimator();
      WeightedMeasurement[] weightedMeasurementArray0 = new WeightedMeasurement[9];
      weightedMeasurementArray0[0] = weightedMeasurement0;
      weightedMeasurementArray0[1] = weightedMeasurement0;
      weightedMeasurementArray0[2] = weightedMeasurement0;
      weightedMeasurementArray0[3] = weightedMeasurement0;
      EstimatedParameter estimatedParameter0 = new EstimatedParameter("^sWY)C-J% /[n_N\"", (-2133.3860364004468));
      levenbergMarquardtEstimatorTest_QuadraticProblem0.addParameter(estimatedParameter0);
      weightedMeasurementArray0[4] = weightedMeasurement0;
      weightedMeasurementArray0[5] = weightedMeasurement0;
      weightedMeasurementArray0[6] = weightedMeasurement0;
      weightedMeasurementArray0[7] = weightedMeasurement0;
      weightedMeasurementArray0[8] = weightedMeasurement0;
      levenbergMarquardtEstimator1.measurements = weightedMeasurementArray0;
      levenbergMarquardtEstimator1.updateResidualsAndCost();
      levenbergMarquardtEstimator1.updateResidualsAndCost();
      // Undeclared exception!
      levenbergMarquardtEstimator1.getCovariances(levenbergMarquardtEstimatorTest_QuadraticProblem0);
  }
}

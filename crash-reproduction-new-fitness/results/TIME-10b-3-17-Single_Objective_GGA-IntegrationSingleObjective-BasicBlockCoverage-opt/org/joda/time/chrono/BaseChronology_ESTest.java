/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 29 09:24:45 UTC 2021
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Hours;
import org.joda.time.LocalDate;
import org.joda.time.LocalTime;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class BaseChronology_ESTest extends BaseChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = assembledChronology_Fields0.clockhourOfDay;
      DateTimeField dateTimeField1 = assembledChronology_Fields0.monthOfYear;
      DateTimeField dateTimeField2 = assembledChronology_Fields0.clockhourOfDay;
      DateTimeField dateTimeField3 = assembledChronology_Fields0.monthOfYear;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      buddhistChronology0.secondOfMinute();
      LocalDate localDate0 = LocalDate.now();
      Days days0 = Days.FOUR;
      days0.toMutablePeriod();
      Hours hours0 = days0.toStandardHours();
      localDate0.minus(hours0);
      int int0 = (-210);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      localDate0.toDateTimeAtCurrentTime((DateTimeZone) fixedDateTimeZone0);
      LocalTime localTime0 = LocalTime.now((Chronology) islamicChronology0);
      // Undeclared exception!
      localTime0.withFields(localDate0);
  }
}

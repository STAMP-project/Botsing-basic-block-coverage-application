/*
 * This file was automatically generated by EvoSuite
 * Sun May 17 12:23:43 UTC 2020
 */

package com.xpn.xwiki.store.hibernate.query;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.qos.logback.classic.Logger;
import com.xpn.xwiki.store.hibernate.query.HqlQueryExecutor;
import java.time.LocalDate;
import java.util.HashMap;
import javax.inject.Provider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.hibernate.CacheMode;
import org.hibernate.Query;
import org.hibernate.engine.SessionImplementor;
import org.hibernate.engine.query.OrdinalParameterDescriptor;
import org.hibernate.engine.query.ParameterMetadata;
import org.hibernate.impl.CollectionFilterImpl;
import org.hibernate.loader.custom.sql.SQLCustomQuery;
import org.jgroups.util.ExtendedUUID;
import org.jgroups.util.FlagsUUID;
import org.junit.runner.RunWith;
import org.xwiki.configuration.ConfigurationSource;
import org.xwiki.query.internal.AbstractHiddenFilter;
import org.xwiki.query.internal.AbstractWhereQueryFilter;
import org.xwiki.query.internal.HiddenDocumentFilter;
import org.xwiki.security.authorization.ContextualAuthorizationManager;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class HqlQueryExecutor_ESTest extends HqlQueryExecutor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HqlQueryExecutor hqlQueryExecutor0 = new HqlQueryExecutor();
      ContextualAuthorizationManager contextualAuthorizationManager0 = mock(ContextualAuthorizationManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(hqlQueryExecutor0, (Class<?>) HqlQueryExecutor.class, "authorization", (Object) contextualAuthorizationManager0);
      Provider<Integer> provider0 = (Provider<Integer>) mock(Provider.class, new ViolatedAssumptionAnswer());
      HiddenDocumentFilter hiddenDocumentFilter0 = new HiddenDocumentFilter();
      ConfigurationSource configurationSource0 = mock(ConfigurationSource.class, new ViolatedAssumptionAnswer());
      Injector.inject(hiddenDocumentFilter0, (Class<?>) AbstractHiddenFilter.class, "userPreferencesSource", (Object) configurationSource0);
      Logger logger0 = (Logger)SQLCustomQuery.log;
      Injector.inject(hiddenDocumentFilter0, (Class<?>) AbstractWhereQueryFilter.class, "logger", (Object) logger0);
      Injector.validateBean(hiddenDocumentFilter0, (Class<?>) HiddenDocumentFilter.class);
      Logger logger1 = (Logger)SQLCustomQuery.log;
      ExtendedUUID extendedUUID0 = new ExtendedUUID(0L, 0L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)45;
      ExtendedUUID extendedUUID1 = extendedUUID0.put("<<line_", byteArray0);
      FlagsUUID flagsUUID0 = new FlagsUUID((FlagsUUID) extendedUUID1);
      ExtendedUUID extendedUUID2 = new ExtendedUUID(flagsUUID0);
      FlagsUUID flagsUUID1 = extendedUUID2.clearFlag((short)  (-55));
      SessionImplementor sessionImplementor0 = mock(SessionImplementor.class, new ViolatedAssumptionAnswer());
      OrdinalParameterDescriptor[] ordinalParameterDescriptorArray0 = new OrdinalParameterDescriptor[0];
      HashMap<Object, LocalDate> hashMap0 = new HashMap<Object, LocalDate>();
      ParameterMetadata parameterMetadata0 = new ParameterMetadata(ordinalParameterDescriptorArray0, hashMap0);
      CollectionFilterImpl collectionFilterImpl0 = new CollectionFilterImpl((String) null, flagsUUID1, sessionImplementor0, parameterMetadata0);
      CacheMode.parse("<<line_");
      Query query0 = collectionFilterImpl0.setCacheMode((CacheMode) null);
      // Undeclared exception!
      hqlQueryExecutor0.setNamedParameter(query0, "u|cJ#z", extendedUUID1);
  }
}

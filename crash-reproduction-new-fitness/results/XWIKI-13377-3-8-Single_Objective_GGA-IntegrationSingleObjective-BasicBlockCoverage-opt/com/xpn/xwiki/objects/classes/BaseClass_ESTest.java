/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 01 15:38:17 UTC 2021
 */

package com.xpn.xwiki.objects.classes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.xpn.xwiki.objects.BaseCollection;
import com.xpn.xwiki.objects.meta.EmailMetaClass;
import com.xpn.xwiki.objects.meta.GroupsMetaClass;
import java.util.Map;
import java.util.concurrent.ConcurrentSkipListMap;
import javax.inject.Provider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.xwiki.model.internal.reference.ExplicitReferenceDocumentReferenceResolver;
import org.xwiki.model.reference.EntityReferenceResolver;
import org.xwiki.rendering.transformation.RenderingContext;
import org.xwiki.security.authorization.AuthorizationManager;
import org.xwiki.security.authorization.internal.DefaultContextualAuthorizationManager;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class BaseClass_ESTest extends BaseClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      GroupsMetaClass groupsMetaClass0 = new GroupsMetaClass();
      groupsMetaClass0.addUsersField("x:ocRO?uLWwx!", "c9rr-{qyK*W,yYJE5", 7004, false);
      groupsMetaClass0.setDirty(false);
      ConcurrentSkipListMap<String, DefaultContextualAuthorizationManager> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, DefaultContextualAuthorizationManager>();
      DefaultContextualAuthorizationManager defaultContextualAuthorizationManager0 = new DefaultContextualAuthorizationManager();
      AuthorizationManager authorizationManager0 = mock(AuthorizationManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(defaultContextualAuthorizationManager0, (Class<?>) DefaultContextualAuthorizationManager.class, "authorizationManager", (Object) authorizationManager0);
      RenderingContext renderingContext0 = mock(RenderingContext.class, new ViolatedAssumptionAnswer());
      Injector.inject(defaultContextualAuthorizationManager0, (Class<?>) DefaultContextualAuthorizationManager.class, "renderingContext", (Object) renderingContext0);
      EntityReferenceResolver<EmailMetaClass> entityReferenceResolver0 = (EntityReferenceResolver<EmailMetaClass>) mock(EntityReferenceResolver.class, new ViolatedAssumptionAnswer());
      Injector.inject(defaultContextualAuthorizationManager0, (Class<?>) DefaultContextualAuthorizationManager.class, "resolver", (Object) entityReferenceResolver0);
      Provider<ExplicitReferenceDocumentReferenceResolver> provider0 = (Provider<ExplicitReferenceDocumentReferenceResolver>) mock(Provider.class, new ViolatedAssumptionAnswer());
      Injector.inject(defaultContextualAuthorizationManager0, (Class<?>) DefaultContextualAuthorizationManager.class, "xcontextProvider", (Object) provider0);
      Injector.validateBean(defaultContextualAuthorizationManager0, (Class<?>) DefaultContextualAuthorizationManager.class);
      concurrentSkipListMap0.put("x:ocRO?uLWwx!", defaultContextualAuthorizationManager0);
      // Undeclared exception!
      groupsMetaClass0.fromMap((Map<String, ?>) concurrentSkipListMap0, (BaseCollection) groupsMetaClass0);
  }
}

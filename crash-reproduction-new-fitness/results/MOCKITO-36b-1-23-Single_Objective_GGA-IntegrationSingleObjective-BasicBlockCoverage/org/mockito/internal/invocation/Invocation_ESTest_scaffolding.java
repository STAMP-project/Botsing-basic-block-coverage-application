/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Sun May 17 17:03:57 UTC 2020
 */

package org.mockito.internal.invocation;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class Invocation_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.mockito.internal.invocation.Invocation"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 


  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Invocation_ESTest_scaffolding.class.getClassLoader() ,
      "org.hamcrest.core.IsNull",
      "org.hamcrest.StringDescription",
      "org.mockito.internal.util.ObjectMethodsGuru",
      "org.hamcrest.core.Is",
      "org.mockito.cglib.reflect.FastClass",
      "org.mockito.internal.invocation.realmethod.FilteredCGLIBProxyRealMethod",
      "org.mockito.internal.creation.DelegatingMockitoMethodProxy",
      "org.mockito.cglib.core.NamingPolicy",
      "org.mockito.internal.invocation.realmethod.RealMethod",
      "org.hamcrest.core.DescribedAs",
      "org.mockito.cglib.core.DuplicatesPredicate",
      "org.mockito.internal.creation.MockitoMethodProxy",
      "org.mockito.internal.reporting.PrintingFriendlyInvocation",
      "org.mockito.internal.creation.cglib.MockitoNamingPolicy",
      "org.mockito.internal.invocation.SerializableMockitoMethod",
      "org.mockito.internal.invocation.MockitoMethod",
      "org.hamcrest.SelfDescribing",
      "org.mockito.cglib.proxy.MethodProxy$CreateInfo",
      "org.mockito.internal.invocation.Invocation",
      "org.hamcrest.BaseDescription",
      "org.hamcrest.core.IsNot",
      "org.mockito.cglib.core.DefaultNamingPolicy",
      "org.hamcrest.internal.SelfDescribingValue",
      "org.mockito.internal.creation.AbstractMockitoMethodProxy",
      "org.mockito.exceptions.PrintableInvocation",
      "org.mockito.cglib.proxy.MethodProxy$FastClassInfo",
      "org.hamcrest.core.AllOf",
      "org.mockito.internal.invocation.realmethod.HasCGLIBMethodProxy",
      "org.mockito.asm.Type",
      "org.hamcrest.BaseMatcher",
      "org.mockito.internal.exceptions.base.StackTraceFilter",
      "org.mockito.invocation.InvocationOnMock",
      "org.hamcrest.core.AnyOf",
      "org.mockito.internal.util.Primitives",
      "org.hamcrest.core.IsAnything",
      "org.hamcrest.core.IsEqual",
      "org.hamcrest.Factory",
      "org.mockito.cglib.core.RejectModifierPredicate",
      "org.hamcrest.core.IsInstanceOf",
      "org.hamcrest.core.IsSame",
      "org.mockito.cglib.core.Signature",
      "org.mockito.cglib.core.VisibilityPredicate",
      "org.hamcrest.Description",
      "org.mockito.internal.debugging.Location",
      "org.mockito.cglib.core.Predicate",
      "org.mockito.cglib.proxy.MethodProxy",
      "org.mockito.cglib.core.CodeGenerationException",
      "org.hamcrest.Matcher",
      "org.mockito.internal.creation.SerializableMockitoMethodProxy",
      "org.mockito.internal.invocation.realmethod.CGLIBProxyRealMethod",
      "org.mockito.internal.reporting.PrintSettings"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("org.mockito.internal.invocation.MockitoMethod", false, Invocation_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.mockito.internal.invocation.realmethod.RealMethod", false, Invocation_ESTest_scaffolding.class.getClassLoader()));
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 27 02:59:38 UTC 2021
 */

package org.xwiki.rendering.internal.macro.toc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.xwiki.component.embed.EmbeddableComponentManager;
import org.xwiki.rendering.block.Block;
import org.xwiki.rendering.block.BulletedListBlock;
import org.xwiki.rendering.block.CompositeBlock;
import org.xwiki.rendering.block.MacroBlock;
import org.xwiki.rendering.block.QuotationBlock;
import org.xwiki.rendering.block.SectionBlock;
import org.xwiki.rendering.block.match.BlockMatcher;
import org.xwiki.rendering.block.match.ClassBlockMatcher;
import org.xwiki.rendering.block.match.CompositeBlockMatcher;
import org.xwiki.rendering.block.match.MacroBlockMatcher;
import org.xwiki.rendering.block.match.MetadataBlockMatcher;
import org.xwiki.rendering.block.match.SameBlockMatcher;
import org.xwiki.rendering.internal.macro.toc.TreeParametersBuilder;
import org.xwiki.rendering.internal.parser.AbstractBlockParser;
import org.xwiki.rendering.internal.parser.plain.PlainTextBlockParser;
import org.xwiki.rendering.internal.parser.pygments.PygmentsParser;
import org.xwiki.rendering.internal.parser.pygments.PygmentsParserConfiguration;
import org.xwiki.rendering.macro.toc.TocMacroParameters;
import org.xwiki.rendering.transformation.MacroTransformationContext;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class TreeParametersBuilder_ESTest extends TreeParametersBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TreeParametersBuilder treeParametersBuilder0 = new TreeParametersBuilder();
      CompositeBlock compositeBlock0 = new CompositeBlock();
      MacroTransformationContext macroTransformationContext0 = new MacroTransformationContext();
      TocMacroParameters tocMacroParameters0 = new TocMacroParameters();
      TocMacroParameters.Scope tocMacroParameters_Scope0 = TocMacroParameters.Scope.LOCAL;
      PygmentsParser pygmentsParser0 = new PygmentsParser();
      PygmentsParserConfiguration pygmentsParserConfiguration0 = mock(PygmentsParserConfiguration.class, new ViolatedAssumptionAnswer());
      Injector.inject(pygmentsParser0, (Class<?>) PygmentsParser.class, "configuration", (Object) pygmentsParserConfiguration0);
      PlainTextBlockParser plainTextBlockParser0 = new PlainTextBlockParser();
      EmbeddableComponentManager embeddableComponentManager0 = new EmbeddableComponentManager("");
      Injector.inject(plainTextBlockParser0, (Class<?>) AbstractBlockParser.class, "componentManager", (Object) embeddableComponentManager0);
      Injector.validateBean(plainTextBlockParser0, (Class<?>) PlainTextBlockParser.class);
      Injector.inject(pygmentsParser0, (Class<?>) PygmentsParser.class, "plainTextParser", (Object) plainTextBlockParser0);
      Injector.validateBean(pygmentsParser0, (Class<?>) PygmentsParser.class);
      StringReader stringReader0 = new StringReader("");
      List<Block> list0 = pygmentsParser0.highlight("The key (", stringReader0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      SectionBlock sectionBlock0 = new SectionBlock(list0, hashtable0);
      BlockMatcher[] blockMatcherArray0 = new BlockMatcher[7];
      QuotationBlock quotationBlock0 = new QuotationBlock(list0, hashtable0);
      SameBlockMatcher sameBlockMatcher0 = new SameBlockMatcher(quotationBlock0);
      blockMatcherArray0[0] = (BlockMatcher) sameBlockMatcher0;
      MacroBlockMatcher macroBlockMatcher0 = new MacroBlockMatcher("The key (");
      blockMatcherArray0[1] = (BlockMatcher) macroBlockMatcher0;
      MetadataBlockMatcher metadataBlockMatcher0 = new MetadataBlockMatcher("The key (", macroBlockMatcher0);
      blockMatcherArray0[2] = (BlockMatcher) metadataBlockMatcher0;
      MetadataBlockMatcher metadataBlockMatcher1 = new MetadataBlockMatcher("upperBound", blockMatcherArray0[0]);
      blockMatcherArray0[3] = (BlockMatcher) metadataBlockMatcher1;
      SameBlockMatcher sameBlockMatcher1 = new SameBlockMatcher(quotationBlock0);
      blockMatcherArray0[4] = (BlockMatcher) sameBlockMatcher1;
      Class<SectionBlock> class0 = SectionBlock.class;
      ClassBlockMatcher classBlockMatcher0 = new ClassBlockMatcher(class0);
      blockMatcherArray0[5] = (BlockMatcher) classBlockMatcher0;
      MetadataBlockMatcher metadataBlockMatcher2 = new MetadataBlockMatcher("The key (", blockMatcherArray0[5]);
      blockMatcherArray0[6] = (BlockMatcher) metadataBlockMatcher2;
      CompositeBlockMatcher compositeBlockMatcher0 = new CompositeBlockMatcher(blockMatcherArray0);
      Block.Axes block_Axes0 = Block.Axes.DESCENDANT;
      List<Block> list1 = sectionBlock0.getBlocks((BlockMatcher) compositeBlockMatcher0, block_Axes0);
      BulletedListBlock bulletedListBlock0 = new BulletedListBlock(list1);
      List<Block> list2 = bulletedListBlock0.getBlocks((BlockMatcher) metadataBlockMatcher2, block_Axes0);
      BulletedListBlock bulletedListBlock1 = new BulletedListBlock(list2, hashtable0);
      Map<String, String> map0 = bulletedListBlock1.getParameters();
      MacroBlock macroBlock0 = new MacroBlock("V%4g)\"jn_:PfAm'jzd.", map0, false);
      macroTransformationContext0.setCurrentMacroBlock(macroBlock0);
      tocMacroParameters0.setScope(tocMacroParameters_Scope0);
      // Undeclared exception!
      treeParametersBuilder0.build(compositeBlock0, tocMacroParameters0, macroTransformationContext0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 29 20:38:16 UTC 2021
 */

package org.xwiki.rest.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.xpn.xwiki.doc.merge.MergeResult;
import java.net.URI;
import java.sql.SQLNonTransientException;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.slf4j.helpers.BasicMarker;
import org.slf4j.helpers.NOPLogger;
import org.xwiki.component.manager.ComponentManager;
import org.xwiki.job.DefaultRequest;
import org.xwiki.job.event.status.JobStatus;
import org.xwiki.logging.LogLevel;
import org.xwiki.logging.LogQueue;
import org.xwiki.logging.event.LogEvent;
import org.xwiki.logging.logback.internal.DefaultLoggerManager;
import org.xwiki.observation.ObservationManager;
import org.xwiki.observation.internal.DefaultObservationManager;
import org.xwiki.rest.internal.ModelFactory;
import org.xwiki.rest.model.jaxb.ObjectFactory;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class DomainObjectFactory_ESTest extends DomainObjectFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ModelFactory modelFactory0 = new ModelFactory();
      ObjectFactory objectFactory0 = new ObjectFactory();
      URI uRI0 = null;
      DefaultRequest defaultRequest0 = new DefaultRequest();
      DefaultRequest defaultRequest1 = new DefaultRequest(defaultRequest0);
      JobStatus jobStatus0 = null;
      ObservationManager observationManager0 = null;
      DefaultLoggerManager defaultLoggerManager0 = new DefaultLoggerManager();
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      Injector.inject(defaultLoggerManager0, (Class<?>) DefaultLoggerManager.class, "logger", (Object) nOPLogger0);
      DefaultObservationManager defaultObservationManager0 = new DefaultObservationManager();
      ComponentManager componentManager0 = mock(ComponentManager.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(componentManager0).getInstanceList(any(java.lang.reflect.Type.class));
      Injector.inject(defaultObservationManager0, (Class<?>) DefaultObservationManager.class, "componentManager", (Object) componentManager0);
      MergeResult mergeResult0 = new MergeResult();
      LogQueue logQueue0 = mergeResult0.getLog();
      Injector.inject(defaultObservationManager0, (Class<?>) DefaultObservationManager.class, "logger", (Object) logQueue0);
      Injector.validateBean(defaultObservationManager0, (Class<?>) DefaultObservationManager.class);
      BasicMarker basicMarker0 = (BasicMarker)LogEvent.MARKER_END;
      LogLevel logLevel0 = LogLevel.TRACE;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "Rgv*Ihps)Fr*";
      objectArray0[2] = (Object) basicMarker0;
      objectArray0[3] = objectArray0[2];
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) objectFactory0;
      objectArray0[6] = (Object) componentManager0;
      objectArray0[7] = objectArray0[6];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      LogEvent logEvent0 = new LogEvent(basicMarker0, logLevel0, ";I\"L(e-", objectArray0, sQLNonTransientException0, 0L);
      LogEvent logEvent1 = new LogEvent(logEvent0);
      // Undeclared exception!
      defaultObservationManager0.addEvent("Rgv*Ihps)Fr*", logEvent1);
  }
}

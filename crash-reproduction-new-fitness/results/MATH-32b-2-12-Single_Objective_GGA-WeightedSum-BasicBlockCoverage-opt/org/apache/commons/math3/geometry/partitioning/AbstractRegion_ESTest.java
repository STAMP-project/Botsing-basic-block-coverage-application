/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 26 09:43:34 UTC 2021
 */

package org.apache.commons.math3.geometry.partitioning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.Plane;
import org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;
import org.apache.commons.math3.geometry.euclidean.threed.RotationOrder;
import org.apache.commons.math3.geometry.euclidean.threed.SubPlane;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractRegion_ESTest extends AbstractRegion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BSPTree.LeafMerger<Euclidean1D> bSPTree_LeafMerger0 = (BSPTree.LeafMerger<Euclidean1D>) mock(BSPTree.LeafMerger.class, new ViolatedAssumptionAnswer());
      BSPTree.LeafMerger<Euclidean1D> bSPTree_LeafMerger1 = (BSPTree.LeafMerger<Euclidean1D>) mock(BSPTree.LeafMerger.class, new ViolatedAssumptionAnswer());
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>();
      bSPTree0.copySelf();
      BSPTree<Euclidean1D> bSPTree1 = bSPTree0.copySelf();
      bSPTree1.getPlus();
      IntervalsSet intervalsSet0 = new IntervalsSet();
      LinkedList<SubHyperplane<Euclidean3D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean3D>>();
      PolyhedronsSet polyhedronsSet0 = new PolyhedronsSet(linkedList0);
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      Vector3D vector3D0 = rotationOrder0.getA3();
      Plane plane0 = new Plane(vector3D0, vector3D0);
      Plane plane1 = new Plane(vector3D0);
      SubPlane subPlane0 = plane1.wholeHyperplane();
      polyhedronsSet0.intersection(subPlane0);
      intervalsSet0.copySelf();
      polyhedronsSet0.buildNew((BSPTree<Euclidean3D>) null);
      intervalsSet0.getBoundarySize();
      PolygonsSet polygonsSet0 = new PolygonsSet(0.0, 524.23925207436, 0.0, 1434.96787);
      Euclidean3D euclidean3D0 = Euclidean3D.getInstance();
      BSPTree<Euclidean2D> bSPTree2 = new BSPTree<Euclidean2D>(euclidean3D0);
      euclidean3D0.getSubSpace();
      PolygonsSet polygonsSet1 = polygonsSet0.buildNew(bSPTree2);
      // Undeclared exception!
      polygonsSet1.getSize();
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat May 16 11:40:52 UTC 2020
 */

package org.apache.commons.math.estimation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.estimation.EstimatedParameter;
import org.apache.commons.math.estimation.LevenbergMarquardtEstimator;
import org.apache.commons.math.estimation.SimpleEstimationProblem;
import org.apache.commons.math.estimation.WeightedMeasurement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractEstimator_ESTest extends AbstractEstimator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
      int int0 = 1104;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1288.6845719193373);
      doubleArray0[5] = (-391.557);
      double[] doubleArray1 = new double[7];
      doubleArray0[2] = 16.73405733181494;
      doubleArray1[5] = 16.73405733181494;
      levenbergMarquardtEstimator0.residuals = doubleArray1;
      levenbergMarquardtEstimator0.getJacobianEvaluations();
      levenbergMarquardtEstimator0.setParRelativeTolerance(1194.107836);
      levenbergMarquardtEstimator0.setOrthoTolerance((-461.0982769220283));
      levenbergMarquardtEstimator0.setOrthoTolerance(1104);
      SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
      EstimatedParameter estimatedParameter0 = new EstimatedParameter("1%d ,f&wYr+vx.I", 2327.94124);
      estimatedParameter0.setBound(true);
      levenbergMarquardtEstimator0.updateResidualsAndCost();
      WeightedMeasurement weightedMeasurement0 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(weightedMeasurement0).getResidual();
      doReturn(0.0, 0.0).when(weightedMeasurement0).getWeight();
      simpleEstimationProblem0.addParameter(estimatedParameter0);
      simpleEstimationProblem0.addMeasurement(weightedMeasurement0);
      levenbergMarquardtEstimator0.getRMS(simpleEstimationProblem0);
      levenbergMarquardtEstimator0.initializeEstimate(simpleEstimationProblem0);
      levenbergMarquardtEstimator0.setMaxCostEval(1104);
      // Undeclared exception!
      levenbergMarquardtEstimator0.getCovariances(simpleEstimationProblem0);
  }
}

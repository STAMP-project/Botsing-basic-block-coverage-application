/*
 * This file was automatically generated by EvoSuite
 * Mon May 18 02:42:32 UTC 2020
 */

package org.apache.commons.math.ode.events;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import org.apache.commons.math.ode.events.EventHandler;
import org.apache.commons.math.ode.events.EventState;
import org.apache.commons.math.ode.nonstiff.StepProblem;
import org.apache.commons.math.ode.sampling.DummyStepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class EventState_ESTest extends EventState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1450.489926545079), (-1450.489926545079), 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      double[] doubleArray0 = new double[13];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, true);
      dummyStepInterpolator0.storeTime(836.46624);
      dummyStepInterpolator0.finalizeStep();
      dummyStepInterpolator0.setInterpolatedTime(868.718748774);
      EventState eventState0 = new EventState(eventHandler0, (-1.0), (-1327.3618372705864), (-2147086448));
      eventState0.getMaxIterationCount();
      StepProblem stepProblem0 = new StepProblem((-2.146754905E9), 3481.0864933917637, 1.0986122886681096);
      EventState eventState1 = new EventState(stepProblem0, (-2599.3496494603), 1.0, 2);
      eventState0.evaluateStep(dummyStepInterpolator0);
      eventState1.getMaxCheckInterval();
      DummyStepInterpolator dummyStepInterpolator1 = new DummyStepInterpolator(dummyStepInterpolator0);
      eventState0.evaluateStep(dummyStepInterpolator1);
      eventState1.getEventHandler();
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 29 11:28:50 UTC 2021
 */

package org.xwiki.rendering.internal.macro.toc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Hashtable;
import javax.inject.Provider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.xwiki.component.descriptor.DefaultComponentDescriptor;
import org.xwiki.component.embed.EmbeddableComponentManager;
import org.xwiki.properties.BeanManager;
import org.xwiki.rendering.block.ExpandedMacroBlock;
import org.xwiki.rendering.block.FormatBlock;
import org.xwiki.rendering.block.HeaderBlock;
import org.xwiki.rendering.internal.macro.toc.TocMacro;
import org.xwiki.rendering.internal.renderer.DefaultLinkLabelGenerator;
import org.xwiki.rendering.macro.AbstractMacro;
import org.xwiki.rendering.macro.toc.TocMacroParameters;
import org.xwiki.rendering.renderer.BlockRenderer;
import org.xwiki.rendering.transformation.MacroTransformationContext;
import org.xwiki.rendering.xdomxmlcurrent.internal.parser.XDOMXMLParser;
import org.xwiki.rendering.xml.internal.parser.AbstractStreamParser;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class TocMacro_ESTest extends TocMacro_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DefaultComponentDescriptor<TocMacroParameters> defaultComponentDescriptor0 = new DefaultComponentDescriptor<TocMacroParameters>();
      MacroTransformationContext macroTransformationContext0 = new MacroTransformationContext();
      DefaultLinkLabelGenerator defaultLinkLabelGenerator0 = new DefaultLinkLabelGenerator();
      XDOMXMLParser xDOMXMLParser0 = new XDOMXMLParser();
      EmbeddableComponentManager embeddableComponentManager0 = new EmbeddableComponentManager();
      Injector.inject(xDOMXMLParser0, (Class<?>) AbstractStreamParser.class, "componentManager", (Object) embeddableComponentManager0);
      Injector.validateBean(xDOMXMLParser0, (Class<?>) XDOMXMLParser.class);
      EmbeddableComponentManager embeddableComponentManager1 = new EmbeddableComponentManager();
      DefaultComponentDescriptor<TocMacroParameters> defaultComponentDescriptor1 = new DefaultComponentDescriptor<TocMacroParameters>();
      MacroTransformationContext macroTransformationContext1 = new MacroTransformationContext();
      TocMacroParameters tocMacroParameters0 = new TocMacroParameters();
      TocMacro tocMacro0 = new TocMacro();
      Injector.inject(tocMacro0, (Class<?>) TocMacro.class, "linkLabelGenerator", (Object) defaultLinkLabelGenerator0);
      Injector.inject(tocMacro0, (Class<?>) TocMacro.class, "plainTextParser", (Object) xDOMXMLParser0);
      Provider<FormatBlock> provider0 = (Provider<FormatBlock>) mock(Provider.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(provider0).get();
      TocMacroParameters.Scope tocMacroParameters_Scope0 = TocMacroParameters.Scope.LOCAL;
      tocMacroParameters0.setScope(tocMacroParameters_Scope0);
      Injector.inject(tocMacro0, (Class<?>) TocMacro.class, "wikiModelProvider", (Object) provider0);
      BeanManager beanManager0 = mock(BeanManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(tocMacro0, (Class<?>) AbstractMacro.class, "beanManager", (Object) beanManager0);
      Injector.inject(tocMacro0, (Class<?>) AbstractMacro.class, "componentDescriptor", (Object) defaultComponentDescriptor0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      ExpandedMacroBlock expandedMacroBlock0 = new ExpandedMacroBlock(" with address: \"", hashtable0, (BlockRenderer) null, false);
      macroTransformationContext1.setCurrentMacroBlock(expandedMacroBlock0);
      DefaultLinkLabelGenerator defaultLinkLabelGenerator1 = new DefaultLinkLabelGenerator();
      XDOMXMLParser xDOMXMLParser1 = new XDOMXMLParser();
      Injector.inject(xDOMXMLParser1, (Class<?>) AbstractStreamParser.class, "componentManager", (Object) embeddableComponentManager0);
      Injector.validateBean(xDOMXMLParser1, (Class<?>) XDOMXMLParser.class);
      DefaultComponentDescriptor<HeaderBlock> defaultComponentDescriptor2 = new DefaultComponentDescriptor<HeaderBlock>();
      // Undeclared exception!
      tocMacro0.execute(tocMacroParameters0, (String) null, macroTransformationContext1);
  }
}

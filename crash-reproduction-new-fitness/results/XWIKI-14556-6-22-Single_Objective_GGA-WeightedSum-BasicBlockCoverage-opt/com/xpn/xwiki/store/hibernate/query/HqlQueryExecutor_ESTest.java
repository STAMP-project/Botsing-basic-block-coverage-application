/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 27 15:34:59 UTC 2021
 */

package com.xpn.xwiki.store.hibernate.query;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.xpn.xwiki.store.hibernate.query.HqlQueryExecutor;
import java.time.format.FormatStyle;
import javax.inject.Provider;
import javax.swing.JCheckBoxMenuItem;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.hibernate.LockOptions;
import org.hibernate.Query;
import org.hibernate.engine.SessionImplementor;
import org.hibernate.engine.query.OrdinalParameterDescriptor;
import org.hibernate.engine.query.ParameterMetadata;
import org.hibernate.impl.CollectionFilterImpl;
import org.hibernate.impl.SQLQueryImpl;
import org.infinispan.atomic.impl.AtomicHashMap;
import org.junit.runner.RunWith;
import org.slf4j.event.SubstituteLoggingEvent;
import org.xwiki.component.internal.ContextComponentManager;
import org.xwiki.context.Execution;
import org.xwiki.job.event.status.JobProgressManager;
import org.xwiki.query.internal.DefaultQuery;
import org.xwiki.query.internal.DefaultQueryExecutorManager;
import org.xwiki.query.internal.DefaultQueryParameter;
import org.xwiki.query.internal.ScriptQuery;
import org.xwiki.security.authorization.ContextualAuthorizationManager;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class HqlQueryExecutor_ESTest extends HqlQueryExecutor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ContextualAuthorizationManager contextualAuthorizationManager0 = mock(ContextualAuthorizationManager.class, new ViolatedAssumptionAnswer());
      Execution execution0 = mock(Execution.class, new ViolatedAssumptionAnswer());
      DefaultQueryExecutorManager defaultQueryExecutorManager0 = new DefaultQueryExecutorManager();
      Provider<ScriptQuery> provider0 = (Provider<ScriptQuery>) mock(Provider.class, new ViolatedAssumptionAnswer());
      DefaultQueryExecutorManager defaultQueryExecutorManager1 = new DefaultQueryExecutorManager();
      Provider<SQLQueryImpl> provider1 = (Provider<SQLQueryImpl>) mock(Provider.class, new ViolatedAssumptionAnswer());
      Injector.inject(defaultQueryExecutorManager1, (Class<?>) DefaultQueryExecutorManager.class, "componentManagerProvider", (Object) provider1);
      Injector.inject(defaultQueryExecutorManager1, (Class<?>) DefaultQueryExecutorManager.class, "namedQueryExecutorProvider", (Object) provider0);
      Injector.validateBean(defaultQueryExecutorManager1, (Class<?>) DefaultQueryExecutorManager.class);
      DefaultQuery defaultQuery0 = new DefaultQuery(",", defaultQueryExecutorManager0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      String string0 = "";
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem();
      DefaultQueryParameter defaultQueryParameter0 = new DefaultQueryParameter(defaultQuery0);
      defaultQuery0.bindValue(",:", (Object) execution0);
      HqlQueryExecutor hqlQueryExecutor0 = new HqlQueryExecutor();
      Injector.inject(hqlQueryExecutor0, (Class<?>) HqlQueryExecutor.class, "authorization", (Object) contextualAuthorizationManager0);
      Provider<Object> provider2 = (Provider<Object>) mock(Provider.class, new ViolatedAssumptionAnswer());
      Injector.inject(hqlQueryExecutor0, (Class<?>) HqlQueryExecutor.class, "componentManagerProvider", (Object) provider2);
      Execution execution1 = mock(Execution.class, new ViolatedAssumptionAnswer());
      Injector.inject(hqlQueryExecutor0, (Class<?>) HqlQueryExecutor.class, "execution", (Object) execution1);
      JobProgressManager jobProgressManager0 = mock(JobProgressManager.class, new ViolatedAssumptionAnswer());
      SessionImplementor sessionImplementor0 = mock(SessionImplementor.class, new ViolatedAssumptionAnswer());
      OrdinalParameterDescriptor[] ordinalParameterDescriptorArray0 = new OrdinalParameterDescriptor[0];
      AtomicHashMap<FormatStyle, ContextComponentManager> atomicHashMap0 = new AtomicHashMap<FormatStyle, ContextComponentManager>();
      ParameterMetadata parameterMetadata0 = new ParameterMetadata(ordinalParameterDescriptorArray0, atomicHashMap0);
      CollectionFilterImpl collectionFilterImpl0 = new CollectionFilterImpl(",", defaultQueryExecutorManager0, sessionImplementor0, parameterMetadata0);
      LockOptions lockOptions0 = new LockOptions();
      Query query0 = collectionFilterImpl0.setLockOptions(lockOptions0);
      // Undeclared exception!
      hqlQueryExecutor0.populateParameters(query0, defaultQuery0);
  }
}

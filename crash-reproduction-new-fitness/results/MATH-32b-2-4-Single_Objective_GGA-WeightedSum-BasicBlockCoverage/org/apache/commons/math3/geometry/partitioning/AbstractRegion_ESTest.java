/*
 * This file was automatically generated by EvoSuite
 * Thu May 14 12:14:29 UTC 2020
 */

package org.apache.commons.math3.geometry.partitioning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.Line;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.euclidean.twod.SubLine;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.BoundaryAttribute;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.apache.commons.math3.geometry.partitioning.Transform;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractRegion_ESTest extends AbstractRegion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ONE;
      Vector1D.distanceInf(vector1D0, vector1D0);
      Vector1D vector1D1 = vector1D0.add((Vector<Euclidean1D>) vector1D0);
      Transform<Euclidean1D, Euclidean1D> transform0 = (Transform<Euclidean1D, Euclidean1D>) mock(Transform.class, new ViolatedAssumptionAnswer());
      LinkedList<SubHyperplane<Euclidean3D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean3D>>();
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, (-4747.80010334));
      PolygonsSet polygonsSet0 = line0.wholeSpace();
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>(vector1D1);
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      BoundaryAttribute<Euclidean2D> boundaryAttribute0 = new BoundaryAttribute<Euclidean2D>(subLine0, subLine0);
      line0.wholeHyperplane();
      SubHyperplane<Euclidean2D> subHyperplane0 = boundaryAttribute0.getPlusOutside();
      BSPTree<Euclidean2D> bSPTree1 = bSPTree0.split(subHyperplane0);
      BSPTree<Euclidean2D> bSPTree2 = bSPTree1.copySelf();
      PolygonsSet polygonsSet1 = polygonsSet0.buildNew(bSPTree2);
      polygonsSet1.buildNew(bSPTree1);
      LinkedList<SubHyperplane<Euclidean1D>> linkedList1 = new LinkedList<SubHyperplane<Euclidean1D>>();
      IntervalsSet intervalsSet0 = new IntervalsSet(linkedList1);
      intervalsSet0.applyTransform(transform0);
      BSPTree<Euclidean2D> bSPTree3 = bSPTree2.getMinus();
      PolygonsSet polygonsSet2 = polygonsSet0.buildNew(bSPTree3);
      polygonsSet2.getTree(true);
      // Undeclared exception!
      polygonsSet2.getSize();
  }
}

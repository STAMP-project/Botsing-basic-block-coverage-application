/*
 * This file was automatically generated by EvoSuite
 * Mon May 18 07:07:08 UTC 2020
 */

package org.xwiki.rendering.listener.chaining;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.xwiki.rendering.listener.Format;
import org.xwiki.rendering.listener.ListType;
import org.xwiki.rendering.listener.MetaData;
import org.xwiki.rendering.listener.chaining.BlockStateChainingListener;
import org.xwiki.rendering.listener.chaining.ChainingListener;
import org.xwiki.rendering.listener.chaining.ConsecutiveNewLineStateChainingListener;
import org.xwiki.rendering.listener.chaining.EmptyBlockChainingListener;
import org.xwiki.rendering.listener.chaining.ListenerChain;
import org.xwiki.rendering.listener.chaining.StackableChainingListener;
import org.xwiki.rendering.listener.reference.ResourceReference;
import org.xwiki.rendering.listener.reference.ResourceType;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractChainingListener_ESTest extends AbstractChainingListener_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<ChainingListener> class0 = ChainingListener.class;
      ListenerChain listenerChain0 = new ListenerChain();
      BlockStateChainingListener blockStateChainingListener0 = new BlockStateChainingListener(listenerChain0);
      StackableChainingListener stackableChainingListener0 = blockStateChainingListener0.createChainingListenerInstance();
      EmptyBlockChainingListener emptyBlockChainingListener0 = new EmptyBlockChainingListener(listenerChain0);
      ((BlockStateChainingListener) stackableChainingListener0).onNewLine();
      ConsecutiveNewLineStateChainingListener consecutiveNewLineStateChainingListener0 = new ConsecutiveNewLineStateChainingListener(listenerChain0);
      listenerChain0.addListener(consecutiveNewLineStateChainingListener0);
      listenerChain0.addListener(blockStateChainingListener0);
      ConsecutiveNewLineStateChainingListener consecutiveNewLineStateChainingListener1 = new ConsecutiveNewLineStateChainingListener(listenerChain0);
      ListType listType0 = ListType.BULLETED;
      ResourceType resourceType0 = ResourceType.DOCUMENT;
      ResourceReference resourceReference0 = new ResourceReference("", resourceType0);
      Map<String, String> map0 = resourceReference0.getParameters();
      blockStateChainingListener0.beginList(listType0, map0);
      MetaData metaData0 = MetaData.EMPTY;
      listenerChain0.addListener(emptyBlockChainingListener0);
      consecutiveNewLineStateChainingListener1.onSpecialSymbol('V');
      listenerChain0.addListener(consecutiveNewLineStateChainingListener1);
      Format format0 = Format.MONOSPACE;
      Class<ChainingListener> class1 = ChainingListener.class;
      listenerChain0.removeListener(class1);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      listenerChain0.indexOf(class0);
      // Undeclared exception!
      consecutiveNewLineStateChainingListener1.endFormat(format0, map0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 29 09:23:33 UTC 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.LocalDateTime;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.Seconds;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.IslamicChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(167);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      Chronology chronology0 = islamicChronology0.withZone(dateTimeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime(chronology0);
      LocalDateTime localDateTime1 = localDateTime0.plusMonths(167);
      localDateTime1.isSupported((DateTimeFieldType) null);
      LocalDateTime localDateTime2 = LocalDateTime.now();
      localDateTime2.isSupported((DateTimeFieldType) null);
      Days days0 = Days.MAX_VALUE;
      BaseSingleFieldPeriod.between(localDateTime1, localDateTime2, days0);
      Seconds seconds0 = Seconds.ZERO;
      Minutes minutes0 = seconds0.toStandardMinutes();
      minutes0.plus((-5974));
      Months months0 = Months.EIGHT;
      LocalDateTime.now();
      LocalDateTime localDateTime3 = new LocalDateTime((long) 200099, chronology0);
      localDateTime3.isSupported((DateTimeFieldType) null);
      Days days1 = Days.ONE;
      // Undeclared exception!
      BaseSingleFieldPeriod.between(localDateTime2, localDateTime1, days1);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Mon May 18 01:30:15 UTC 2020
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.Plane;
import org.apache.commons.math3.geometry.euclidean.threed.Segment;
import org.apache.commons.math3.geometry.euclidean.threed.SubLine;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class SubLine_ESTest extends SubLine_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Plane plane0 = new Plane(vector3D0);
      Plane plane1 = new Plane(plane0);
      Line line0 = plane0.intersection(plane1);
      Vector1D vector1D0 = line0.toSubSpace(vector3D0);
      LinkedList<SubHyperplane<Euclidean1D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean1D>>();
      IntervalsSet intervalsSet0 = new IntervalsSet(linkedList0);
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      Line line1 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(vector3D0).when(line1).intersection(any(org.apache.commons.math3.geometry.euclidean.threed.Line.class));
      doReturn(vector1D0).when(line1).toSubSpace(nullable(org.apache.commons.math3.geometry.Vector.class));
      SubLine subLine1 = new SubLine(line1, intervalsSet0);
      Vector3D vector3D1 = Vector3D.NaN;
      SubLine subLine2 = new SubLine(vector3D1, vector3D1);
      boolean boolean0 = true;
      Vector3D vector3D2 = subLine1.intersection(subLine0, true);
      Segment segment0 = mock(Segment.class, new ViolatedAssumptionAnswer());
      doReturn(vector3D0).when(segment0).getEnd();
      doReturn(line0).when(segment0).getLine();
      doReturn(vector3D0).when(segment0).getStart();
      SubLine subLine3 = new SubLine(segment0);
      SubLine subLine4 = new SubLine(vector3D2, vector3D2);
      Line line2 = new Line(vector3D1, vector3D2);
      SubLine subLine5 = new SubLine(line2, intervalsSet0);
      SubLine subLine6 = new SubLine(vector3D1, vector3D1);
      // Undeclared exception!
      subLine0.intersection(subLine6, false);
  }
}

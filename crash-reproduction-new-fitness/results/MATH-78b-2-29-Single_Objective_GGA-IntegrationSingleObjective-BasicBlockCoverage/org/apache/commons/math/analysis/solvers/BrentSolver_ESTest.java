/*
 * This file was automatically generated by EvoSuite
 * Mon May 18 03:19:22 UTC 2020
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.SinFunction;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.solvers.BrentSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class BrentSolver_ESTest extends BrentSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver();
      brentSolver0.clearResult();
      UnivariateRealFunction univariateRealFunction0 = mock(UnivariateRealFunction.class, new ViolatedAssumptionAnswer());
      double double0 = brentSolver0.result;
      UnivariateRealFunction univariateRealFunction1 = mock(UnivariateRealFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(univariateRealFunction1).value(anyDouble());
      brentSolver0.isBracketing(0.0, 0.0, univariateRealFunction1);
      UnivariateRealFunction univariateRealFunction2 = mock(UnivariateRealFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(univariateRealFunction2).value(anyDouble());
      brentSolver0.solve(univariateRealFunction2, (-1027.4), 2203.20528);
      brentSolver0.getAbsoluteAccuracy();
      brentSolver0.getIterationCount();
      brentSolver0.setMaximalIterationCount(0);
      brentSolver0.setResult(1.0E-6, 0, 0);
      brentSolver0.getFunctionValueAccuracy();
      brentSolver0.isSequence((-585.3), 0.0, (-264.0));
      brentSolver0.getFunctionValueAccuracy();
      brentSolver0.checkResultComputed();
      brentSolver0.setFunctionValueAccuracy((-2499.03689474));
      brentSolver0.verifyInterval(1.0E-15, 0.5);
      SinFunction sinFunction0 = new SinFunction();
      UnivariateRealFunction univariateRealFunction3 = sinFunction0.derivative();
      BrentSolver brentSolver1 = new BrentSolver(sinFunction0);
      brentSolver1.getMaximalIterationCount();
      brentSolver0.resetFunctionValueAccuracy();
      brentSolver1.verifyInterval((-2499.03689474), (-264.0));
      // Undeclared exception!
      brentSolver1.solve(univariateRealFunction3, (-2149.161), 0.5644508957951823);
  }
}

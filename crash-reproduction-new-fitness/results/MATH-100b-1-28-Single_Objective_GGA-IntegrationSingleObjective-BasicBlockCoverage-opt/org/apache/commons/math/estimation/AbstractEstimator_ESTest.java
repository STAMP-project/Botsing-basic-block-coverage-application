/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 28 09:46:34 UTC 2021
 */

package org.apache.commons.math.estimation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.estimation.EstimatedParameter;
import org.apache.commons.math.estimation.GaussNewtonEstimator;
import org.apache.commons.math.estimation.LevenbergMarquardtEstimator;
import org.apache.commons.math.estimation.SimpleEstimationProblem;
import org.apache.commons.math.estimation.WeightedMeasurement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractEstimator_ESTest extends AbstractEstimator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      GaussNewtonEstimator gaussNewtonEstimator0 = new GaussNewtonEstimator(1266, (-1628.5991069), (-1628.5991069));
      SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
      LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
      levenbergMarquardtEstimator0.incrementJacobianEvaluationsCounter();
      levenbergMarquardtEstimator0.setOrthoTolerance(0.0);
      EstimatedParameter estimatedParameter0 = new EstimatedParameter((String) null, (-1628.5991069));
      estimatedParameter0.setBound(true);
      simpleEstimationProblem0.addParameter(estimatedParameter0);
      gaussNewtonEstimator0.getChiSquare(simpleEstimationProblem0);
      WeightedMeasurement weightedMeasurement0 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(weightedMeasurement0).getResidual();
      doReturn(0.0, 0.0).when(weightedMeasurement0).getWeight();
      simpleEstimationProblem0.addMeasurement(weightedMeasurement0);
      gaussNewtonEstimator0.initializeEstimate(simpleEstimationProblem0);
      levenbergMarquardtEstimator0.setInitialStepBoundFactor(0.0);
      gaussNewtonEstimator0.getRMS(simpleEstimationProblem0);
      GaussNewtonEstimator gaussNewtonEstimator1 = new GaussNewtonEstimator(6, 0.0, 6);
      gaussNewtonEstimator1.getCostEvaluations();
      levenbergMarquardtEstimator0.setMaxCostEval(0);
      // Undeclared exception!
      gaussNewtonEstimator0.getCovariances(simpleEstimationProblem0);
  }
}

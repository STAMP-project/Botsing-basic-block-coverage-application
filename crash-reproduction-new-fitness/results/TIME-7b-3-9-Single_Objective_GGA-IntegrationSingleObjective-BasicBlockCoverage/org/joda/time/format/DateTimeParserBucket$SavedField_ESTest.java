/*
 * This file was automatically generated by EvoSuite
 * Sun May 17 13:21:27 UTC 2020
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.field.DividedDateTimeField;
import org.joda.time.field.RemainderDateTimeField;
import org.joda.time.format.DateTimeParserBucket;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class DateTimeParserBucket$SavedField_ESTest extends DateTimeParserBucket$SavedField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(dateTimeField0).roundFloor(anyLong());
      doReturn(0L, 0L).when(dateTimeField0).set(anyLong() , anyInt());
      DateTimeParserBucket.SavedField dateTimeParserBucket_SavedField0 = new DateTimeParserBucket.SavedField(dateTimeField0, 6075);
      dateTimeParserBucket_SavedField0.set(6075, true);
      dateTimeParserBucket_SavedField0.set(6075, true);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField1 = buddhistChronology0.dayOfMonth();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField1, dateTimeFieldType0, 6075);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0);
      DividedDateTimeField dividedDateTimeField1 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      RemainderDateTimeField remainderDateTimeField1 = new RemainderDateTimeField(dividedDateTimeField1, dateTimeFieldType0);
      Locale locale0 = Locale.CANADA;
      Locale locale1 = Locale.CANADA;
      DateTimeParserBucket.SavedField dateTimeParserBucket_SavedField1 = new DateTimeParserBucket.SavedField(remainderDateTimeField0, (String) null, (Locale) null);
      // Undeclared exception!
      dateTimeParserBucket_SavedField1.set((-619L), true);
  }
}

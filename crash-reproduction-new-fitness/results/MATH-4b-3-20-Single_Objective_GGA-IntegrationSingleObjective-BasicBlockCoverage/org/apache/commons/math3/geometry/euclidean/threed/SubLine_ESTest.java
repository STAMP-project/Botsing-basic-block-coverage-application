/*
 * This file was automatically generated by EvoSuite
 * Mon May 18 01:30:34 UTC 2020
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.SubLine;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class SubLine_ESTest extends SubLine_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      IntervalsSet intervalsSet0 = new IntervalsSet();
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      Vector3D.distance1(vector3D0, vector3D0);
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>();
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      BSPTree<Euclidean1D> bSPTree1 = bSPTree0.getCell(vector1D0);
      BSPTree.LeafMerger<Euclidean1D> bSPTree_LeafMerger0 = (BSPTree.LeafMerger<Euclidean1D>) mock(BSPTree.LeafMerger.class, new ViolatedAssumptionAnswer());
      doReturn((BSPTree) null).when(bSPTree_LeafMerger0).merge(nullable(org.apache.commons.math3.geometry.partitioning.BSPTree.class) , nullable(org.apache.commons.math3.geometry.partitioning.BSPTree.class) , nullable(org.apache.commons.math3.geometry.partitioning.BSPTree.class) , anyBoolean() , anyBoolean());
      bSPTree0.merge(bSPTree1, bSPTree_LeafMerger0);
      IntervalsSet intervalsSet1 = new IntervalsSet((BSPTree<Euclidean1D>) null);
      SubLine subLine1 = new SubLine(line0, intervalsSet1);
      SubLine subLine2 = new SubLine(line0, intervalsSet1);
      SubLine subLine3 = new SubLine(vector3D0, vector3D0);
      // Undeclared exception!
      subLine0.intersection(subLine2, true);
  }
}

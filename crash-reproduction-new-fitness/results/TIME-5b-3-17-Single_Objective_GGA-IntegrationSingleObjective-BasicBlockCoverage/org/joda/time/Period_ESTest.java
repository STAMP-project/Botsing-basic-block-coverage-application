/*
 * This file was automatically generated by EvoSuite
 * Mon May 18 17:42:22 UTC 2020
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class Period_ESTest extends Period_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ReadableDuration readableDuration0 = mock(ReadableDuration.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(readableDuration0).getMillis();
      ReadableInstant readableInstant0 = mock(ReadableInstant.class, new ViolatedAssumptionAnswer());
      doReturn((Chronology) null).when(readableInstant0).getChronology();
      doReturn(0L).when(readableInstant0).getMillis();
      Period period0 = new Period(readableDuration0, readableInstant0);
      ReadableInstant readableInstant1 = mock(ReadableInstant.class, new ViolatedAssumptionAnswer());
      doReturn((Chronology) null).when(readableInstant1).getChronology();
      doReturn(0L, 0L).when(readableInstant1).getMillis();
      PeriodType periodType0 = mock(PeriodType.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodType0).size();
      Period period1 = new Period(readableInstant1, readableInstant1, periodType0);
      Period.millis(227);
      Period period2 = Period.days(1825);
      PeriodType periodType1 = mock(PeriodType.class, new ViolatedAssumptionAnswer());
      period2.minusWeeks((-18));
      Period period3 = period2.toPeriod();
      Period period4 = period3.plusYears((-7026));
      PeriodType periodType2 = PeriodType.dayTime();
      // Undeclared exception!
      period4.normalizedStandard(periodType2);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 29 06:58:18 UTC 2021
 */

package org.apache.commons.math.optimization.direct;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import org.apache.commons.math.optimization.OptimizationException;
import org.apache.commons.math.optimization.RealPointValuePair;
import org.apache.commons.math.optimization.SimpleScalarValueChecker;
import org.apache.commons.math.optimization.direct.NelderMead;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class DirectSearchOptimizer_ESTest extends DirectSearchOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Comparator<RealPointValuePair> comparator0 = (Comparator<RealPointValuePair>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[10];
      RealPointValuePair realPointValuePair0 = mock(RealPointValuePair.class, new ViolatedAssumptionAnswer());
      NelderMead nelderMead0 = new NelderMead();
      double[][] doubleArray1 = new double[6][9];
      double[] doubleArray2 = new double[4];
      nelderMead0.setMaxEvaluations((-1361));
      SimpleScalarValueChecker simpleScalarValueChecker0 = new SimpleScalarValueChecker(0.6280521049829078, 0.6280521049829078);
      nelderMead0.setConvergenceChecker(simpleScalarValueChecker0);
      doubleArray2[0] = 0.6280521049829078;
      doubleArray2[1] = (-1.5065072847970593);
      doubleArray2[2] = 0.6280521049829078;
      doubleArray2[3] = 0.6280521049829078;
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      nelderMead0.incrementIterationsCounter();
      SimpleScalarValueChecker simpleScalarValueChecker1 = new SimpleScalarValueChecker((-1.5065072847970593), 898.05098);
      nelderMead0.setConvergenceChecker(simpleScalarValueChecker0);
      NelderMead nelderMead1 = new NelderMead(10.0178749274099, 2.147483647E9, (-1344.79078374), 10.0178749274099);
      nelderMead1.setMaxIterations((-824));
      try { 
        nelderMead1.incrementIterationsCounter();
        fail("Expecting exception: OptimizationException");
      
      } catch(OptimizationException e) {
         //
         // org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (-824) exceeded
         //
         verifyException("org.apache.commons.math.optimization.direct.DirectSearchOptimizer", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat May 16 12:18:15 UTC 2020
 */

package org.apache.commons.math3.geometry.partitioning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.Plane;
import org.apache.commons.math3.geometry.euclidean.threed.SubPlane;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.partitioning.AbstractRegion;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.BoundaryAttribute;
import org.apache.commons.math3.geometry.partitioning.Hyperplane;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractRegion_ESTest extends AbstractRegion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet();
      BSPTree<Euclidean2D> bSPTree0 = (BSPTree<Euclidean2D>) mock(BSPTree.class, new ViolatedAssumptionAnswer());
      AbstractRegion abstractRegion0 = polygonsSet0.buildNew(bSPTree0);
      polygonsSet0.getSize();
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Plane plane0 = new Plane(vector3D0);
      Plane plane1 = new Plane(plane0);
      SubPlane subPlane0 = plane1.wholeHyperplane();
      BoundaryAttribute<Euclidean3D> boundaryAttribute0 = new BoundaryAttribute<Euclidean3D>(subPlane0, subPlane0);
      SubHyperplane<Euclidean3D> subHyperplane0 = boundaryAttribute0.getPlusInside();
      LinkedList<SubHyperplane<Euclidean1D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean1D>>();
      IntervalsSet intervalsSet0 = new IntervalsSet(linkedList0);
      SubOrientedPoint subOrientedPoint0 = new SubOrientedPoint((Hyperplane<Euclidean1D>) null, intervalsSet0);
      BSPTree<Euclidean3D> bSPTree1 = new BSPTree<Euclidean3D>(subOrientedPoint0);
      BSPTree<Euclidean3D> bSPTree2 = new BSPTree<Euclidean3D>(subHyperplane0, bSPTree1, bSPTree1, (Object) null);
      BSPTree<Euclidean3D> bSPTree3 = bSPTree2.getMinus();
      bSPTree3.setAttribute(plane1);
      Vector3D.distance(vector3D0, vector3D0);
      AbstractRegion abstractRegion1 = abstractRegion0.buildNew(bSPTree3);
      // Undeclared exception!
      abstractRegion1.getSize();
  }
}

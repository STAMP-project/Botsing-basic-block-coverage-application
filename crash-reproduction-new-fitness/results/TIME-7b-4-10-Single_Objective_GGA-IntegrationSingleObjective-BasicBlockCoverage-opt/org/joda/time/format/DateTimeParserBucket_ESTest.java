/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 30 11:05:01 UTC 2021
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.LocalDateTime;
import org.joda.time.MockZone;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.format.DateTimeParserBucket;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class DateTimeParserBucket_ESTest extends DateTimeParserBucket_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn((DateTimeZone) null).when(chronology0).getZone();
      doReturn((Chronology) null).when(chronology0).withUTC();
      DateTimeParserBucket.compareReverse((DurationField) null, (DurationField) null);
      DateTimeParserBucket.compareReverse((DurationField) null, (DurationField) null);
      Integer integer0 = Integer.valueOf(90);
      Integer.min(0, 0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-120L), chronology0, (Locale) null, integer0, 0);
      dateTimeParserBucket0.saveState();
      dateTimeParserBucket0.saveState();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      boolean boolean0 = false;
      dateTimeParserBucket0.computeMillis(false, "10 20");
      MockZone mockZone0 = new MockZone((-120L), (-516), 90);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) mockZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
      dateTimeParserBucket0.saveField(dateTimeField0, 0);
      LocalDateTime localDateTime0 = new LocalDateTime((-120L), dateTimeZone0);
      dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      Chronology chronology1 = copticChronology0.withUTC();
      DateTimeParserBucket dateTimeParserBucket1 = new DateTimeParserBucket((-516), chronology1, (Locale) null);
      dateTimeParserBucket1.computeMillis(false);
      Object object0 = dateTimeParserBucket0.saveState();
      dateTimeParserBucket0.restoreState(object0);
      // Undeclared exception!
      dateTimeParserBucket0.computeMillis();
  }
}

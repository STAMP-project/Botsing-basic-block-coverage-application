/*
 * This file was automatically generated by EvoSuite
 * Sun May 17 13:22:33 UTC 2020
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.format.DateTimeParserBucket;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class DateTimeParserBucket_ESTest extends DateTimeParserBucket_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(durationField0).isSupported();
      DateTimeParserBucket.compareReverse(durationField0, durationField0);
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn((DateTimeZone) null).when(chronology0).getZone();
      doReturn((Chronology) null).when(chronology0).withUTC();
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(durationField1).isSupported();
      DateTimeParserBucket.compareReverse(durationField1, durationField1);
      Integer integer0 = new Integer(1128);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, chronology0, (Locale) null, integer0, 1929);
      Object object0 = new Object();
      dateTimeParserBucket0.restoreState(object0);
      dateTimeParserBucket0.computeMillis();
      DateTimeParserBucket.compareReverse((DurationField) null, (DurationField) null);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1128);
      dateTimeParserBucket0.setZone(dateTimeZone0);
      Integer.getInteger("", (-2397));
      JulianChronology.getInstance();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
      dateTimeParserBucket0.saveField(dateTimeField0, 1128);
      // Undeclared exception!
      dateTimeParserBucket0.computeMillis(false, "");
  }
}

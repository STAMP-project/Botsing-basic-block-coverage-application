/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 28 11:08:35 UTC 2021
 */

package org.apache.commons.math3.geometry.partitioning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.function.Predicate;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.Hyperplane;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractRegion_ESTest extends AbstractRegion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Hyperplane<Euclidean1D> hyperplane0 = (Hyperplane<Euclidean1D>) mock(Hyperplane.class, new ViolatedAssumptionAnswer());
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      Euclidean3D euclidean3D0 = Euclidean3D.getInstance();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) euclidean3D0);
      Object object0 = new Object();
      predicate0.test(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Boolean boolean0 = new Boolean(false);
      PolygonsSet polygonsSet0 = new PolygonsSet(linkedList0);
      polygonsSet0.getSize();
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      Predicate<Object> predicate5 = predicate4.or(predicate0);
      linkedList0.removeIf(predicate5);
      PolygonsSet polygonsSet1 = new PolygonsSet(linkedList0);
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>(linkedList0);
      PolygonsSet polygonsSet2 = polygonsSet0.buildNew(bSPTree0);
      // Undeclared exception!
      polygonsSet2.getSize();
  }
}

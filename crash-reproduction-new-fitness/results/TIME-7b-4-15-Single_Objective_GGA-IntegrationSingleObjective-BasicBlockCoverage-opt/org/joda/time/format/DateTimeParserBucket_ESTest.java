/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 30 11:06:00 UTC 2021
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.format.DateTimeParserBucket;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class DateTimeParserBucket_ESTest extends DateTimeParserBucket_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(durationField1).isSupported();
      DateTimeParserBucket.compareReverse(durationField1, durationField1);
      Locale locale0 = Locale.CANADA_FRENCH;
      DateTimeFieldType.yearOfEra();
      boolean boolean0 = true;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
      dateTimeZone0.getOffsetFromLocal(257L);
      BuddhistChronology buddhistChronology1 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
      String string0 = "";
      DateTimeParserBucket.SavedField dateTimeParserBucket_SavedField0 = new DateTimeParserBucket.SavedField(dateTimeField0, "", locale0);
      buddhistChronology0.getZone();
      DateTimeParserBucket.SavedField dateTimeParserBucket_SavedField1 = new DateTimeParserBucket.SavedField(dateTimeField0, "i|", locale0);
      Locale locale1 = Locale.JAPAN;
      Integer integer0 = new Integer(85);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(2, buddhistChronology0, locale1, integer0);
      locale1.getDisplayCountry();
      dateTimeParserBucket0.computeMillis(false);
      DateTimeParserBucket dateTimeParserBucket1 = new DateTimeParserBucket(2L, buddhistChronology0, (Locale) null);
      BuddhistChronology.getInstanceUTC();
      buddhistChronology1.weekyear();
      dateTimeParserBucket1.saveField(dateTimeField0, 1066);
      // Undeclared exception!
      dateTimeParserBucket1.computeMillis(true, "Giappone");
  }
}

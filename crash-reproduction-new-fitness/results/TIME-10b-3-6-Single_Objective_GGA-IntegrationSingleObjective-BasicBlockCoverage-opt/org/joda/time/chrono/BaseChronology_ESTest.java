/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 29 09:22:13 UTC 2021
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.LocalDate;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.PreciseDurationField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class BaseChronology_ESTest extends BaseChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      int int0 = (-2);
      Calendar.getAvailableCalendarTypes();
      DateTimeZone.forOffsetHours((-1));
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      buddhistChronology0.getZone();
      DateTime.now();
      gJChronology0.getZone();
      LocalDate localDate0 = new LocalDate((long) (-3081), dateTimeZone0);
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      DurationField durationField0 = durationFieldType0.getField(buddhistChronology0);
      localDate0.toString();
      localDate0.getDayOfYear();
      ZonedChronology.useTimeArithmetic(durationField0);
      GJChronology gJChronology1 = GJChronology.getInstance();
      gJChronology1.set(localDate0, (-22));
      gJChronology0.halfdays();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-1624L));
      gJChronology1.toString();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      ethiopicChronology0.getMaxYear();
      gJChronology1.julianToGregorianByYear((-2));
      long long0 = (-4294967296L);
      // Undeclared exception!
      ethiopicChronology0.set(localDate0, Integer.MAX_VALUE);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 28 11:12:39 UTC 2021
 */

package org.apache.commons.math3.geometry.euclidean.twod;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.apache.commons.math3.geometry.euclidean.threed.Plane;
import org.apache.commons.math3.geometry.euclidean.threed.SubPlane;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.euclidean.twod.SubLine;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.Hyperplane;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class PolygonsSet_ESTest extends PolygonsSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BSPTree<Euclidean2D> bSPTree0 = (BSPTree<Euclidean2D>) mock(BSPTree.class, new ViolatedAssumptionAnswer());
      Hyperplane<Euclidean2D> hyperplane0 = (Hyperplane<Euclidean2D>) mock(Hyperplane.class, new ViolatedAssumptionAnswer());
      PolygonsSet polygonsSet0 = new PolygonsSet();
      PolygonsSet polygonsSet1 = new PolygonsSet();
      PolygonsSet polygonsSet2 = new PolygonsSet();
      PolygonsSet polygonsSet3 = new PolygonsSet();
      polygonsSet0.computeGeometricalProperties();
      Boolean boolean0 = new Boolean(false);
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Plane plane0 = new Plane(vector3D0, vector3D0);
      SubPlane subPlane0 = new SubPlane(plane0, polygonsSet2);
      BSPTree<Euclidean2D> bSPTree1 = new BSPTree<Euclidean2D>(subPlane0);
      bSPTree1.getParent();
      Vector2D vector2D0 = Vector2D.ZERO;
      polygonsSet3.computeGeometricalProperties();
      BSPTree<Euclidean2D> bSPTree2 = bSPTree1.getCell(vector2D0);
      polygonsSet2.getVertices();
      Vector2D vector2D1 = Vector2D.NaN;
      bSPTree2.getCell(vector2D1);
      BSPTree.LeafMerger<Euclidean2D> bSPTree_LeafMerger0 = (BSPTree.LeafMerger<Euclidean2D>) mock(BSPTree.LeafMerger.class, new ViolatedAssumptionAnswer());
      SubLine subLine0 = new SubLine(vector2D1, vector2D1);
      SubHyperplane<Euclidean2D> subHyperplane0 = polygonsSet0.intersection(subLine0);
      polygonsSet1.intersection(subHyperplane0);
      PolygonsSet polygonsSet4 = polygonsSet1.buildNew(bSPTree1);
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      PolygonsSet polygonsSet5 = new PolygonsSet(linkedList0);
      polygonsSet5.getTree(false);
      polygonsSet4.getVertices();
      // Undeclared exception!
      polygonsSet4.computeGeometricalProperties();
  }
}

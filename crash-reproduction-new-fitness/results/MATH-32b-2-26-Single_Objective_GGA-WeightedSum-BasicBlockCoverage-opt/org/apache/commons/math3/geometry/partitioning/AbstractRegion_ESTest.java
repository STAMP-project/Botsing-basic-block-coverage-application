/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 26 09:57:57 UTC 2021
 */

package org.apache.commons.math3.geometry.partitioning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractRegion_ESTest extends AbstractRegion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet();
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>();
      BoundarySizeVisitor<Euclidean1D> boundarySizeVisitor0 = new BoundarySizeVisitor<Euclidean1D>();
      BSPTree<Euclidean1D> bSPTree1 = new BSPTree<Euclidean1D>();
      BoundarySizeVisitor<Euclidean1D> boundarySizeVisitor1 = new BoundarySizeVisitor<Euclidean1D>();
      Boolean boolean0 = new Boolean("");
      bSPTree1.setAttribute(boolean0);
      bSPTree1.visit(boundarySizeVisitor0);
      Vector1D vector1D0 = Vector1D.NaN;
      Vector1D vector1D1 = new Vector1D(Double.POSITIVE_INFINITY, vector1D0, (-1.0), vector1D0, Double.POSITIVE_INFINITY, vector1D0, (-3.5997360512765566E-9), vector1D0);
      Vector1D vector1D2 = new Vector1D((-1.0), vector1D1);
      Vector1D vector1D3 = Vector1D.POSITIVE_INFINITY;
      Vector1D vector1D4 = new Vector1D((-1.0), vector1D2, Double.POSITIVE_INFINITY, vector1D1, (-1432.4850844), vector1D3);
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D4, true);
      OrientedPoint orientedPoint1 = orientedPoint0.copySelf();
      IntervalsSet intervalsSet1 = orientedPoint1.wholeSpace();
      IntervalsSet intervalsSet2 = intervalsSet1.buildNew(bSPTree0);
      BSPTree<Euclidean2D> bSPTree2 = new BSPTree<Euclidean2D>(intervalsSet2);
      PolygonsSet polygonsSet0 = new PolygonsSet(bSPTree2);
      // Undeclared exception!
      polygonsSet0.getSize();
  }
}

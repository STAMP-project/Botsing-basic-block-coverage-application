/*
 * This file was automatically generated by EvoSuite
 * Mon May 18 09:43:05 UTC 2020
 */

package org.xwiki.rest.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.qos.logback.classic.Logger;
import com.xpn.xwiki.doc.merge.MergeResult;
import java.net.URI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.slf4j.helpers.NOPLogger;
import org.suigeneris.jrcs.rcs.Version;
import org.xwiki.component.manager.ComponentManager;
import org.xwiki.job.DefaultJobStatus;
import org.xwiki.job.DefaultRequest;
import org.xwiki.job.event.status.JobStatus;
import org.xwiki.job.internal.DefaultJobProgress;
import org.xwiki.logging.LogQueue;
import org.xwiki.logging.logback.internal.DefaultLoggerManager;
import org.xwiki.observation.ObservationManager;
import org.xwiki.observation.internal.DefaultObservationManager;
import org.xwiki.rest.internal.DomainObjectFactory;
import org.xwiki.rest.model.jaxb.ObjectFactory;
import ucar.nc2.util.net.URLStreamHandlerFactory;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class DomainObjectFactory_ESTest extends DomainObjectFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DomainObjectFactory domainObjectFactory0 = new DomainObjectFactory();
      ObjectFactory objectFactory0 = mock(ObjectFactory.class, new ViolatedAssumptionAnswer());
      DomainObjectFactory domainObjectFactory1 = new DomainObjectFactory();
      Class<Integer> class0 = Integer.class;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) domainObjectFactory1;
      int[] intArray0 = new int[0];
      Version version0 = new Version();
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) class0;
      objectArray1[2] = (Object) objectFactory0;
      DefaultJobProgress defaultJobProgress0 = new DefaultJobProgress();
      ObjectFactory objectFactory1 = new ObjectFactory();
      JobStatus jobStatus0 = mock(JobStatus.class, new ViolatedAssumptionAnswer());
      DefaultObservationManager defaultObservationManager0 = new DefaultObservationManager();
      ComponentManager componentManager0 = mock(ComponentManager.class, new ViolatedAssumptionAnswer());
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      MergeResult mergeResult0 = new MergeResult();
      LogQueue logQueue0 = mergeResult0.getLog();
      DefaultLoggerManager defaultLoggerManager0 = new DefaultLoggerManager();
      Injector.inject(defaultLoggerManager0, (Class<?>) DefaultLoggerManager.class, "logger", (Object) logQueue0);
      Injector.inject(defaultLoggerManager0, (Class<?>) DefaultLoggerManager.class, "observation", (Object) defaultObservationManager0);
      Injector.validateBean(defaultLoggerManager0, (Class<?>) DefaultLoggerManager.class);
      Logger logger0 = (Logger)URLStreamHandlerFactory.log;
      defaultLoggerManager0.initialize();
      DefaultRequest defaultRequest0 = new DefaultRequest();
      DefaultRequest defaultRequest1 = new DefaultRequest(defaultRequest0);
      DefaultJobStatus<DefaultRequest> defaultJobStatus0 = new DefaultJobStatus<DefaultRequest>(defaultRequest1, jobStatus0, defaultObservationManager0, defaultLoggerManager0);
      JobStatus jobStatus1 = defaultJobStatus0.getParentJobStatus();
      DefaultJobStatus<DefaultRequest> defaultJobStatus1 = new DefaultJobStatus<DefaultRequest>(defaultRequest1, jobStatus1, (ObservationManager) null, defaultLoggerManager0);
      defaultJobStatus0.getParentJobStatus();
      // Undeclared exception!
      DomainObjectFactory.createJobStatus(objectFactory1, (URI) null, defaultJobStatus0);
  }
}

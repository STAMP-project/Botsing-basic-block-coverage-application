/*
 * This file was automatically generated by EvoSuite
 * Sun May 17 16:06:29 UTC 2020
 */

package org.apache.commons.math.estimation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.estimation.GaussNewtonEstimator;
import org.apache.commons.math.estimation.LevenbergMarquardtEstimator;
import org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest;
import org.apache.commons.math.estimation.SimpleEstimationProblem;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractEstimator_ESTest extends AbstractEstimator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
      LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
      LevenbergMarquardtEstimator levenbergMarquardtEstimator1 = new LevenbergMarquardtEstimator();
      levenbergMarquardtEstimator1.initializeEstimate(simpleEstimationProblem0);
      LevenbergMarquardtEstimatorTest levenbergMarquardtEstimatorTest0 = new LevenbergMarquardtEstimatorTest("+Ueqa-");
      LevenbergMarquardtEstimatorTest.QuadraticProblem levenbergMarquardtEstimatorTest_QuadraticProblem0 = levenbergMarquardtEstimatorTest0.new QuadraticProblem();
      double double0 = 1036.2962843210087;
      LevenbergMarquardtEstimatorTest levenbergMarquardtEstimatorTest1 = new LevenbergMarquardtEstimatorTest("boOVs$QS:@%&<|D");
      LevenbergMarquardtEstimatorTest.QuadraticProblem levenbergMarquardtEstimatorTest_QuadraticProblem1 = levenbergMarquardtEstimatorTest1.new QuadraticProblem();
      double double1 = 0.0;
      levenbergMarquardtEstimatorTest_QuadraticProblem1.addPoint((-1984.04), (-3853.902882), 1036.2962843210087);
      levenbergMarquardtEstimator0.initializeEstimate(simpleEstimationProblem0);
      GaussNewtonEstimator gaussNewtonEstimator0 = new GaussNewtonEstimator(0, Double.POSITIVE_INFINITY, 1192.5266739452);
      gaussNewtonEstimator0.incrementJacobianEvaluationsCounter();
      LevenbergMarquardtEstimator levenbergMarquardtEstimator2 = new LevenbergMarquardtEstimator();
      levenbergMarquardtEstimator2.initializeEstimate(simpleEstimationProblem0);
      // Undeclared exception!
      levenbergMarquardtEstimator2.getCovariances(levenbergMarquardtEstimatorTest_QuadraticProblem1);
  }
}

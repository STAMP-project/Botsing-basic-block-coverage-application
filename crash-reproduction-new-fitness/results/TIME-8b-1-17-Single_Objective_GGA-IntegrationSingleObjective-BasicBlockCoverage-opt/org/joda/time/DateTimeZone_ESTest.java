/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 30 11:08:39 UTC 2021
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeZone;
import org.joda.time.TestDateMidnight_Basics;
import org.joda.time.TestMutableDateTime_Basics;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class DateTimeZone_ESTest extends DateTimeZone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TestMutableDateTime_Basics testMutableDateTime_Basics0 = new TestMutableDateTime_Basics("hc6MLV?`+j `F");
      TestMutableDateTime_Basics.MockEqualsChronology testMutableDateTime_Basics_MockEqualsChronology0 = testMutableDateTime_Basics0.new MockEqualsChronology();
      testMutableDateTime_Basics_MockEqualsChronology0.getZone();
      String string0 = "RA1gTFQd 6";
      TestDateMidnight_Basics testDateMidnight_Basics0 = new TestDateMidnight_Basics("RA1gTFQd 6");
      TestDateMidnight_Basics.MockInstant testDateMidnight_Basics_MockInstant0 = testDateMidnight_Basics0.new MockInstant();
      DateTimeZone dateTimeZone0 = testDateMidnight_Basics_MockInstant0.getZone();
      dateTimeZone0.isFixed();
      try { 
        DateTimeZone.forOffsetHoursMinutes(1, 120);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 120
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }
}

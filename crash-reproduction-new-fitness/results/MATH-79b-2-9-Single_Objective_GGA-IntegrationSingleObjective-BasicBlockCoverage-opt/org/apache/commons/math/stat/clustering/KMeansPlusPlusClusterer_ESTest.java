/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 28 11:37:38 UTC 2021
 */

package org.apache.commons.math.stat.clustering;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Random;
import org.apache.commons.math.stat.clustering.Cluster;
import org.apache.commons.math.stat.clustering.EuclideanIntegerPoint;
import org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class KMeansPlusPlusClusterer_ESTest extends KMeansPlusPlusClusterer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Random random0 = new Random();
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(random0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-2147483647);
      intArray0[1] = (-2147483647);
      intArray0[2] = (-2147483647);
      intArray0[3] = (-2147483647);
      EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
      Cluster<EuclideanIntegerPoint> cluster0 = new Cluster<EuclideanIntegerPoint>(euclideanIntegerPoint0);
      cluster0.addPoint(euclideanIntegerPoint0);
      List<EuclideanIntegerPoint> list0 = cluster0.getPoints();
      Random random1 = new Random();
      cluster0.addPoint(euclideanIntegerPoint0);
      Cluster<EuclideanIntegerPoint> cluster1 = new Cluster<EuclideanIntegerPoint>(euclideanIntegerPoint0);
      cluster1.getPoints();
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer1 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(random1);
      int int0 = 1;
      cluster0.addPoint(euclideanIntegerPoint0);
      cluster0.getPoints();
      int int1 = 259;
      // Undeclared exception!
      kMeansPlusPlusClusterer1.cluster(list0, 1, (-923));
  }
}

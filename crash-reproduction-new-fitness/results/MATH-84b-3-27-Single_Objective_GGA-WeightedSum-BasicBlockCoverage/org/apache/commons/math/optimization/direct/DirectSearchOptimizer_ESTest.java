/*
 * This file was automatically generated by EvoSuite
 * Mon May 18 02:44:52 UTC 2020
 */

package org.apache.commons.math.optimization.direct;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.MultivariateRealFunction;
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.OptimizationException;
import org.apache.commons.math.optimization.RealConvergenceChecker;
import org.apache.commons.math.optimization.direct.MultiDirectional;
import org.apache.commons.math.optimization.direct.NelderMead;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class DirectSearchOptimizer_ESTest extends DirectSearchOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NelderMead nelderMead0 = new NelderMead();
      RealConvergenceChecker realConvergenceChecker0 = mock(RealConvergenceChecker.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(realConvergenceChecker0).toString();
      nelderMead0.setConvergenceChecker(realConvergenceChecker0);
      MultivariateRealFunction multivariateRealFunction0 = mock(MultivariateRealFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(multivariateRealFunction0).value(any(double[].class));
      double[] doubleArray0 = new double[8];
      nelderMead0.setMaxIterations(1);
      nelderMead0.setMaxIterations(1);
      RealConvergenceChecker realConvergenceChecker1 = nelderMead0.getConvergenceChecker();
      MultiDirectional multiDirectional0 = new MultiDirectional(0.73, (-4188.0));
      multiDirectional0.setMaxIterations(1);
      GoalType goalType0 = GoalType.MAXIMIZE;
      multiDirectional0.getConvergenceChecker();
      NelderMead nelderMead1 = new NelderMead(0.73, 1, 1, (-718.27));
      nelderMead1.setConvergenceChecker(realConvergenceChecker1);
      try { 
        multiDirectional0.optimize(multivariateRealFunction0, goalType0, doubleArray0);
        fail("Expecting exception: OptimizationException");
      
      } catch(OptimizationException e) {
         //
         // org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (1) exceeded
         //
         verifyException("org.apache.commons.math.optimization.direct.DirectSearchOptimizer", e);
      }
  }
}

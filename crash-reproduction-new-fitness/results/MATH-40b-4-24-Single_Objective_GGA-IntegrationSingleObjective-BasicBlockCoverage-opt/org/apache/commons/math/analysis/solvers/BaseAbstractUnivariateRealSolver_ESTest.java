/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 29 05:32:28 UTC 2021
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.Expm1Function;
import org.apache.commons.math.analysis.SinFunction;
import org.apache.commons.math.analysis.UnivariateFunction;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.BaseSecantSolver;
import org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math.analysis.solvers.SecantSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class BaseAbstractUnivariateRealSolver_ESTest extends BaseAbstractUnivariateRealSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double double0 = BaseSecantSolver.DEFAULT_ABSOLUTE_ACCURACY;
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      double double1 = BaseSecantSolver.DEFAULT_ABSOLUTE_ACCURACY;
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = 1.0E-6;
      doubleArray0[6] = (-1866.2022469606152);
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      SinFunction sinFunction0 = new SinFunction();
      sinFunction0.derivative();
      sinFunction0.value((-1866.2022469606152));
      sinFunction0.value((-1866.2022469606152));
      Expm1Function expm1Function0 = new Expm1Function();
      PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
      polynomialFunction1.derivative();
      polynomialFunction0.add(polynomialFunction1);
      double double2 = BaseSecantSolver.DEFAULT_ABSOLUTE_ACCURACY;
      polynomialFunction0.multiply(polynomialFunction0);
      double double3 = SecantSolver.DEFAULT_ABSOLUTE_ACCURACY;
      bracketingNthOrderBrentSolver0.getMaxEvaluations();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      bracketingNthOrderBrentSolver0.solve(23, (UnivariateFunction) polynomialFunction0, 1.0E-6, 3350.52016254261, allowedSolution0);
  }
}

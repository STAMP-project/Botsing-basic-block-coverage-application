/*
 * This file was automatically generated by EvoSuite
 * Mon May 18 01:34:23 UTC 2020
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class Line_ESTest extends Line_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      double[] doubleArray0 = new double[5];
      Vector3D vector3D1 = Vector3D.MINUS_I;
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D1, vector3D0);
      Line line1 = new Line(line0);
      line1.getAbscissa(vector3D1);
      Vector3D vector3D2 = Vector3D.POSITIVE_INFINITY;
      line0.wholeLine();
      Vector3D vector3D3 = line0.closestPoint(line1);
      line1.intersection(line0);
      Vector3D vector3D4 = new Vector3D(0.0, Double.NaN, Double.NaN);
      line0.getAbscissa(vector3D3);
      line1.toSubSpace(vector3D2);
      line1.closestPoint(line0);
      Line line2 = new Line(line0);
      Line line3 = line2.revert();
      line3.intersection(line0);
      Line line4 = new Line(line3);
      Vector3D vector3D5 = Vector3D.MINUS_I;
      Vector1D vector1D1 = Vector1D.NEGATIVE_INFINITY;
      line2.wholeLine();
      line0.toSpace(vector1D1);
      line3.getAbscissa(vector3D1);
      line4.wholeLine();
      Vector3D vector3D6 = Vector3D.POSITIVE_INFINITY;
      line2.intersection(line4);
      vector3D0.toString();
      Vector3D vector3D7 = Vector3D.NaN;
      line2.reset(vector3D6, vector3D7);
      line1.intersection(line3);
      // Undeclared exception!
      line2.toSubSpace((Vector<Euclidean3D>) null);
  }
}

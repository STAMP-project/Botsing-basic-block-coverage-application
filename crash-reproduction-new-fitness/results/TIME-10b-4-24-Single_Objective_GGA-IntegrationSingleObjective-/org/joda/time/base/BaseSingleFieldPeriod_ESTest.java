/*
 * This file was automatically generated by EvoSuite
 * Mon May 18 04:46:23 UTC 2020
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.MonthDay;
import org.joda.time.Seconds;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BuddhistChronology.getInstance();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Days days0 = Days.FIVE;
      MonthDay monthDay0 = new MonthDay((-1088L), (Chronology) buddhistChronology0);
      BaseSingleFieldPeriod.between(monthDay0, monthDay0, days0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      Chronology chronology0 = islamicChronology0.withUTC();
      DateTime dateTime0 = new DateTime(chronology0);
      dateTime0.isEqualNow();
      MonthDay monthDay1 = MonthDay.now((Chronology) islamicChronology0);
      BaseSingleFieldPeriod.between(monthDay0, monthDay1, days0);
      Days days1 = Days.SEVEN;
      Days days2 = Days.SEVEN;
      days2.getPeriodType();
      Seconds seconds0 = Seconds.ONE;
      seconds0.toStandardHours();
      seconds0.toStandardMinutes();
      Days days3 = days2.plus(days1);
      int int0 = 86399999;
      // Undeclared exception!
      BaseSingleFieldPeriod.between(monthDay1, monthDay0, days3);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Fri May 15 01:28:38 UTC 2020
 */

package org.xwiki.rendering.internal.macro.toc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Hashtable;
import javax.inject.Provider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.jgroups.util.TimeScheduler3;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.xwiki.component.embed.EmbeddableComponentManager;
import org.xwiki.component.internal.AbstractEntityComponentManager;
import org.xwiki.component.internal.SpaceComponentManager;
import org.xwiki.component.internal.multi.AbstractGenericComponentManager;
import org.xwiki.component.internal.multi.ComponentManagerManager;
import org.xwiki.context.Execution;
import org.xwiki.filter.xml.serializer.XMLSerializerFactory;
import org.xwiki.model.reference.EntityReferenceSerializer;
import org.xwiki.rendering.block.Block;
import org.xwiki.rendering.block.ExpandedMacroBlock;
import org.xwiki.rendering.internal.macro.toc.TreeParametersBuilder;
import org.xwiki.rendering.internal.renderer.AbstractBlockRenderer;
import org.xwiki.rendering.internal.renderer.html5.HTML5BlockRenderer;
import org.xwiki.rendering.macro.toc.TocMacroParameters;
import org.xwiki.rendering.transformation.MacroTransformationContext;
import org.xwiki.rendering.xdomxmlcurrent.internal.renderer.XDOMXMLRenderer;
import org.xwiki.rendering.xml.internal.renderer.AbstractStreamRendererFactory;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class TreeParametersBuilder_ESTest extends TreeParametersBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Block block0 = mock(Block.class, new ViolatedAssumptionAnswer());
      MacroTransformationContext macroTransformationContext0 = mock(MacroTransformationContext.class, new ViolatedAssumptionAnswer());
      TocMacroParameters tocMacroParameters0 = mock(TocMacroParameters.class, new ViolatedAssumptionAnswer());
      MacroTransformationContext macroTransformationContext1 = new MacroTransformationContext();
      TocMacroParameters.Scope tocMacroParameters_Scope0 = TocMacroParameters.Scope.LOCAL;
      TocMacroParameters tocMacroParameters1 = mock(TocMacroParameters.class, new ViolatedAssumptionAnswer());
      doReturn(2124).when(tocMacroParameters1).getDepth();
      doReturn("").when(tocMacroParameters1).getReference();
      doReturn(tocMacroParameters_Scope0).when(tocMacroParameters1).getScope();
      doReturn(2124).when(tocMacroParameters1).getStart();
      doReturn(false).when(tocMacroParameters1).isCustomStart();
      doReturn(false).when(tocMacroParameters1).isNumbered();
      MacroTransformationContext macroTransformationContext2 = macroTransformationContext1.clone();
      TocMacroParameters tocMacroParameters2 = mock(TocMacroParameters.class, new ViolatedAssumptionAnswer());
      TreeParametersBuilder treeParametersBuilder0 = new TreeParametersBuilder();
      macroTransformationContext2.clone();
      Block block1 = null;
      MacroTransformationContext macroTransformationContext3 = new MacroTransformationContext();
      TocMacroParameters tocMacroParameters3 = null;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(0);
      HTML5BlockRenderer hTML5BlockRenderer0 = new HTML5BlockRenderer();
      XDOMXMLRenderer xDOMXMLRenderer0 = new XDOMXMLRenderer();
      XMLSerializerFactory xMLSerializerFactory0 = mock(XMLSerializerFactory.class, new ViolatedAssumptionAnswer());
      Injector.inject(xDOMXMLRenderer0, (Class<?>) XDOMXMLRenderer.class, "serializerFactory", (Object) xMLSerializerFactory0);
      SpaceComponentManager spaceComponentManager0 = new SpaceComponentManager();
      Provider<Integer> provider0 = (Provider<Integer>) mock(Provider.class, new ViolatedAssumptionAnswer());
      Injector.inject(spaceComponentManager0, (Class<?>) SpaceComponentManager.class, "referenceProvider", (Object) provider0);
      EmbeddableComponentManager embeddableComponentManager0 = new EmbeddableComponentManager("");
      Injector.inject(spaceComponentManager0, (Class<?>) SpaceComponentManager.class, "wikiComponentManager", (Object) embeddableComponentManager0);
      Execution execution0 = mock(Execution.class, new ViolatedAssumptionAnswer());
      Injector.inject(spaceComponentManager0, (Class<?>) AbstractEntityComponentManager.class, "execution", (Object) execution0);
      EntityReferenceSerializer<TimeScheduler3.Task> entityReferenceSerializer0 = (EntityReferenceSerializer<TimeScheduler3.Task>) mock(EntityReferenceSerializer.class, new ViolatedAssumptionAnswer());
      Injector.inject(spaceComponentManager0, (Class<?>) AbstractEntityComponentManager.class, "serializer", (Object) entityReferenceSerializer0);
      ComponentManagerManager componentManagerManager0 = mock(ComponentManagerManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(spaceComponentManager0, (Class<?>) AbstractGenericComponentManager.class, "componentManagerManager", (Object) componentManagerManager0);
      Injector.validateBean(spaceComponentManager0, (Class<?>) SpaceComponentManager.class);
      Injector.inject(xDOMXMLRenderer0, (Class<?>) AbstractStreamRendererFactory.class, "componentManager", (Object) spaceComponentManager0);
      Injector.validateBean(xDOMXMLRenderer0, (Class<?>) XDOMXMLRenderer.class);
      Injector.inject(hTML5BlockRenderer0, (Class<?>) HTML5BlockRenderer.class, "html5RendererFactory", (Object) xDOMXMLRenderer0);
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      Injector.inject(hTML5BlockRenderer0, (Class<?>) AbstractBlockRenderer.class, "logger", (Object) logger0);
      Injector.validateBean(hTML5BlockRenderer0, (Class<?>) HTML5BlockRenderer.class);
      ExpandedMacroBlock expandedMacroBlock0 = new ExpandedMacroBlock("", hashtable0, hTML5BlockRenderer0, false);
      macroTransformationContext1.setCurrentMacroBlock(expandedMacroBlock0);
      // Undeclared exception!
      treeParametersBuilder0.build(block0, tocMacroParameters1, macroTransformationContext1);
  }
}

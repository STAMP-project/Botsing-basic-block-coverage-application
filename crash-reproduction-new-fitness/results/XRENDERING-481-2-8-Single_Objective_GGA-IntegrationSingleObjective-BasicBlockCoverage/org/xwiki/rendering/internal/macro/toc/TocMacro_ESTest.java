/*
 * This file was automatically generated by EvoSuite
 * Sun May 17 02:00:57 UTC 2020
 */

package org.xwiki.rendering.internal.macro.toc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Vector;
import javatests.DiamondIterableMapMRO;
import javax.inject.Provider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.xwiki.component.descriptor.ComponentDescriptor;
import org.xwiki.component.embed.EmbeddableComponentManager;
import org.xwiki.properties.BeanManager;
import org.xwiki.rendering.block.Block;
import org.xwiki.rendering.block.MacroBlock;
import org.xwiki.rendering.block.QuotationLineBlock;
import org.xwiki.rendering.internal.macro.toc.TocMacro;
import org.xwiki.rendering.internal.parser.pygments.PygmentsParserConfiguration;
import org.xwiki.rendering.macro.AbstractMacro;
import org.xwiki.rendering.macro.toc.TocMacroParameters;
import org.xwiki.rendering.parser.Parser;
import org.xwiki.rendering.renderer.reference.link.LinkLabelGenerator;
import org.xwiki.rendering.transformation.MacroTransformationContext;
import org.xwiki.rendering.transformation.TransformationContext;
import org.xwiki.rendering.transformation.icon.IconTransformationConfiguration;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class TocMacro_ESTest extends TocMacro_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BeanManager beanManager0 = mock(BeanManager.class, new ViolatedAssumptionAnswer());
      ComponentDescriptor<QuotationLineBlock> componentDescriptor0 = (ComponentDescriptor<QuotationLineBlock>) mock(ComponentDescriptor.class, new ViolatedAssumptionAnswer());
      LinkLabelGenerator linkLabelGenerator0 = mock(LinkLabelGenerator.class, new ViolatedAssumptionAnswer());
      Parser parser0 = mock(Parser.class, new ViolatedAssumptionAnswer());
      BeanManager beanManager1 = mock(BeanManager.class, new ViolatedAssumptionAnswer());
      TocMacro tocMacro0 = new TocMacro();
      Injector.inject(tocMacro0, (Class<?>) TocMacro.class, "linkLabelGenerator", (Object) linkLabelGenerator0);
      Injector.inject(tocMacro0, (Class<?>) TocMacro.class, "plainTextParser", (Object) parser0);
      Provider<Integer> provider0 = (Provider<Integer>) mock(Provider.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(provider0).get();
      Injector.inject(tocMacro0, (Class<?>) TocMacro.class, "wikiModelProvider", (Object) provider0);
      BeanManager beanManager2 = mock(BeanManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(tocMacro0, (Class<?>) AbstractMacro.class, "beanManager", (Object) beanManager2);
      Injector.inject(tocMacro0, (Class<?>) AbstractMacro.class, "componentDescriptor", (Object) componentDescriptor0);
      Injector.validateBean(tocMacro0, (Class<?>) TocMacro.class);
      MacroTransformationContext macroTransformationContext0 = new MacroTransformationContext();
      TransformationContext transformationContext0 = new TransformationContext();
      macroTransformationContext0.clone();
      IconTransformationConfiguration iconTransformationConfiguration0 = mock(IconTransformationConfiguration.class, new ViolatedAssumptionAnswer());
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      PygmentsParserConfiguration pygmentsParserConfiguration0 = mock(PygmentsParserConfiguration.class, new ViolatedAssumptionAnswer());
      EmbeddableComponentManager embeddableComponentManager0 = new EmbeddableComponentManager();
      DiamondIterableMapMRO diamondIterableMapMRO0 = new DiamondIterableMapMRO();
      diamondIterableMapMRO0.getOrDefault(embeddableComponentManager0, tocMacro0);
      diamondIterableMapMRO0.put(beanManager1, pygmentsParserConfiguration0);
      MacroBlock macroBlock0 = new MacroBlock("b7g_E)&pi\u0004({Dp", diamondIterableMapMRO0, "_:S@0HI", false);
      macroTransformationContext0.setCurrentMacroBlock(macroBlock0);
      tocMacro0.supportsInlineMode();
      Vector<Block> vector0 = new Vector<Block>();
      ArrayList<Block> arrayList0 = new ArrayList<Block>();
      TocMacroParameters tocMacroParameters0 = new TocMacroParameters();
      TocMacroParameters.Scope tocMacroParameters_Scope0 = TocMacroParameters.Scope.LOCAL;
      tocMacroParameters0.setScope(tocMacroParameters_Scope0);
      // Undeclared exception!
      tocMacro0.execute(tocMacroParameters0, "EHDNCGD", macroTransformationContext0);
  }
}

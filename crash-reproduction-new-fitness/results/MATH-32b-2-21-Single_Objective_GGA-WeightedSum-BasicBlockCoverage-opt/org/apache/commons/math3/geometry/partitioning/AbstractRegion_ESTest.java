/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 26 09:53:10 UTC 2021
 */

package org.apache.commons.math3.geometry.partitioning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.threed.Plane;
import org.apache.commons.math3.geometry.euclidean.threed.SubPlane;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor;
import org.apache.commons.math3.geometry.partitioning.Region;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractRegion_ESTest extends AbstractRegion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet();
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>();
      BSPTree.LeafMerger<Euclidean1D> bSPTree_LeafMerger0 = (BSPTree.LeafMerger<Euclidean1D>) mock(BSPTree.LeafMerger.class, new ViolatedAssumptionAnswer());
      Boolean boolean0 = Boolean.FALSE;
      bSPTree0.setAttribute(boolean0);
      bSPTree0.setAttribute(polygonsSet0);
      boolean boolean1 = true;
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Vector3D vector3D2 = Vector3D.MINUS_K;
      Plane plane0 = new Plane(vector3D1, vector3D2, vector3D1);
      SubPlane subPlane0 = plane0.wholeHyperplane();
      bSPTree0.setAttribute(subPlane0);
      bSPTree0.copySelf();
      SubPlane subPlane1 = new SubPlane(plane0, (Region<Euclidean2D>) null);
      BSPTree<Euclidean2D> bSPTree1 = new BSPTree<Euclidean2D>(subPlane1);
      BoundarySizeVisitor<Euclidean2D> boundarySizeVisitor0 = new BoundarySizeVisitor<Euclidean2D>();
      bSPTree1.visit(boundarySizeVisitor0);
      BSPTree<Euclidean2D> bSPTree2 = bSPTree1.getCell((Vector<Euclidean2D>) null);
      PolygonsSet polygonsSet1 = polygonsSet0.buildNew(bSPTree2);
      // Undeclared exception!
      polygonsSet1.getSize();
  }
}

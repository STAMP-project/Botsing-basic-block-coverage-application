/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 29 05:32:25 UTC 2021
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.Expm1Function;
import org.apache.commons.math.analysis.SinFunction;
import org.apache.commons.math.analysis.UnivariateFunction;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class BracketingNthOrderBrentSolver_ESTest extends BracketingNthOrderBrentSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(0.0, 3721);
      bracketingNthOrderBrentSolver0.getEvaluations();
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(univariateFunction0).value(anyDouble());
      bracketingNthOrderBrentSolver0.solve(3721, univariateFunction0, 2299.73);
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver1 = new BracketingNthOrderBrentSolver();
      bracketingNthOrderBrentSolver0.getMin();
      SinFunction sinFunction0 = new SinFunction();
      UnivariateFunction univariateFunction1 = sinFunction0.derivative();
      sinFunction0.value((-1996.4813617093257));
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      bracketingNthOrderBrentSolver1.solve(3721, univariateFunction1, (-2279.698465), 0.0, allowedSolution0);
      bracketingNthOrderBrentSolver1.doSolve();
      UnivariateFunction univariateFunction2 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      AllowedSolution allowedSolution1 = AllowedSolution.BELOW_SIDE;
      Expm1Function expm1Function0 = new Expm1Function();
      expm1Function0.derivative();
      // Undeclared exception!
      bracketingNthOrderBrentSolver0.solve(511, (UnivariateFunction) expm1Function0, (-4827.93076909932), 2260.2, allowedSolution1);
  }
}

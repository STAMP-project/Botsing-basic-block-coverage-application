/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 25 22:22:05 UTC 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.LocalDateTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.ReadablePartial;
import org.joda.time.Seconds;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Chronology chronology0 = buddhistChronology0.withUTC();
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.withDate(326565, 1, 27);
      LocalDateTime localDateTime2 = localDateTime1.plusDays(630);
      chronology0.set(localDateTime2, 630);
      Hours hours0 = Hours.SIX;
      hours0.toStandardWeeks();
      BuddhistChronology.getInstance();
      BuddhistChronology buddhistChronology1 = BuddhistChronology.getInstance();
      chronology0.getZone();
      BuddhistChronology.getInstance();
      BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology1.getZone();
      DateTimeFieldType.monthOfYear();
      Hours hours1 = Hours.EIGHT;
      BuddhistChronology.getInstance(dateTimeZone0);
      Days days0 = Days.SEVEN;
      Minutes minutes0 = Minutes.ZERO;
      Seconds seconds0 = minutes0.toStandardSeconds();
      Minutes minutes1 = Minutes.minutes((-2462));
      minutes0.toStandardWeeks();
      Days days1 = seconds0.toStandardDays();
      minutes0.getFieldType();
      Months months0 = Months.months((-1686));
      months0.getPeriodType();
      Duration duration0 = days1.toStandardDuration();
      minutes0.toStandardWeeks();
      Seconds seconds1 = duration0.toStandardSeconds();
      seconds0.isLessThan(seconds1);
      seconds1.toString();
      hours1.dividedBy((-2462));
      minutes1.minus(minutes0);
      MonthDay monthDay0 = new MonthDay((long) (-1686));
      MonthDay monthDay1 = monthDay0.minusMonths((-2462));
      // Undeclared exception!
      Years.yearsBetween((ReadablePartial) monthDay1, (ReadablePartial) monthDay1);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Fri May 15 05:16:39 UTC 2020
 */

package org.xwiki.rest.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.qos.logback.classic.Logger;
import com.xpn.xwiki.api.Document;
import com.xpn.xwiki.api.Object;
import java.net.URI;
import java.util.concurrent.PriorityBlockingQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.hibernate.collection.PersistentBag;
import org.hibernate.engine.SessionImplementor;
import org.hibernate.loader.custom.sql.SQLCustomQuery;
import org.junit.runner.RunWith;
import org.slf4j.helpers.NOPLogger;
import org.xwiki.component.manager.ComponentManager;
import org.xwiki.job.DefaultJobStatus;
import org.xwiki.job.DefaultRequest;
import org.xwiki.job.event.status.JobStatus;
import org.xwiki.logging.logback.internal.DefaultLoggerManager;
import org.xwiki.observation.ObservationManager;
import org.xwiki.observation.internal.DefaultObservationManager;
import org.xwiki.rest.internal.DomainObjectFactory;
import org.xwiki.rest.internal.resources.pages.PageResourceImpl;
import org.xwiki.rest.model.jaxb.ObjectFactory;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class DomainObjectFactory_ESTest extends DomainObjectFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ObjectFactory objectFactory0 = mock(ObjectFactory.class, new ViolatedAssumptionAnswer());
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      ObjectFactory objectFactory1 = mock(ObjectFactory.class, new ViolatedAssumptionAnswer());
      Document document1 = mock(Document.class, new ViolatedAssumptionAnswer());
      Object object0 = mock(Object.class, new ViolatedAssumptionAnswer());
      SessionImplementor sessionImplementor0 = mock(SessionImplementor.class, new ViolatedAssumptionAnswer());
      PriorityBlockingQueue<PageResourceImpl> priorityBlockingQueue0 = new PriorityBlockingQueue<PageResourceImpl>();
      PriorityBlockingQueue<PageResourceImpl> priorityBlockingQueue1 = new PriorityBlockingQueue<PageResourceImpl>();
      PersistentBag persistentBag0 = new PersistentBag(sessionImplementor0, priorityBlockingQueue0);
      ObjectFactory objectFactory2 = new ObjectFactory();
      DefaultRequest defaultRequest0 = new DefaultRequest();
      JobStatus jobStatus0 = mock(JobStatus.class, new ViolatedAssumptionAnswer());
      DefaultObservationManager defaultObservationManager0 = new DefaultObservationManager();
      ComponentManager componentManager0 = mock(ComponentManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(defaultObservationManager0, (Class<?>) DefaultObservationManager.class, "componentManager", (java.lang.Object) componentManager0);
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      Injector.inject(defaultObservationManager0, (Class<?>) DefaultObservationManager.class, "logger", (java.lang.Object) nOPLogger0);
      Injector.validateBean(defaultObservationManager0, (Class<?>) DefaultObservationManager.class);
      DefaultLoggerManager defaultLoggerManager0 = new DefaultLoggerManager();
      Logger logger0 = (Logger)SQLCustomQuery.log;
      Injector.inject(defaultLoggerManager0, (Class<?>) DefaultLoggerManager.class, "logger", (java.lang.Object) logger0);
      ObservationManager observationManager0 = mock(ObservationManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(defaultLoggerManager0, (Class<?>) DefaultLoggerManager.class, "observation", (java.lang.Object) observationManager0);
      Injector.validateBean(defaultLoggerManager0, (Class<?>) DefaultLoggerManager.class);
      DefaultJobStatus<DefaultRequest> defaultJobStatus0 = new DefaultJobStatus<DefaultRequest>(defaultRequest0, jobStatus0, defaultObservationManager0, defaultLoggerManager0);
      defaultJobStatus0.getParentJobStatus();
      ObjectFactory objectFactory3 = new ObjectFactory();
      // Undeclared exception!
      DomainObjectFactory.createJobStatus(objectFactory3, (URI) null, defaultJobStatus0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Thu May 14 12:20:08 UTC 2020
 */

package org.apache.commons.math3.geometry.partitioning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.apache.commons.math3.geometry.partitioning.Transform;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractRegion_ESTest extends AbstractRegion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>();
      BSPTree.LeafMerger<Euclidean1D> bSPTree_LeafMerger0 = (BSPTree.LeafMerger<Euclidean1D>) mock(BSPTree.LeafMerger.class, new ViolatedAssumptionAnswer());
      bSPTree0.getPlus();
      BSPTree.LeafMerger<Euclidean1D> bSPTree_LeafMerger1 = (BSPTree.LeafMerger<Euclidean1D>) mock(BSPTree.LeafMerger.class, new ViolatedAssumptionAnswer());
      doReturn((BSPTree) null).when(bSPTree_LeafMerger1).merge(nullable(org.apache.commons.math3.geometry.partitioning.BSPTree.class) , nullable(org.apache.commons.math3.geometry.partitioning.BSPTree.class) , nullable(org.apache.commons.math3.geometry.partitioning.BSPTree.class) , anyBoolean() , anyBoolean());
      bSPTree0.merge((BSPTree<Euclidean1D>) null, bSPTree_LeafMerger1);
      BoundarySizeVisitor<Euclidean1D> boundarySizeVisitor0 = new BoundarySizeVisitor<Euclidean1D>();
      BoundarySizeVisitor<Euclidean1D> boundarySizeVisitor1 = new BoundarySizeVisitor<Euclidean1D>();
      IntervalsSet intervalsSet0 = new IntervalsSet();
      IntervalsSet intervalsSet1 = intervalsSet0.buildNew(bSPTree0);
      IntervalsSet intervalsSet2 = new IntervalsSet();
      IntervalsSet intervalsSet3 = new IntervalsSet();
      Object object0 = new Object();
      Transform<Euclidean1D, Euclidean1D> transform0 = (Transform<Euclidean1D, Euclidean1D>) mock(Transform.class, new ViolatedAssumptionAnswer());
      intervalsSet0.applyTransform(transform0);
      intervalsSet0.asList();
      BSPTree<Euclidean1D> bSPTree1 = intervalsSet0.getTree(false);
      intervalsSet2.buildNew(bSPTree0);
      IntervalsSet intervalsSet4 = new IntervalsSet();
      Object object1 = new Object();
      BoundarySizeVisitor<Euclidean1D> boundarySizeVisitor2 = new BoundarySizeVisitor<Euclidean1D>();
      intervalsSet1.buildNew((BSPTree<Euclidean1D>) null);
      bSPTree1.insertInTree((BSPTree<Euclidean1D>) null, false);
      IntervalsSet intervalsSet5 = new IntervalsSet();
      LinkedList<SubHyperplane<Euclidean1D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean1D>>();
      IntervalsSet intervalsSet6 = new IntervalsSet(linkedList0);
      intervalsSet0.getSize();
      IntervalsSet intervalsSet7 = new IntervalsSet(bSPTree1);
      intervalsSet6.getSize();
      intervalsSet2.getTree(true);
      intervalsSet6.buildNew(bSPTree0);
      intervalsSet3.getTree(false);
      intervalsSet3.getSize();
      Object object2 = new Object();
      BSPTree<Euclidean2D> bSPTree2 = new BSPTree<Euclidean2D>(object2);
      PolygonsSet polygonsSet0 = new PolygonsSet(bSPTree2);
      // Undeclared exception!
      polygonsSet0.getSize();
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Mon May 18 04:08:12 GMT+00:00 2020
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.GregorianCalendar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDateTime;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class BaseChronology_ESTest extends BaseChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      islamicChronology0.yearOfCentury();
      islamicChronology0.weekyearOfCentury();
      islamicChronology0.withUTC();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateTimeZone dateTimeZone1 = gregorianChronology0.getZone();
      islamicChronology0.hourOfHalfday();
      islamicChronology0.monthOfYear();
      Chronology chronology0 = islamicChronology0.withZone((DateTimeZone) null);
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar();
      gregorianCalendar0.getTime();
      LocalDateTime localDateTime0 = new LocalDateTime((-1940L), dateTimeZone1);
      // Undeclared exception!
      chronology0.set(localDateTime0, (-3856L));
  }
}

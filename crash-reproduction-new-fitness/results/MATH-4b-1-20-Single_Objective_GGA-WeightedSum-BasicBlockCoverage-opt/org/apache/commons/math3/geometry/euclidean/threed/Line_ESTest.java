/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 26 20:11:04 UTC 2021
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class Line_ESTest extends Line_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      Line line1 = new Line(line0);
      line0.intersection(line1);
      Line line2 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line2.getDirection();
      line2.wholeLine();
      line2.getAbscissa(vector3D0);
      Line line3 = new Line(vector3D1, vector3D1);
      Vector3D vector3D2 = line2.closestPoint(line3);
      line3.contains(vector3D0);
      Line line4 = new Line(vector3D0, vector3D2);
      Vector1D vector1D0 = Vector1D.NaN;
      Vector1D vector1D1 = new Vector1D((-660.9764), vector1D0, 0.875, vector1D0, 0.875, vector1D0, 0.0, vector1D0);
      Vector3D vector3D3 = line4.toSpace(vector1D1);
      line2.isSimilarTo(line4);
      Line line5 = new Line(line2);
      line5.getOrigin();
      line5.toSpace(vector1D0);
      line5.getAbscissa(vector3D1);
      line5.distance(vector3D3);
      line5.wholeLine();
      // Undeclared exception!
      line5.getAbscissa((Vector3D) null);
  }
}

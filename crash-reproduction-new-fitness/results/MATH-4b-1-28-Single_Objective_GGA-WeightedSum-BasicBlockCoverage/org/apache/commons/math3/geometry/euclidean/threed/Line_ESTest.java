/*
 * This file was automatically generated by EvoSuite
 * Mon May 18 00:56:16 UTC 2020
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class Line_ESTest extends Line_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Vector<Euclidean3D> vector0 = (Vector<Euclidean3D>) mock(Vector.class, new ViolatedAssumptionAnswer());
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      ChoiceFormat choiceFormat0 = new ChoiceFormat("cannot format a {0} instance as a real vector");
      double double0 = 0.0;
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormat decimalFormat0 = new DecimalFormat("cannot format a {0} instance as a real vector");
      FieldPosition fieldPosition0 = new FieldPosition((Format.Field) null);
      StringBuffer stringBuffer0 = new StringBuffer("cannot format a {0} instance as a real vector");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition1 = new FieldPosition(format_Field0);
      vector3D0.toString((NumberFormat) choiceFormat0);
      Line line0 = new Line(vector3D0, vector3D0);
      Line line1 = new Line(vector3D0, vector3D0);
      line1.getAbscissa(vector3D0);
      line1.intersection(line0);
      line0.wholeLine();
      line0.closestPoint(line1);
      line0.distance(vector3D0);
      // Undeclared exception!
      line1.toSubSpace((Vector<Euclidean3D>) null);
  }
}

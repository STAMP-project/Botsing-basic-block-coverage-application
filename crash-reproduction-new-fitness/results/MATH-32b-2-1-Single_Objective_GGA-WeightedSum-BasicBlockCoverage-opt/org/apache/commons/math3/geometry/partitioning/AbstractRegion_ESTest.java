/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 25 15:05:45 UTC 2021
 */

package org.apache.commons.math3.geometry.partitioning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.Line;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.euclidean.twod.Segment;
import org.apache.commons.math3.geometry.euclidean.twod.SubLine;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractRegion_ESTest extends AbstractRegion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>();
      bSPTree0.getCut();
      bSPTree0.getParent();
      Euclidean3D euclidean3D0 = Euclidean3D.getInstance();
      Euclidean2D euclidean2D0 = euclidean3D0.getSubSpace();
      BSPTree<Euclidean1D> bSPTree1 = new BSPTree<Euclidean1D>(euclidean2D0);
      bSPTree0.insertInTree(bSPTree1, true);
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Vector3D.crossProduct(vector3D0, vector3D0);
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, 523.86);
      Line line1 = new Line(line0);
      Segment segment0 = new Segment(vector2D0, vector2D0, line0);
      SubLine subLine0 = new SubLine(segment0);
      BSPTree<Euclidean2D> bSPTree2 = new BSPTree<Euclidean2D>();
      Vector2D vector2D1 = Vector2D.POSITIVE_INFINITY;
      BSPTree<Euclidean2D> bSPTree3 = bSPTree2.getCell(vector2D1);
      BSPTree<Euclidean2D> bSPTree4 = new BSPTree<Euclidean2D>(subLine0, bSPTree3, bSPTree3, vector2D0);
      BSPTree<Euclidean2D> bSPTree5 = new BSPTree<Euclidean2D>(euclidean3D0);
      PolygonsSet polygonsSet0 = new PolygonsSet(bSPTree5);
      // Undeclared exception!
      polygonsSet0.getSize();
  }
}

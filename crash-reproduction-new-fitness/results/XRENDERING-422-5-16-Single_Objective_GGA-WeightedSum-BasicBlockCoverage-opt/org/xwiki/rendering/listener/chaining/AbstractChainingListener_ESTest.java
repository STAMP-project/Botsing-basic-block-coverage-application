/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 27 03:38:05 UTC 2021
 */

package org.xwiki.rendering.listener.chaining;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.xwiki.rendering.listener.Format;
import org.xwiki.rendering.listener.MetaData;
import org.xwiki.rendering.listener.chaining.BlockStateChainingListener;
import org.xwiki.rendering.listener.chaining.ChainingListener;
import org.xwiki.rendering.listener.chaining.ConsecutiveNewLineStateChainingListener;
import org.xwiki.rendering.listener.chaining.EmptyBlockChainingListener;
import org.xwiki.rendering.listener.chaining.ListenerChain;
import org.xwiki.rendering.listener.reference.ResourceReference;
import org.xwiki.rendering.listener.reference.ResourceType;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractChainingListener_ESTest extends AbstractChainingListener_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ListenerChain listenerChain0 = new ListenerChain();
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Class<ChainingListener> class0 = ChainingListener.class;
      BlockStateChainingListener blockStateChainingListener0 = new BlockStateChainingListener(listenerChain0);
      ConsecutiveNewLineStateChainingListener consecutiveNewLineStateChainingListener0 = new ConsecutiveNewLineStateChainingListener(listenerChain0);
      listenerChain0.getNextListener(class0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ResourceType resourceType0 = ResourceType.ICON;
      listenerChain0.addListener(consecutiveNewLineStateChainingListener0);
      ConsecutiveNewLineStateChainingListener consecutiveNewLineStateChainingListener1 = new ConsecutiveNewLineStateChainingListener(listenerChain0);
      Class<ChainingListener> class1 = ChainingListener.class;
      listenerChain0.getNextListener(class1);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      ResourceType resourceType1 = ResourceType.ICON;
      MetaData metaData0 = MetaData.EMPTY;
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      MetaData metaData1 = new MetaData(hashMap2);
      listenerChain0.addListener(blockStateChainingListener0);
      EmptyBlockChainingListener emptyBlockChainingListener0 = new EmptyBlockChainingListener(listenerChain0);
      listenerChain0.addListener(emptyBlockChainingListener0);
      Class<ChainingListener> class2 = ChainingListener.class;
      listenerChain0.pushListener(class2);
      ResourceReference resourceReference0 = new ResourceReference("0.9", resourceType1);
      Format format0 = Format.SUPERSCRIPT;
      // Undeclared exception!
      consecutiveNewLineStateChainingListener0.endFormat(format0, hashMap1);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat May 16 22:55:06 UTC 2020
 */

package org.apache.commons.math.ode.events;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.events.EventState;
import org.apache.commons.math.ode.nonstiff.StepProblem;
import org.apache.commons.math.ode.sampling.StepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class EventState_ESTest extends EventState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      StepInterpolator stepInterpolator1 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(stepInterpolator1).getCurrentTime();
      doReturn((Object) null, (Object) null, (Object) null).when(stepInterpolator1).getInterpolatedState();
      doReturn(false, false).when(stepInterpolator1).isForward();
      StepInterpolator stepInterpolator2 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(stepInterpolator2).getCurrentTime();
      doReturn((Object) null, (Object) null, (Object) null).when(stepInterpolator2).getInterpolatedState();
      doReturn(false, false).when(stepInterpolator2).isForward();
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, (-1559.985618084));
      EventState eventState0 = new EventState(stepProblem0, (-1559.985618084), 0.0, (-1436));
      eventState0.evaluateStep(stepInterpolator2);
      eventState0.getMaxCheckInterval();
      double[] doubleArray0 = new double[3];
      EventState eventState1 = new EventState(stepProblem0, (-1901.665670998766), 1.8681398502675548, 2418);
      eventState0.stepAccepted(1561.9756430840007, doubleArray0);
      eventState1.getEventTime();
      // Undeclared exception!
      eventState0.evaluateStep(stepInterpolator1);
  }
}

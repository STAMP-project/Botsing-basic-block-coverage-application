/*
 * This file was automatically generated by EvoSuite
 * Thu May 14 12:40:15 UTC 2020
 */

package org.apache.commons.math.stat.clustering;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;
import org.apache.commons.math.stat.clustering.Cluster;
import org.apache.commons.math.stat.clustering.EuclideanIntegerPoint;
import org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class KMeansPlusPlusClusterer_ESTest extends KMeansPlusPlusClusterer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Random random0 = new Random();
      random0.ints((-4829), Integer.MAX_VALUE);
      random0.doubles();
      int int0 = (-2452);
      random0.ints(650, Integer.MAX_VALUE);
      random0.nextGaussian();
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(random0);
      int[] intArray0 = new int[9];
      intArray0[0] = 650;
      intArray0[1] = (-2452);
      intArray0[2] = (-4829);
      intArray0[3] = Integer.MAX_VALUE;
      intArray0[4] = (-2452);
      intArray0[5] = Integer.MAX_VALUE;
      intArray0[6] = Integer.MAX_VALUE;
      intArray0[7] = 0;
      intArray0[8] = (-2147483647);
      EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
      Cluster<EuclideanIntegerPoint> cluster0 = new Cluster<EuclideanIntegerPoint>(euclideanIntegerPoint0);
      List<EuclideanIntegerPoint> list0 = cluster0.getPoints();
      cluster0.addPoint(euclideanIntegerPoint0);
      cluster0.addPoint(euclideanIntegerPoint0);
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer1 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(random0);
      cluster0.addPoint(euclideanIntegerPoint0);
      // Undeclared exception!
      kMeansPlusPlusClusterer1.cluster(list0, (-2452), 1413);
  }
}

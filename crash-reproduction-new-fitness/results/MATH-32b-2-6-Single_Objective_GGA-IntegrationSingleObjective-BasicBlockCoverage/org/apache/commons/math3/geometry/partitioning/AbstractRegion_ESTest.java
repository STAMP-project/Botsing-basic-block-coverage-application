/*
 * This file was automatically generated by EvoSuite
 * Sat May 16 12:16:55 UTC 2020
 */

package org.apache.commons.math3.geometry.partitioning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint;
import org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.Line;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.euclidean.twod.SubLine;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.Hyperplane;
import org.apache.commons.math3.geometry.partitioning.Transform;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractRegion_ESTest extends AbstractRegion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet();
      Vector1D vector1D0 = new Vector1D(969.29659);
      Vector1D vector1D1 = new Vector1D(969.29659, vector1D0, 969.29659, vector1D0, 969.29659, vector1D0);
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D1, false);
      SubOrientedPoint subOrientedPoint0 = new SubOrientedPoint(orientedPoint0, intervalsSet0);
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>(subOrientedPoint0);
      BSPTree<Euclidean1D> bSPTree1 = new BSPTree<Euclidean1D>(subOrientedPoint0, bSPTree0, bSPTree0, vector1D1);
      Transform<Euclidean1D, Euclidean1D> transform0 = (Transform<Euclidean1D, Euclidean1D>) mock(Transform.class, new ViolatedAssumptionAnswer());
      doReturn((Hyperplane) null).when(transform0).apply(nullable(org.apache.commons.math3.geometry.partitioning.Hyperplane.class));
      bSPTree0.setAttribute(vector1D0);
      subOrientedPoint0.applyTransform(transform0);
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, vector2D0);
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      Object object0 = new Object();
      BSPTree<Euclidean2D> bSPTree2 = new BSPTree<Euclidean2D>(object0);
      BSPTree<Euclidean2D> bSPTree3 = new BSPTree<Euclidean2D>(subLine0, bSPTree2, bSPTree2, intervalsSet0);
      BSPTree<Euclidean2D> bSPTree4 = bSPTree3.getMinus();
      bSPTree2.getMinus();
      BSPTree.LeafMerger<Euclidean2D> bSPTree_LeafMerger0 = (BSPTree.LeafMerger<Euclidean2D>) mock(BSPTree.LeafMerger.class, new ViolatedAssumptionAnswer());
      doReturn((BSPTree) null).when(bSPTree_LeafMerger0).merge(nullable(org.apache.commons.math3.geometry.partitioning.BSPTree.class) , nullable(org.apache.commons.math3.geometry.partitioning.BSPTree.class) , nullable(org.apache.commons.math3.geometry.partitioning.BSPTree.class) , anyBoolean() , anyBoolean());
      bSPTree2.merge((BSPTree<Euclidean2D>) null, bSPTree_LeafMerger0);
      PolygonsSet polygonsSet0 = new PolygonsSet(bSPTree4);
      // Undeclared exception!
      polygonsSet0.getSize();
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 30 11:04:13 UTC 2021
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.format.DateTimeParserBucket;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class DateTimeParserBucket_ESTest extends DateTimeParserBucket_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn((DateTimeZone) null).when(chronology0).getZone();
      doReturn((Chronology) null).when(chronology0).withUTC();
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(durationField0).isSupported();
      DateTimeParserBucket.compareReverse(durationField0, durationField0);
      Integer integer0 = new Integer((-2012));
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, chronology0, (Locale) null, integer0, 80);
      Locale locale0 = dateTimeParserBucket0.getLocale();
      Chronology chronology1 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn((DateTimeZone) null).when(chronology1).getZone();
      doReturn((Chronology) null).when(chronology1).withUTC();
      DateTimeParserBucket dateTimeParserBucket1 = new DateTimeParserBucket((-2012), chronology1, locale0);
      dateTimeParserBucket0.computeMillis(true);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      dateTimeParserBucket1.saveField(dateTimeFieldType0, 0);
      DateTimeParserBucket.SavedState dateTimeParserBucket_SavedState0 = dateTimeParserBucket1.new SavedState();
      boolean boolean0 = true;
      String string0 = "The calculation caused an overflow: ";
      dateTimeParserBucket1.getChronology();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.secondOfMinute();
      dateTimeParserBucket1.saveField(dateTimeFieldType1, 2);
      int int0 = (-645);
      // Undeclared exception!
      dateTimeParserBucket1.computeMillis(false, "The calculation caused an overflow: ");
  }
}

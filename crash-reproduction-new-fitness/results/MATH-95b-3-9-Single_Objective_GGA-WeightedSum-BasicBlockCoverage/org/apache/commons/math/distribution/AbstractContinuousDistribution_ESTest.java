/*
 * This file was automatically generated by EvoSuite
 * Thu May 14 22:26:26 UTC 2020
 */

package org.apache.commons.math.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.distribution.BetaDistributionImpl;
import org.apache.commons.math.distribution.ChiSquaredDistributionImpl;
import org.apache.commons.math.distribution.ExponentialDistributionImpl;
import org.apache.commons.math.distribution.FDistributionImpl;
import org.apache.commons.math.distribution.GammaDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractContinuousDistribution_ESTest extends AbstractContinuousDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(1.0);
      chiSquaredDistributionImpl0.inverseCumulativeProbability(0.9999999999999971);
      chiSquaredDistributionImpl0.cumulativeProbability(20.0, 20.0);
      chiSquaredDistributionImpl0.setDegreesOfFreedom(0.9999999999999971);
      chiSquaredDistributionImpl0.getInitialDomain(1.0E-8);
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1.0E-8, 1.0E-15);
      ExponentialDistributionImpl exponentialDistributionImpl0 = new ExponentialDistributionImpl(1.0E-15);
      GammaDistributionImpl gammaDistributionImpl0 = new GammaDistributionImpl(1.0E-6, 334.27508630376633);
      chiSquaredDistributionImpl0.setGamma(gammaDistributionImpl0);
      double double0 = new Double(1.0E-15);
      double double1 = new Double(62.0);
      exponentialDistributionImpl0.getDomainLowerBound(1.0E-15);
      BetaDistributionImpl betaDistributionImpl0 = new BetaDistributionImpl(0.49999999999999856, (-145.8637));
      Double double2 = new Double(20.0);
      betaDistributionImpl0.density(double2);
      // Undeclared exception!
      fDistributionImpl0.inverseCumulativeProbability(1.0E-15);
  }
}

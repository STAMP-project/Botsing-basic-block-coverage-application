/*
 * This file was automatically generated by EvoSuite
 * Fri May 15 00:55:55 UTC 2020
 */

package org.xwiki.rendering.internal.macro.toc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Stack;
import javax.inject.Provider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.xwiki.component.embed.EmbeddableComponentManager;
import org.xwiki.component.internal.AbstractEntityComponentManager;
import org.xwiki.component.internal.ContextComponentManager;
import org.xwiki.component.internal.ContextRootComponentManager;
import org.xwiki.component.internal.DocumentComponentManager;
import org.xwiki.component.internal.multi.AbstractGenericComponentManager;
import org.xwiki.component.internal.multi.ComponentManagerManager;
import org.xwiki.component.manager.ComponentManager;
import org.xwiki.context.Execution;
import org.xwiki.context.ExecutionContext;
import org.xwiki.filter.xml.serializer.XMLSerializerFactory;
import org.xwiki.model.reference.EntityReferenceSerializer;
import org.xwiki.properties.BeanManager;
import org.xwiki.rendering.block.Block;
import org.xwiki.rendering.block.DefinitionListBlock;
import org.xwiki.rendering.block.ExpandedMacroBlock;
import org.xwiki.rendering.internal.macro.toc.TreeParametersBuilder;
import org.xwiki.rendering.macro.MacroManager;
import org.xwiki.rendering.macro.toc.TocMacroParameters;
import org.xwiki.rendering.syntax.Syntax;
import org.xwiki.rendering.transformation.MacroTransformationContext;
import org.xwiki.rendering.transformation.RenderingContext;
import org.xwiki.rendering.transformation.TransformationContext;
import org.xwiki.rendering.util.ErrorBlockGenerator;
import org.xwiki.rendering.xdomxmlcurrent.internal.renderer.XDOMXMLRenderer;
import org.xwiki.rendering.xml.internal.renderer.AbstractStreamRendererFactory;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class TreeParametersBuilder_ESTest extends TreeParametersBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Block block0 = null;
      Block block1 = null;
      Block block2 = null;
      Syntax syntax0 = Syntax.ANNOTATED_XHTML_1_0;
      TransformationContext transformationContext0 = new TransformationContext();
      MacroTransformationContext macroTransformationContext0 = new MacroTransformationContext();
      macroTransformationContext0.clone();
      TocMacroParameters tocMacroParameters0 = new TocMacroParameters();
      BeanManager beanManager0 = mock(BeanManager.class, new ViolatedAssumptionAnswer());
      ErrorBlockGenerator errorBlockGenerator0 = mock(ErrorBlockGenerator.class, new ViolatedAssumptionAnswer());
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      MacroManager macroManager0 = mock(MacroManager.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      XDOMXMLRenderer xDOMXMLRenderer0 = new XDOMXMLRenderer();
      XMLSerializerFactory xMLSerializerFactory0 = mock(XMLSerializerFactory.class, new ViolatedAssumptionAnswer());
      Injector.inject(xDOMXMLRenderer0, (Class<?>) XDOMXMLRenderer.class, "serializerFactory", (Object) xMLSerializerFactory0);
      ContextRootComponentManager contextRootComponentManager0 = new ContextRootComponentManager();
      ContextComponentManager contextComponentManager0 = new ContextComponentManager();
      Execution execution0 = mock(Execution.class, new ViolatedAssumptionAnswer());
      doReturn((ExecutionContext) null).when(execution0).getContext();
      Injector.inject(contextComponentManager0, (Class<?>) ContextComponentManager.class, "execution", (Object) execution0);
      EmbeddableComponentManager embeddableComponentManager0 = new EmbeddableComponentManager();
      Injector.inject(contextComponentManager0, (Class<?>) ContextComponentManager.class, "rootComponentManager", (Object) embeddableComponentManager0);
      DocumentComponentManager documentComponentManager0 = new DocumentComponentManager();
      Provider<Integer> provider0 = (Provider<Integer>) mock(Provider.class, new ViolatedAssumptionAnswer());
      Injector.inject(documentComponentManager0, (Class<?>) DocumentComponentManager.class, "referenceProvider", (Object) provider0);
      EmbeddableComponentManager embeddableComponentManager1 = new EmbeddableComponentManager("Highlight");
      Injector.inject(documentComponentManager0, (Class<?>) DocumentComponentManager.class, "spaceComponentManager", (Object) embeddableComponentManager1);
      Execution execution1 = mock(Execution.class, new ViolatedAssumptionAnswer());
      Injector.inject(documentComponentManager0, (Class<?>) AbstractEntityComponentManager.class, "execution", (Object) execution1);
      EntityReferenceSerializer<Integer> entityReferenceSerializer0 = (EntityReferenceSerializer<Integer>) mock(EntityReferenceSerializer.class, new ViolatedAssumptionAnswer());
      Injector.inject(documentComponentManager0, (Class<?>) AbstractEntityComponentManager.class, "serializer", (Object) entityReferenceSerializer0);
      ComponentManagerManager componentManagerManager0 = mock(ComponentManagerManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(documentComponentManager0, (Class<?>) AbstractGenericComponentManager.class, "componentManagerManager", (Object) componentManagerManager0);
      Injector.validateBean(documentComponentManager0, (Class<?>) DocumentComponentManager.class);
      Injector.inject(contextComponentManager0, (Class<?>) ContextComponentManager.class, "userComponentManager", (Object) documentComponentManager0);
      Injector.validateBean(contextComponentManager0, (Class<?>) ContextComponentManager.class);
      Injector.inject(contextRootComponentManager0, (Class<?>) ContextRootComponentManager.class, "rootComponentManager", (Object) contextComponentManager0);
      ComponentManager componentManager0 = contextComponentManager0.getComponentManager();
      Injector.inject(contextRootComponentManager0, (Class<?>) ContextRootComponentManager.class, "userComponentManager", (Object) componentManager0);
      Injector.validateBean(contextRootComponentManager0, (Class<?>) ContextRootComponentManager.class);
      Injector.inject(xDOMXMLRenderer0, (Class<?>) AbstractStreamRendererFactory.class, "componentManager", (Object) contextRootComponentManager0);
      Injector.validateBean(xDOMXMLRenderer0, (Class<?>) XDOMXMLRenderer.class);
      ExpandedMacroBlock expandedMacroBlock0 = new ExpandedMacroBlock("Highlight", hashMap0, xDOMXMLRenderer0, true);
      macroTransformationContext0.setCurrentMacroBlock(expandedMacroBlock0);
      RenderingContext renderingContext0 = mock(RenderingContext.class, new ViolatedAssumptionAnswer());
      TocMacroParameters tocMacroParameters1 = new TocMacroParameters();
      TocMacroParameters.Scope tocMacroParameters_Scope0 = TocMacroParameters.Scope.LOCAL;
      tocMacroParameters1.setScope(tocMacroParameters_Scope0);
      TreeParametersBuilder treeParametersBuilder0 = new TreeParametersBuilder();
      TocMacroParameters tocMacroParameters2 = new TocMacroParameters();
      Stack<Block> stack0 = new Stack<Block>();
      DefinitionListBlock definitionListBlock0 = new DefinitionListBlock(stack0);
      TocMacroParameters tocMacroParameters3 = new TocMacroParameters();
      // Undeclared exception!
      treeParametersBuilder0.build(definitionListBlock0, tocMacroParameters1, macroTransformationContext0);
  }
}

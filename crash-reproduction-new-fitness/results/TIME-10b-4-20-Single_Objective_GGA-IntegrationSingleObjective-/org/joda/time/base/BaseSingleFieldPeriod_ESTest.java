/*
 * This file was automatically generated by EvoSuite
 * Mon May 18 04:45:25 UTC 2020
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.LocalDate;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GregorianChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      CopticChronology.getInstance();
      CopticChronology copticChronology1 = CopticChronology.getInstance();
      Days days0 = Days.THREE;
      Seconds seconds0 = Seconds.standardSecondsIn(days0);
      Days days1 = Days.THREE;
      Seconds seconds1 = Seconds.standardSecondsIn(days1);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      LocalDate localDate0 = LocalDate.now((Chronology) copticChronology1);
      Days days2 = Days.MAX_VALUE;
      gregorianChronology0.withZone((DateTimeZone) null);
      long long0 = 4L;
      copticChronology0.get((ReadablePeriod) seconds1, 4L, 4L);
      LocalDate localDate1 = new LocalDate((-2406L));
      LocalDate.now((Chronology) gregorianChronology0);
      // Undeclared exception!
      BaseSingleFieldPeriod.between(localDate0, localDate1, seconds0);
  }
}

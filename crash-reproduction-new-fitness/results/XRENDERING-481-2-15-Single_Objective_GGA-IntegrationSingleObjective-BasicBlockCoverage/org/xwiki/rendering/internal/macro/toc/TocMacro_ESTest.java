/*
 * This file was automatically generated by EvoSuite
 * Sun May 17 02:56:50 UTC 2020
 */

package org.xwiki.rendering.internal.macro.toc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import javax.inject.Provider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.xwiki.component.descriptor.ComponentDescriptor;
import org.xwiki.properties.BeanManager;
import org.xwiki.rendering.block.DefinitionListBlock;
import org.xwiki.rendering.block.MacroBlock;
import org.xwiki.rendering.internal.macro.toc.TocMacro;
import org.xwiki.rendering.macro.toc.TocMacroParameters;
import org.xwiki.rendering.parser.Parser;
import org.xwiki.rendering.renderer.reference.link.LinkLabelGenerator;
import org.xwiki.rendering.transformation.MacroTransformationContext;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class TocMacro_ESTest extends TocMacro_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkLabelGenerator linkLabelGenerator0 = mock(LinkLabelGenerator.class, new ViolatedAssumptionAnswer());
      Parser parser0 = mock(Parser.class, new ViolatedAssumptionAnswer());
      BeanManager beanManager0 = mock(BeanManager.class, new ViolatedAssumptionAnswer());
      ComponentDescriptor<DefinitionListBlock> componentDescriptor0 = (ComponentDescriptor<DefinitionListBlock>) mock(ComponentDescriptor.class, new ViolatedAssumptionAnswer());
      MacroTransformationContext macroTransformationContext0 = mock(MacroTransformationContext.class, new ViolatedAssumptionAnswer());
      MacroTransformationContext macroTransformationContext1 = mock(MacroTransformationContext.class, new ViolatedAssumptionAnswer());
      TocMacro tocMacro0 = new TocMacro();
      Injector.inject(tocMacro0, (Class<?>) TocMacro.class, "linkLabelGenerator", (Object) linkLabelGenerator0);
      Injector.inject(tocMacro0, (Class<?>) TocMacro.class, "plainTextParser", (Object) parser0);
      Provider<DefinitionListBlock> provider0 = (Provider<DefinitionListBlock>) mock(Provider.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(provider0).get();
      Injector.inject(tocMacro0, (Class<?>) TocMacro.class, "wikiModelProvider", (Object) provider0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MacroTransformationContext macroTransformationContext2 = new MacroTransformationContext();
      MacroTransformationContext macroTransformationContext3 = macroTransformationContext2.clone();
      MacroTransformationContext macroTransformationContext4 = new MacroTransformationContext();
      TocMacroParameters tocMacroParameters0 = new TocMacroParameters();
      String string0 = "Development";
      MacroTransformationContext macroTransformationContext5 = new MacroTransformationContext();
      macroTransformationContext3.clone();
      MacroTransformationContext macroTransformationContext6 = new MacroTransformationContext();
      TocMacroParameters tocMacroParameters1 = new TocMacroParameters();
      tocMacroParameters1.setDepth(2021);
      TocMacroParameters.Scope tocMacroParameters_Scope0 = TocMacroParameters.Scope.LOCAL;
      tocMacroParameters1.setScope(tocMacroParameters_Scope0);
      MacroBlock macroBlock0 = new MacroBlock((String) null, hashMap0, ">'*N<%B", true);
      macroTransformationContext2.setCurrentMacroBlock(macroBlock0);
      MacroTransformationContext macroTransformationContext7 = macroTransformationContext2.clone();
      // Undeclared exception!
      tocMacro0.execute(tocMacroParameters1, "", macroTransformationContext7);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 26 22:27:59 UTC 2021
 */

package org.apache.commons.math.ode.events;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import org.apache.commons.math.ode.events.EventHandler;
import org.apache.commons.math.ode.events.EventState;
import org.apache.commons.math.ode.nonstiff.StepProblem;
import org.apache.commons.math.ode.sampling.DummyStepInterpolator;
import org.apache.commons.math.ode.sampling.StepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class EventState_ESTest extends EventState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      doReturn(0.0, (-15.5505943632981), 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, (-1375.612500743649), (-0.432989318), (-2145979652));
      EventHandler eventHandler1 = eventState0.getEventHandler();
      StepProblem stepProblem0 = new StepProblem((-2145979652), (-1375.612500743649), (-1375.612500743649));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2145979652);
      eventState0.stepAccepted((-0.432989318), doubleArray0);
      EventState eventState1 = new EventState(eventHandler1, 2171.59, 2.1471839816125007E9, (-2145979652));
      EventState eventState2 = new EventState(eventHandler1, (-0.432989318), (-0.432989318), (-2145979652));
      Double double0 = new Double(3302.0);
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      StepInterpolator stepInterpolator0 = dummyStepInterpolator0.copy();
      dummyStepInterpolator0.getInterpolatedDerivatives();
      eventState1.stop();
      eventState1.evaluateStep(stepInterpolator0);
  }
}

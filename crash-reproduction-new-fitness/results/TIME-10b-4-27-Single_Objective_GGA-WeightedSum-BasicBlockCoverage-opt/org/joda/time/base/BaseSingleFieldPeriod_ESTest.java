/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 27 00:12:38 UTC 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeZone;
import org.joda.time.Hours;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      CopticChronology copticChronology1 = CopticChronology.getInstance(dateTimeZone0);
      MonthDay monthDay0 = new MonthDay(dateTimeZone0);
      MonthDay monthDay1 = new MonthDay((-1889L));
      DateMidnight dateMidnight0 = DateMidnight.now(dateTimeZone0);
      Hours hours0 = Hours.EIGHT;
      CopticChronology copticChronology2 = CopticChronology.getInstance(dateTimeZone0);
      copticChronology2.get((ReadablePeriod) hours0, 0L);
      BuddhistChronology.getInstance(dateTimeZone0);
      Minutes minutes0 = Minutes.MAX_VALUE;
      hours0.plus(17);
      MonthDay monthDay2 = MonthDay.now((Chronology) copticChronology0);
      monthDay2.plus(hours0);
      copticChronology1.withZone(dateTimeZone0);
      Seconds seconds0 = Seconds.MIN_VALUE;
      Weeks weeks0 = seconds0.toStandardWeeks();
      Weeks weeks1 = Weeks.weeksBetween((ReadableInstant) dateMidnight0, (ReadableInstant) dateMidnight0);
      Months months0 = Months.TEN;
      Period period0 = new Period(weeks0, buddhistChronology0);
      // Undeclared exception!
      BaseSingleFieldPeriod.between(monthDay2, monthDay1, weeks1);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sun May 17 17:07:17 UTC 2020
 */

package org.apache.commons.math.stat.clustering;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Random;
import org.apache.commons.math.stat.clustering.Cluster;
import org.apache.commons.math.stat.clustering.EuclideanIntegerPoint;
import org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class KMeansPlusPlusClusterer_ESTest extends KMeansPlusPlusClusterer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Cluster<EuclideanIntegerPoint>> linkedList0 = new LinkedList<Cluster<EuclideanIntegerPoint>>();
      LinkedList<EuclideanIntegerPoint> linkedList1 = new LinkedList<EuclideanIntegerPoint>();
      Random random0 = new Random();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[16];
      intArray0[0] = (-836);
      intArray0[1] = (-836);
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = (-836);
      intArray0[4] = 1;
      intArray0[5] = (-836);
      intArray0[6] = (-836);
      intArray0[7] = (-836);
      EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
      euclideanIntegerPoint0.toString();
      EuclideanIntegerPoint euclideanIntegerPoint1 = new EuclideanIntegerPoint(intArray0);
      linkedList1.add(euclideanIntegerPoint0);
      EuclideanIntegerPoint euclideanIntegerPoint2 = new EuclideanIntegerPoint(intArray0);
      linkedList1.add(euclideanIntegerPoint2);
      EuclideanIntegerPoint euclideanIntegerPoint3 = new EuclideanIntegerPoint(intArray0);
      euclideanIntegerPoint3.centroidOf(linkedList1);
      EuclideanIntegerPoint euclideanIntegerPoint4 = new EuclideanIntegerPoint(intArray0);
      linkedList1.add(euclideanIntegerPoint3);
      int int0 = 1732;
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(random0);
      // Undeclared exception!
      kMeansPlusPlusClusterer0.cluster(linkedList1, (-836), (-109));
  }
}

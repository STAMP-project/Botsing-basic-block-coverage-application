/*
 * This file was automatically generated by EvoSuite
 * Sat May 16 21:11:15 UTC 2020
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class Line_ESTest extends Line_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Vector3D vector3D1 = new Vector3D(2575.599917822, 5.865827662008209E-8, 0.7249995199969751);
      Vector3D.angle(vector3D1, vector3D0);
      Line line0 = new Line(vector3D0, vector3D0);
      Line line1 = new Line(vector3D1, vector3D0);
      line0.intersection(line1);
      Vector3D vector3D2 = line1.getOrigin();
      Vector3D vector3D3 = Vector3D.crossProduct(vector3D2, vector3D1);
      Vector1D vector1D0 = line0.toSubSpace(vector3D3);
      line1.toSpace(vector1D0);
      Line line2 = new Line(vector3D0, vector3D1);
      Vector3D vector3D4 = line2.closestPoint(line1);
      Line line3 = line2.revert();
      line3.reset(vector3D4, vector3D4);
      line0.getAbscissa(vector3D4);
      // Undeclared exception!
      line1.getAbscissa((Vector3D) null);
  }
}

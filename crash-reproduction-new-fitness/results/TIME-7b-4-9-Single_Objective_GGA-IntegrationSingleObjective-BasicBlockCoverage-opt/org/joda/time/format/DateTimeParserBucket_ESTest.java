/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 30 11:04:50 UTC 2021
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.field.SkipUndoDateTimeField;
import org.joda.time.format.DateTimeParserBucket;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class DateTimeParserBucket_ESTest extends DateTimeParserBucket_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(durationField0).isSupported();
      DateTimeParserBucket.compareReverse(durationField0, durationField0);
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn((DateTimeZone) null).when(chronology0).getZone();
      doReturn((Chronology) null).when(chronology0).withUTC();
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(durationField1).isSupported();
      DateTimeParserBucket.compareReverse(durationField1, durationField1);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, chronology0, (Locale) null);
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeZone0).getOffset(anyLong());
      doReturn(0).when(dateTimeZone0).getOffsetFromLocal(anyLong());
      dateTimeParserBucket0.setZone(dateTimeZone0);
      dateTimeParserBucket0.computeMillis(false, "WVrf]u%`^(Q9");
      Locale locale0 = Locale.KOREA;
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(0);
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone1);
      DateTimeParserBucket dateTimeParserBucket1 = new DateTimeParserBucket((-1L), iSOChronology0, (Locale) null);
      DateTimeParserBucket.SavedState dateTimeParserBucket_SavedState0 = dateTimeParserBucket0.new SavedState();
      Integer integer0 = dateTimeParserBucket_SavedState0.iOffset;
      Integer.getInteger("WVrf]u%`^(Q9", (Integer) null);
      DateTimeParserBucket dateTimeParserBucket2 = new DateTimeParserBucket(86400000L, iSOChronology0, (Locale) null, (Integer) null);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone1);
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(iSOChronology0, dateTimeField0);
      dateTimeParserBucket1.saveField((DateTimeField) skipUndoDateTimeField0, 0);
      // Undeclared exception!
      dateTimeParserBucket1.computeMillis(true, "{:Eb)");
  }
}

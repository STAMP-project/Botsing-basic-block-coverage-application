/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 25 14:47:20 UTC 2021
 */

package org.apache.commons.math.estimation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.estimation.EstimatedParameter;
import org.apache.commons.math.estimation.EstimationProblem;
import org.apache.commons.math.estimation.LevenbergMarquardtEstimator;
import org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest;
import org.apache.commons.math.estimation.SimpleEstimationProblem;
import org.apache.commons.math.estimation.WeightedMeasurement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractEstimator_ESTest extends AbstractEstimator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EstimationProblem estimationProblem0 = mock(EstimationProblem.class, new ViolatedAssumptionAnswer());
      EstimationProblem estimationProblem1 = mock(EstimationProblem.class, new ViolatedAssumptionAnswer());
      LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
      LevenbergMarquardtEstimator levenbergMarquardtEstimator1 = new LevenbergMarquardtEstimator();
      double[] doubleArray0 = new double[11];
      levenbergMarquardtEstimator1.jacobian = doubleArray0;
      SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
      EstimatedParameter estimatedParameter0 = new EstimatedParameter("@COLNdc", 2886.68);
      EstimatedParameter estimatedParameter1 = new EstimatedParameter(estimatedParameter0);
      EstimatedParameter estimatedParameter2 = new EstimatedParameter(estimatedParameter1);
      estimatedParameter0.estimate = 3789.722722091097;
      EstimatedParameter estimatedParameter3 = new EstimatedParameter(estimatedParameter2);
      EstimatedParameter estimatedParameter4 = new EstimatedParameter("VBs?]6Kr i(i,g\":", 0.39, false);
      WeightedMeasurement weightedMeasurement0 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(weightedMeasurement0).getResidual();
      doReturn(0.0, 0.0, 0.0, 0.0).when(weightedMeasurement0).getWeight();
      simpleEstimationProblem0.addMeasurement(weightedMeasurement0);
      levenbergMarquardtEstimator0.setCostRelativeTolerance(2886.68);
      levenbergMarquardtEstimator1.setMaxCostEval(2);
      levenbergMarquardtEstimator0.setInitialStepBoundFactor(0.0);
      estimatedParameter1.setEstimate(719.55);
      LevenbergMarquardtEstimatorTest levenbergMarquardtEstimatorTest0 = new LevenbergMarquardtEstimatorTest("tVk}F?_");
      LevenbergMarquardtEstimatorTest.QuadraticProblem levenbergMarquardtEstimatorTest_QuadraticProblem0 = levenbergMarquardtEstimatorTest0.new QuadraticProblem();
      levenbergMarquardtEstimator0.estimate(levenbergMarquardtEstimatorTest_QuadraticProblem0);
      levenbergMarquardtEstimator1.estimate(simpleEstimationProblem0);
      simpleEstimationProblem0.addParameter(estimatedParameter4);
      // Undeclared exception!
      levenbergMarquardtEstimator1.getCovariances(simpleEstimationProblem0);
  }
}

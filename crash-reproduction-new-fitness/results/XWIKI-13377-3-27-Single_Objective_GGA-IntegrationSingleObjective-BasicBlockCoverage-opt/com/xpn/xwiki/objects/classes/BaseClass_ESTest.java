/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 28 15:01:03 UTC 2021
 */

package com.xpn.xwiki.objects.classes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.xpn.xwiki.objects.BaseCollection;
import com.xpn.xwiki.objects.BaseObject;
import com.xpn.xwiki.objects.classes.BaseClass;
import com.xpn.xwiki.objects.meta.DBTreeListMetaClass;
import com.xpn.xwiki.objects.meta.LevelsMetaClass;
import com.xpn.xwiki.objects.meta.PasswordMetaClass;
import java.util.Map;
import java.util.concurrent.ConcurrentSkipListMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class BaseClass_ESTest extends BaseClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BaseClass baseClass0 = new BaseClass();
      PasswordMetaClass passwordMetaClass0 = new PasswordMetaClass();
      BaseObject baseObject0 = mock(BaseObject.class, new ViolatedAssumptionAnswer());
      passwordMetaClass0.getDisabledObjectProperties(baseObject0);
      passwordMetaClass0.disableField("%1\"AI!AmIi=J+a`&,3_");
      ConcurrentSkipListMap<String, DBTreeListMetaClass> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, DBTreeListMetaClass>();
      BaseCollection baseCollection0 = baseClass0.fromMap((Map<String, ?>) concurrentSkipListMap0, (BaseCollection) passwordMetaClass0);
      passwordMetaClass0.addTemplateField("%1\"AI!AmIi=J+a`&,3_", "%1\"AI!AmIi=J+a`&,3_");
      passwordMetaClass0.getSetValue("");
      DBTreeListMetaClass dBTreeListMetaClass0 = new DBTreeListMetaClass();
      concurrentSkipListMap0.put("%1\"AI!AmIi=J+a`&,3_", dBTreeListMetaClass0);
      baseClass0.getValidationScript();
      String string0 = "Completed cleaning transactions originating on leavers. Remote transactions remaining: %d";
      dBTreeListMetaClass0.getField("");
      dBTreeListMetaClass0.getProperties();
      LevelsMetaClass levelsMetaClass0 = new LevelsMetaClass();
      levelsMetaClass0.toString();
      // Undeclared exception!
      passwordMetaClass0.fromMap((Map<String, ?>) concurrentSkipListMap0, (BaseCollection) baseCollection0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 26 09:43:37 UTC 2021
 */

package org.apache.commons.math3.geometry.partitioning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.Line;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.euclidean.twod.Segment;
import org.apache.commons.math3.geometry.euclidean.twod.SubLine;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.BoundaryAttribute;
import org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractRegion_ESTest extends AbstractRegion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>();
      BoundarySizeVisitor<Euclidean2D> boundarySizeVisitor0 = new BoundarySizeVisitor<Euclidean2D>();
      BSPTree.LeafMerger<Euclidean1D> bSPTree_LeafMerger0 = (BSPTree.LeafMerger<Euclidean1D>) mock(BSPTree.LeafMerger.class, new ViolatedAssumptionAnswer());
      BoundarySizeVisitor<Euclidean1D> boundarySizeVisitor1 = new BoundarySizeVisitor<Euclidean1D>();
      IntervalsSet intervalsSet0 = new IntervalsSet();
      BSPTree<Euclidean1D> bSPTree1 = new BSPTree<Euclidean1D>();
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false);
      IntervalsSet intervalsSet1 = new IntervalsSet();
      vector1D0.negate();
      Euclidean1D euclidean1D0 = Euclidean1D.getInstance();
      bSPTree1.setAttribute(euclidean1D0);
      bSPTree0.getMinus();
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Vector2D vector2D1 = new Vector2D(2703.74895, vector2D0, 2703.74895, vector2D0);
      Line line0 = new Line(vector2D1, 2703.74895);
      Segment segment0 = new Segment(vector2D0, vector2D0, line0);
      SubLine subLine0 = new SubLine(segment0);
      BoundaryAttribute<Euclidean2D> boundaryAttribute0 = new BoundaryAttribute<Euclidean2D>(subLine0, subLine0);
      BSPTree<Euclidean2D> bSPTree2 = new BSPTree<Euclidean2D>(subLine0, bSPTree0, bSPTree0, vector2D0);
      Vector2D vector2D2 = Vector2D.ZERO;
      Line line1 = new Line(vector2D1, 0.0);
      Segment segment1 = new Segment(vector2D2, vector2D0, (Line) null);
      SubLine subLine1 = new SubLine(vector2D1, vector2D0);
      boundaryAttribute0.getPlusInside();
      BSPTree<Euclidean2D> bSPTree3 = new BSPTree<Euclidean2D>(subLine1, bSPTree0, bSPTree2, vector2D1);
      BSPTree<Euclidean2D> bSPTree4 = new BSPTree<Euclidean2D>(bSPTree_LeafMerger0);
      PolygonsSet polygonsSet0 = new PolygonsSet(bSPTree4);
      // Undeclared exception!
      polygonsSet0.getSize();
  }
}

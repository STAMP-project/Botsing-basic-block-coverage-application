/*
 * This file was automatically generated by EvoSuite
 * Mon May 18 03:30:47 UTC 2020
 */

package org.apache.commons.math.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.distribution.BetaDistributionImpl;
import org.apache.commons.math.distribution.CauchyDistributionImpl;
import org.apache.commons.math.distribution.ChiSquaredDistributionImpl;
import org.apache.commons.math.distribution.FDistributionImpl;
import org.apache.commons.math.distribution.NormalDistributionImpl;
import org.apache.commons.math.distribution.TDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractContinuousDistribution_ESTest extends AbstractContinuousDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CauchyDistributionImpl cauchyDistributionImpl0 = new CauchyDistributionImpl();
      TDistributionImpl tDistributionImpl0 = new TDistributionImpl(1.8737118936752815);
      BetaDistributionImpl betaDistributionImpl0 = new BetaDistributionImpl(0.5, 1.8737118936752815);
      betaDistributionImpl0.cumulativeProbability((-59.59796035547549));
      TDistributionImpl tDistributionImpl1 = new TDistributionImpl(0.5);
      BetaDistributionImpl betaDistributionImpl1 = new BetaDistributionImpl(2362.6, 1.0E-6);
      betaDistributionImpl1.cumulativeProbability((-59.59796035547549));
      BetaDistributionImpl betaDistributionImpl2 = new BetaDistributionImpl(0.5, 3.399464998481189E-5);
      betaDistributionImpl1.inverseCumulativeProbability(0.5);
      ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(Double.NaN);
      BetaDistributionImpl betaDistributionImpl3 = new BetaDistributionImpl(3.399464998481189E-5, 0.5);
      betaDistributionImpl0.cumulativeProbability((-33.41433739711497));
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1.0, 1.0);
      // Undeclared exception!
      fDistributionImpl0.inverseCumulativeProbability(Double.NaN);
  }
}

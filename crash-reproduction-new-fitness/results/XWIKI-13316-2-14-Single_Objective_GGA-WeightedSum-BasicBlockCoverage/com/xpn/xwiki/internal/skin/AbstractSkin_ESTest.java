/*
 * This file was automatically generated by EvoSuite
 * Thu May 14 16:50:29 UTC 2020
 */

package com.xpn.xwiki.internal.skin;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.qos.logback.classic.Logger;
import com.xpn.xwiki.internal.ReadOnlyXWikiContextProvider;
import com.xpn.xwiki.internal.skin.EnvironmentSkin;
import com.xpn.xwiki.internal.skin.InternalSkinConfiguration;
import com.xpn.xwiki.internal.skin.InternalSkinManager;
import javax.print.attribute.standard.DateTimeAtCompleted;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.python.util.PyFilter;
import org.slf4j.helpers.NOPLogger;
import org.xwiki.component.embed.EmbeddableComponentManager;
import org.xwiki.configuration.ConfigurationSource;
import org.xwiki.configuration.internal.AbstractConfigurationSourceProvider;
import org.xwiki.configuration.internal.DefaultConfigurationSourceProvider;
import org.xwiki.context.Execution;
import org.xwiki.context.ExecutionContext;
import org.xwiki.environment.Environment;
import org.xwiki.model.reference.DocumentReferenceResolver;
import org.xwiki.model.reference.EntityReferenceSerializer;
import org.xwiki.model.reference.ObjectPropertyReference;
import org.xwiki.rendering.internal.syntax.DefaultSyntaxFactory;
import ucar.httpservices.CustomX509TrustManager;
import ucar.nc2.util.net.URLStreamHandlerFactory;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractSkin_ESTest extends AbstractSkin_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      InternalSkinManager internalSkinManager0 = mock(InternalSkinManager.class, new ViolatedAssumptionAnswer());
      DefaultSyntaxFactory defaultSyntaxFactory0 = new DefaultSyntaxFactory();
      Logger logger0 = (Logger)URLStreamHandlerFactory.log;
      Execution execution0 = mock(Execution.class, new ViolatedAssumptionAnswer());
      EmbeddableComponentManager embeddableComponentManager0 = new EmbeddableComponentManager();
      EmbeddableComponentManager embeddableComponentManager1 = new EmbeddableComponentManager("eF5I/Ok?]Cn0-h");
      EntityReferenceSerializer<DateTimeAtCompleted> entityReferenceSerializer0 = (EntityReferenceSerializer<DateTimeAtCompleted>) mock(EntityReferenceSerializer.class, new ViolatedAssumptionAnswer());
      Execution execution1 = mock(Execution.class, new ViolatedAssumptionAnswer());
      Execution execution2 = mock(Execution.class, new ViolatedAssumptionAnswer());
      EntityReferenceSerializer<Integer> entityReferenceSerializer1 = (EntityReferenceSerializer<Integer>) mock(EntityReferenceSerializer.class, new ViolatedAssumptionAnswer());
      ReadOnlyXWikiContextProvider readOnlyXWikiContextProvider0 = new ReadOnlyXWikiContextProvider();
      Execution execution3 = mock(Execution.class, new ViolatedAssumptionAnswer());
      doReturn((ExecutionContext) null, (ExecutionContext) null).when(execution3).getContext();
      Injector.inject(readOnlyXWikiContextProvider0, (Class<?>) ReadOnlyXWikiContextProvider.class, "execution", (Object) execution3);
      Injector.validateBean(readOnlyXWikiContextProvider0, (Class<?>) ReadOnlyXWikiContextProvider.class);
      readOnlyXWikiContextProvider0.get();
      readOnlyXWikiContextProvider0.get();
      DefaultConfigurationSourceProvider defaultConfigurationSourceProvider0 = new DefaultConfigurationSourceProvider();
      Injector.inject(defaultConfigurationSourceProvider0, (Class<?>) AbstractConfigurationSourceProvider.class, "componentManager", (Object) embeddableComponentManager0);
      Injector.validateBean(defaultConfigurationSourceProvider0, (Class<?>) DefaultConfigurationSourceProvider.class);
      defaultConfigurationSourceProvider0.get();
      defaultConfigurationSourceProvider0.get();
      DocumentReferenceResolver<DefaultTableModel> documentReferenceResolver0 = (DocumentReferenceResolver<DefaultTableModel>) mock(DocumentReferenceResolver.class, new ViolatedAssumptionAnswer());
      Logger logger1 = (Logger)CustomX509TrustManager.logger;
      EntityReferenceSerializer<PyFilter> entityReferenceSerializer2 = (EntityReferenceSerializer<PyFilter>) mock(EntityReferenceSerializer.class, new ViolatedAssumptionAnswer());
      defaultConfigurationSourceProvider0.get();
      DocumentReferenceResolver<ObjectPropertyReference> documentReferenceResolver1 = (DocumentReferenceResolver<ObjectPropertyReference>) mock(DocumentReferenceResolver.class, new ViolatedAssumptionAnswer());
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      EntityReferenceSerializer<DefaultTableModel> entityReferenceSerializer3 = (EntityReferenceSerializer<DefaultTableModel>) mock(EntityReferenceSerializer.class, new ViolatedAssumptionAnswer());
      InternalSkinConfiguration internalSkinConfiguration0 = new InternalSkinConfiguration();
      ConfigurationSource configurationSource0 = defaultConfigurationSourceProvider0.get();
      Injector.inject(internalSkinConfiguration0, (Class<?>) InternalSkinConfiguration.class, "xwikicfg", (Object) configurationSource0);
      Injector.validateBean(internalSkinConfiguration0, (Class<?>) InternalSkinConfiguration.class);
      EnvironmentSkin environmentSkin0 = new EnvironmentSkin("", internalSkinManager0, internalSkinConfiguration0, logger0, defaultSyntaxFactory0, (Environment) null, readOnlyXWikiContextProvider0);
      // Undeclared exception!
      environmentSkin0.getOutputSyntax();
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 28 09:46:27 UTC 2021
 */

package org.apache.commons.math.estimation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.estimation.EstimatedParameter;
import org.apache.commons.math.estimation.LevenbergMarquardtEstimator;
import org.apache.commons.math.estimation.SimpleEstimationProblem;
import org.apache.commons.math.estimation.WeightedMeasurement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractEstimator_ESTest extends AbstractEstimator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
      WeightedMeasurement weightedMeasurement0 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(weightedMeasurement0).getResidual();
      doReturn(0.0).when(weightedMeasurement0).getWeight();
      simpleEstimationProblem0.addMeasurement(weightedMeasurement0);
      simpleEstimationProblem0.getAllParameters();
      EstimatedParameter estimatedParameter0 = new EstimatedParameter("'W^L5%8fsQc0B", (-2351.9667685));
      EstimatedParameter estimatedParameter1 = new EstimatedParameter("'W^L5%8fsQc0B", (-2351.9667685));
      estimatedParameter1.estimate = 0.0;
      estimatedParameter1.setEstimate(0.1735);
      simpleEstimationProblem0.getMeasurements();
      simpleEstimationProblem0.addParameter(estimatedParameter1);
      WeightedMeasurement weightedMeasurement1 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(weightedMeasurement1).getResidual();
      doReturn(0.0).when(weightedMeasurement1).getWeight();
      simpleEstimationProblem0.addMeasurement(weightedMeasurement1);
      LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
      levenbergMarquardtEstimator0.getRMS(simpleEstimationProblem0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1787.4027959403772);
      levenbergMarquardtEstimator0.jacobian = doubleArray0;
      double[] doubleArray1 = new double[4];
      doubleArray1[1] = 0.0;
      levenbergMarquardtEstimator0.setInitialStepBoundFactor(0.0);
      levenbergMarquardtEstimator0.setParRelativeTolerance(0.0);
      levenbergMarquardtEstimator0.updateResidualsAndCost();
      levenbergMarquardtEstimator0.updateResidualsAndCost();
      levenbergMarquardtEstimator0.getCostEvaluations();
      levenbergMarquardtEstimator0.setCostRelativeTolerance(0.0);
      // Undeclared exception!
      levenbergMarquardtEstimator0.getCovariances(simpleEstimationProblem0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 29 09:24:43 UTC 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.MonthDay;
import org.joda.time.Period;
import org.joda.time.ReadableDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.LimitChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Chronology chronology0 = buddhistChronology0.withUTC();
      MonthDay monthDay0 = MonthDay.parse("");
      LimitChronology limitChronology0 = LimitChronology.getInstance(chronology0, (ReadableDateTime) null, (ReadableDateTime) null);
      limitChronology0.getLowerLimit();
      Period period0 = new Period((ReadableInstant) null, (ReadableInstant) null);
      period0.isSupported((DurationFieldType) null);
      buddhistChronology0.add((ReadablePeriod) period0, 96L, Integer.MIN_VALUE);
      Period period1 = Period.ZERO;
      period1.withHours(Integer.MIN_VALUE);
      IslamicChronology.getInstance();
      BaseSingleFieldPeriod.between(monthDay0, monthDay0, period1);
      MonthDay monthDay1 = monthDay0.minusDays((-2205));
      MonthDay monthDay2 = monthDay1.plusMonths((-1260));
      Seconds seconds0 = Seconds.ZERO;
      Hours hours0 = Hours.MIN_VALUE;
      // Undeclared exception!
      Hours.hoursBetween((ReadablePartial) monthDay1, (ReadablePartial) monthDay2);
  }
}

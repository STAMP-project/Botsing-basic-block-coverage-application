/*
 * This file was automatically generated by EvoSuite
 * Mon May 18 00:55:29 UTC 2020
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.Plane;
import org.apache.commons.math3.geometry.euclidean.threed.Segment;
import org.apache.commons.math3.geometry.euclidean.threed.SubLine;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class SubLine_ESTest extends SubLine_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      IntervalsSet intervalsSet0 = mock(IntervalsSet.class, new ViolatedAssumptionAnswer());
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      Vector3D vector3D0 = Vector3D.NaN;
      Plane plane0 = new Plane(vector3D0, vector3D0);
      Plane plane1 = new Plane(plane0);
      Vector2D vector2D0 = plane1.toSubSpace(vector3D0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.9999;
      doubleArray0[1] = (-7.800414592973399E-9);
      Vector2D vector2D1 = new Vector2D(doubleArray0);
      org.apache.commons.math3.geometry.euclidean.twod.Line line1 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D1, vector2D0);
      org.apache.commons.math3.geometry.euclidean.twod.Line line2 = new org.apache.commons.math3.geometry.euclidean.twod.Line(line1);
      Vector2D vector2D2 = new Vector2D(0.9999, vector2D1, 847.594634867094, vector2D1, (-7.800414592973399E-9), vector2D1);
      Vector1D vector1D0 = line2.toSubSpace(vector2D2);
      Vector1D vector1D1 = new Vector1D((-3.940510424527919E-20), vector1D0, 1.494140625, vector1D0, 0.9999999999, vector1D0);
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D1, true);
      IntervalsSet intervalsSet1 = orientedPoint0.wholeSpace();
      Vector3D vector3D1 = new Vector3D(0.9999, vector3D0);
      Line line3 = new Line(vector3D1, vector3D1);
      SubLine subLine1 = new SubLine(line3, intervalsSet1);
      Segment segment0 = new Segment(vector3D1, vector3D0, line3);
      SubLine subLine2 = new SubLine(segment0);
      SubLine subLine3 = new SubLine(line3, intervalsSet1);
      SubLine subLine4 = new SubLine(segment0);
      SubLine subLine5 = new SubLine(segment0);
      // Undeclared exception!
      subLine4.intersection(subLine5, true);
  }
}

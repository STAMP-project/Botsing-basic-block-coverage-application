/*
 * This file was automatically generated by EvoSuite
 * Mon May 18 03:39:27 UTC 2020
 */

package org.apache.commons.math.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.distribution.BetaDistributionImpl;
import org.apache.commons.math.distribution.CauchyDistributionImpl;
import org.apache.commons.math.distribution.ChiSquaredDistributionImpl;
import org.apache.commons.math.distribution.FDistributionImpl;
import org.apache.commons.math.distribution.GammaDistribution;
import org.apache.commons.math.distribution.NormalDistributionImpl;
import org.apache.commons.math.distribution.WeibullDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractContinuousDistribution_ESTest extends AbstractContinuousDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CauchyDistributionImpl cauchyDistributionImpl0 = new CauchyDistributionImpl();
      CauchyDistributionImpl cauchyDistributionImpl1 = new CauchyDistributionImpl();
      CauchyDistributionImpl cauchyDistributionImpl2 = new CauchyDistributionImpl();
      CauchyDistributionImpl cauchyDistributionImpl3 = new CauchyDistributionImpl();
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      NormalDistributionImpl normalDistributionImpl1 = new NormalDistributionImpl();
      NormalDistributionImpl normalDistributionImpl2 = new NormalDistributionImpl();
      NormalDistributionImpl normalDistributionImpl3 = new NormalDistributionImpl();
      double double0 = 0.5;
      normalDistributionImpl3.setMean(0.5);
      WeibullDistributionImpl weibullDistributionImpl0 = new WeibullDistributionImpl(0.5, 0.5);
      weibullDistributionImpl0.inverseCumulativeProbability(0.5);
      double double1 = 1.0;
      BetaDistributionImpl betaDistributionImpl0 = new BetaDistributionImpl(0.5, 1.0);
      double double2 = 472.6724327530705;
      Double double3 = new Double(0.5);
      ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(0.5);
      chiSquaredDistributionImpl0.setGamma((GammaDistribution) null);
      double double4 = 2052.628851;
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(2052.628851, 1.0);
      // Undeclared exception!
      fDistributionImpl0.inverseCumulativeProbability(0.2402265069591007);
  }
}

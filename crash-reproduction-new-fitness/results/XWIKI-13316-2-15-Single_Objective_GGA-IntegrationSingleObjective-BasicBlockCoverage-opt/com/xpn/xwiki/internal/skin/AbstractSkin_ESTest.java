/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 28 20:14:31 UTC 2021
 */

package com.xpn.xwiki.internal.skin;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.qos.logback.classic.Logger;
import com.xpn.xwiki.XWikiContext;
import com.xpn.xwiki.internal.skin.EnvironmentSkin;
import com.xpn.xwiki.internal.skin.InternalSkinConfiguration;
import com.xpn.xwiki.internal.skin.InternalSkinManager;
import com.xpn.xwiki.util.XWikiStubContextProvider;
import java.time.LocalDate;
import javax.inject.Provider;
import javax.persistence.Column;
import javax.print.attribute.Attribute;
import javax.swing.JColorChooser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.hibernate.loader.custom.sql.SQLCustomQuery;
import org.junit.runner.RunWith;
import org.slf4j.helpers.NOPLogger;
import org.xwiki.bridge.DocumentAccessBridge;
import org.xwiki.component.embed.EmbeddableComponentManager;
import org.xwiki.configuration.ConfigurationSource;
import org.xwiki.configuration.internal.AbstractConfigurationSourceProvider;
import org.xwiki.configuration.internal.RestrictedConfigurationSourceProvider;
import org.xwiki.context.Execution;
import org.xwiki.environment.Environment;
import org.xwiki.model.reference.DocumentReferenceResolver;
import org.xwiki.model.reference.EntityReferenceSerializer;
import org.xwiki.rendering.internal.syntax.DefaultSyntaxFactory;
import org.xwiki.wiki.descriptor.WikiDescriptorManager;
import ucar.nc2.util.net.URLStreamHandlerFactory;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractSkin_ESTest extends AbstractSkin_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Column[] columnArray0 = new Column[10];
      EmbeddableComponentManager embeddableComponentManager0 = new EmbeddableComponentManager();
      DocumentAccessBridge documentAccessBridge0 = mock(DocumentAccessBridge.class, new ViolatedAssumptionAnswer());
      Execution execution0 = mock(Execution.class, new ViolatedAssumptionAnswer());
      Execution execution1 = mock(Execution.class, new ViolatedAssumptionAnswer());
      EntityReferenceSerializer<JColorChooser> entityReferenceSerializer0 = (EntityReferenceSerializer<JColorChooser>) mock(EntityReferenceSerializer.class, new ViolatedAssumptionAnswer());
      EntityReferenceSerializer<String> entityReferenceSerializer1 = (EntityReferenceSerializer<String>) mock(EntityReferenceSerializer.class, new ViolatedAssumptionAnswer());
      EntityReferenceSerializer<Attribute> entityReferenceSerializer2 = (EntityReferenceSerializer<Attribute>) mock(EntityReferenceSerializer.class, new ViolatedAssumptionAnswer());
      Logger logger0 = (Logger)SQLCustomQuery.log;
      Execution execution2 = mock(Execution.class, new ViolatedAssumptionAnswer());
      XWikiStubContextProvider xWikiStubContextProvider0 = mock(XWikiStubContextProvider.class, new ViolatedAssumptionAnswer());
      Execution execution3 = mock(Execution.class, new ViolatedAssumptionAnswer());
      Logger logger1 = (Logger)URLStreamHandlerFactory.log;
      DocumentReferenceResolver<Object> documentReferenceResolver0 = (DocumentReferenceResolver<Object>) mock(DocumentReferenceResolver.class, new ViolatedAssumptionAnswer());
      EmbeddableComponentManager embeddableComponentManager1 = new EmbeddableComponentManager("Faled to parse the syntax [{} con/igured by the skin [{}].");
      EmbeddableComponentManager embeddableComponentManager2 = new EmbeddableComponentManager("");
      WikiDescriptorManager wikiDescriptorManager0 = mock(WikiDescriptorManager.class, new ViolatedAssumptionAnswer());
      Execution execution4 = mock(Execution.class, new ViolatedAssumptionAnswer());
      EntityReferenceSerializer<LocalDate> entityReferenceSerializer3 = (EntityReferenceSerializer<LocalDate>) mock(EntityReferenceSerializer.class, new ViolatedAssumptionAnswer());
      DefaultSyntaxFactory defaultSyntaxFactory0 = new DefaultSyntaxFactory();
      Logger logger2 = (Logger)SQLCustomQuery.log;
      Execution execution5 = mock(Execution.class, new ViolatedAssumptionAnswer());
      InternalSkinConfiguration internalSkinConfiguration0 = new InternalSkinConfiguration();
      RestrictedConfigurationSourceProvider restrictedConfigurationSourceProvider0 = new RestrictedConfigurationSourceProvider();
      EmbeddableComponentManager embeddableComponentManager3 = new EmbeddableComponentManager();
      Injector.inject(restrictedConfigurationSourceProvider0, (Class<?>) AbstractConfigurationSourceProvider.class, "componentManager", (Object) embeddableComponentManager3);
      Injector.validateBean(restrictedConfigurationSourceProvider0, (Class<?>) RestrictedConfigurationSourceProvider.class);
      ConfigurationSource configurationSource0 = restrictedConfigurationSourceProvider0.get();
      Injector.inject(internalSkinConfiguration0, (Class<?>) InternalSkinConfiguration.class, "xwikicfg", (Object) configurationSource0);
      Injector.validateBean(internalSkinConfiguration0, (Class<?>) InternalSkinConfiguration.class);
      com.google.inject.Injector injector0 = mock(com.google.inject.Injector.class, new ViolatedAssumptionAnswer());
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      EnvironmentSkin environmentSkin0 = new EnvironmentSkin("Faled to parse the syntax [{} con/igured by the skin [{}].", (InternalSkinManager) null, internalSkinConfiguration0, logger0, defaultSyntaxFactory0, (Environment) null, (Provider<XWikiContext>) null);
      // Undeclared exception!
      environmentSkin0.getOutputSyntax();
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sun May 17 16:41:51 UTC 2020
 */

package org.apache.commons.math3.geometry.euclidean.twod;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.apache.commons.math3.geometry.partitioning.Transform;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class PolygonsSet_ESTest extends PolygonsSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet();
      PolygonsSet polygonsSet1 = new PolygonsSet();
      polygonsSet1.contains(polygonsSet0);
      BSPTree<Euclidean2D> bSPTree0 = polygonsSet0.getTree(false);
      polygonsSet0.isEmpty();
      polygonsSet0.copySelf();
      Transform<Euclidean2D, Euclidean1D> transform0 = (Transform<Euclidean2D, Euclidean1D>) mock(Transform.class, new ViolatedAssumptionAnswer());
      polygonsSet1.applyTransform(transform0);
      polygonsSet1.computeGeometricalProperties();
      polygonsSet1.getTree(false);
      polygonsSet0.computeGeometricalProperties();
      Object object0 = new Object();
      bSPTree0.setAttribute(object0);
      SubHyperplane<Euclidean2D> subHyperplane0 = (SubHyperplane<Euclidean2D>) mock(SubHyperplane.class, new ViolatedAssumptionAnswer());
      doReturn((SubHyperplane) null).when(subHyperplane0).copySelf();
      polygonsSet1.intersection(subHyperplane0);
      Transform<Euclidean2D, Euclidean1D> transform1 = (Transform<Euclidean2D, Euclidean1D>) mock(Transform.class, new ViolatedAssumptionAnswer());
      polygonsSet1.applyTransform(transform1);
      Transform<Euclidean2D, Euclidean1D> transform2 = (Transform<Euclidean2D, Euclidean1D>) mock(Transform.class, new ViolatedAssumptionAnswer());
      polygonsSet0.applyTransform(transform2);
      // Undeclared exception!
      polygonsSet0.computeGeometricalProperties();
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 26 10:15:18 UTC 2021
 */

package org.mockito.internal.invocation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.hamcrest.core.IsInstanceOf;
import org.junit.runner.RunWith;
import org.mockito.internal.invocation.Invocation;
import org.mockito.internal.invocation.MockitoMethod;
import org.mockito.internal.invocation.realmethod.RealMethod;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class Invocation_ESTest extends Invocation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      IsInstanceOf isInstanceOf0 = new IsInstanceOf(class0);
      MockitoMethod mockitoMethod0 = mock(MockitoMethod.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(mockitoMethod0).isVarArgs();
      IsInstanceOf.instanceOf(class0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) isInstanceOf0;
      objectArray0[3] = (Object) isInstanceOf0;
      isInstanceOf0.toString();
      Invocation invocation0 = new Invocation("an instance of int", mockitoMethod0, objectArray0, 176, (RealMethod) null);
      invocation0.getSequenceNumber();
      invocation0.argumentsToMatchers();
      SQLTransientException sQLTransientException0 = new SQLTransientException("Object[]", "an instance of int", 57);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("an instance of int", "ZOG*Y(7 UH&FhJ", (-267));
      invocation0.markVerified();
      try { 
        invocation0.callRealMethod();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.internal.invocation.Invocation", e);
      }
  }
}

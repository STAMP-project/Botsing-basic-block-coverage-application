/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 26 10:16:07 UTC 2021
 */

package org.apache.commons.math.stat.clustering;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;
import org.apache.commons.math.stat.clustering.Cluster;
import org.apache.commons.math.stat.clustering.EuclideanIntegerPoint;
import org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class KMeansPlusPlusClusterer_ESTest extends KMeansPlusPlusClusterer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<EuclideanIntegerPoint> linkedList0 = new LinkedList<EuclideanIntegerPoint>();
      LinkedList<EuclideanIntegerPoint> linkedList1 = new LinkedList<EuclideanIntegerPoint>();
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>((Random) null);
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer1 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>((Random) null);
      Random random0 = new Random(1);
      KMeansPlusPlusClusterer<EuclideanIntegerPoint> kMeansPlusPlusClusterer2 = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(random0);
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1455;
      intArray0[2] = 0;
      intArray0[3] = Integer.MAX_VALUE;
      intArray0[4] = 1455;
      intArray0[5] = (-18);
      intArray0[6] = (-3172);
      intArray0[7] = 0;
      intArray0[8] = 1970;
      EuclideanIntegerPoint euclideanIntegerPoint0 = new EuclideanIntegerPoint(intArray0);
      Cluster<EuclideanIntegerPoint> cluster0 = new Cluster<EuclideanIntegerPoint>(euclideanIntegerPoint0);
      cluster0.addPoint(euclideanIntegerPoint0);
      List<EuclideanIntegerPoint> list0 = cluster0.getPoints();
      cluster0.addPoint(euclideanIntegerPoint0);
      cluster0.addPoint(euclideanIntegerPoint0);
      euclideanIntegerPoint0.toString();
      // Undeclared exception!
      kMeansPlusPlusClusterer2.cluster(list0, (-708), (-1));
  }
}

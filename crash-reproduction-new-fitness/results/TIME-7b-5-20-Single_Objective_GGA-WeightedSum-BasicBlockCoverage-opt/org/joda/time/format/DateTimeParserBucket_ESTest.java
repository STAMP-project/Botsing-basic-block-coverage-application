/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 27 16:36:43 UTC 2021
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.chrono.GJChronology;
import org.joda.time.format.DateTimeParserBucket;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class DateTimeParserBucket_ESTest extends DateTimeParserBucket_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(durationField0).isSupported();
      DateTimeParserBucket.compareReverse(durationField0, durationField0);
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(durationField1).isSupported();
      DurationField durationField2 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(durationField2).isSupported();
      DateTimeParserBucket.compareReverse(durationField1, durationField2);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      int int0 = 9;
      GJChronology gJChronology0 = GJChronology.getInstance();
      Chronology chronology0 = gJChronology0.withZone((DateTimeZone) null);
      Locale locale0 = Locale.CHINA;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(9, chronology0, locale0);
      String string0 = "Yh";
      DateTimeZone dateTimeZone0 = chronology0.getZone();
      Chronology chronology1 = gJChronology0.withZone(dateTimeZone0);
      Locale locale1 = Locale.CHINA;
      DateTimeParserBucket dateTimeParserBucket1 = new DateTimeParserBucket(0, chronology1, locale0);
      dateTimeParserBucket0.saveField(dateTimeFieldType0, (String) null, locale1);
      // Undeclared exception!
      dateTimeParserBucket0.computeMillis(false, "Yh");
  }
}

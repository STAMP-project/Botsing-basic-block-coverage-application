/*
 * This file was automatically generated by EvoSuite
 * Mon May 18 15:54:45 UTC 2020
 */

package com.xpn.xwiki.store.hibernate.query;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.xpn.xwiki.store.hibernate.query.HqlQueryExecutor;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.SimpleTimeZone;
import java.util.concurrent.ConcurrentHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.hibernate.engine.NamedSQLQueryDefinition;
import org.hibernate.engine.SessionImplementor;
import org.hibernate.engine.query.OrdinalParameterDescriptor;
import org.hibernate.engine.query.ParameterMetadata;
import org.hibernate.impl.CollectionFilterImpl;
import org.hibernate.type.BigIntegerType;
import org.hibernate.type.TextType;
import org.junit.runner.RunWith;
import org.xwiki.component.embed.EmbeddableComponentManager;
import org.xwiki.component.internal.ContextComponentManager;
import org.xwiki.query.Query;
import org.xwiki.query.QueryParameter;
import org.xwiki.query.internal.DefaultQuery;
import org.xwiki.query.internal.LanguageQueryFilter;
import org.xwiki.query.internal.ScriptQuery;
import org.xwiki.query.internal.ScriptQueryParameter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class HqlQueryExecutor_ESTest extends HqlQueryExecutor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HqlQueryExecutor hqlQueryExecutor0 = new HqlQueryExecutor();
      DefaultQuery defaultQuery0 = new DefaultQuery(",order by", hqlQueryExecutor0);
      LanguageQueryFilter languageQueryFilter0 = new LanguageQueryFilter();
      Query query0 = defaultQuery0.bindValue("3f0ofn", (Object) languageQueryFilter0);
      EmbeddableComponentManager embeddableComponentManager0 = new EmbeddableComponentManager();
      embeddableComponentManager0.getParent();
      ScriptQuery scriptQuery0 = new ScriptQuery(query0, embeddableComponentManager0);
      ScriptQueryParameter scriptQueryParameter0 = new ScriptQueryParameter(scriptQuery0, (QueryParameter) null);
      Query query1 = scriptQueryParameter0.query();
      SessionImplementor sessionImplementor0 = mock(SessionImplementor.class, new ViolatedAssumptionAnswer());
      OrdinalParameterDescriptor[] ordinalParameterDescriptorArray0 = new OrdinalParameterDescriptor[4];
      BigIntegerType bigIntegerType0 = BigIntegerType.INSTANCE;
      OrdinalParameterDescriptor ordinalParameterDescriptor0 = new OrdinalParameterDescriptor((-3427), bigIntegerType0, (-3427));
      ordinalParameterDescriptorArray0[0] = ordinalParameterDescriptor0;
      TextType textType0 = new TextType();
      OrdinalParameterDescriptor ordinalParameterDescriptor1 = new OrdinalParameterDescriptor((-3427), textType0, 0);
      ordinalParameterDescriptorArray0[1] = ordinalParameterDescriptor1;
      OrdinalParameterDescriptor ordinalParameterDescriptor2 = new OrdinalParameterDescriptor(0, textType0, 1710);
      ordinalParameterDescriptorArray0[2] = ordinalParameterDescriptor2;
      OrdinalParameterDescriptor ordinalParameterDescriptor3 = new OrdinalParameterDescriptor((-3427), textType0, 0);
      ordinalParameterDescriptorArray0[3] = ordinalParameterDescriptor3;
      ConcurrentHashMap<NamedSQLQueryDefinition, ContextComponentManager> concurrentHashMap0 = new ConcurrentHashMap<NamedSQLQueryDefinition, ContextComponentManager>();
      ParameterMetadata parameterMetadata0 = new ParameterMetadata(ordinalParameterDescriptorArray0, concurrentHashMap0);
      CollectionFilterImpl collectionFilterImpl0 = new CollectionFilterImpl("g", "g", sessionImplementor0, parameterMetadata0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(232, ",order by");
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(simpleTimeZone0);
      org.hibernate.Query query2 = collectionFilterImpl0.setCalendarDate(0, (Calendar) gregorianCalendar0);
      // Undeclared exception!
      hqlQueryExecutor0.populateParameters(query2, query1);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 26 09:54:49 UTC 2021
 */

package org.apache.commons.math3.geometry.partitioning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.AffineTransform;
import java.util.LinkedList;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.Plane;
import org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.Line;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.partitioning.AbstractRegion;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.apache.commons.math3.geometry.partitioning.Transform;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractRegion_ESTest extends AbstractRegion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BoundarySizeVisitor<Euclidean1D> boundarySizeVisitor0 = new BoundarySizeVisitor<Euclidean1D>();
      Euclidean1D.getInstance();
      Euclidean3D.getInstance();
      IntervalsSet intervalsSet0 = new IntervalsSet();
      IntervalsSet intervalsSet1 = new IntervalsSet();
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      Vector3D vector3D0 = Vector3D.PLUS_K;
      vector3D0.getNorm1();
      Vector3D vector3D1 = Vector3D.MINUS_K;
      Plane plane0 = new Plane(vector3D0);
      PolyhedronsSet polyhedronsSet0 = plane0.wholeSpace();
      vector3D1.add((Vector<Euclidean3D>) vector3D0);
      vector3D0.getSpace();
      BSPTree<Euclidean3D> bSPTree0 = new BSPTree<Euclidean3D>();
      bSPTree0.getCell(vector3D1);
      BSPTree<Euclidean3D> bSPTree1 = null;
      bSPTree0.setAttribute(linkedList0);
      Transform<Euclidean3D, Euclidean2D> transform0 = (Transform<Euclidean3D, Euclidean2D>) mock(Transform.class, new ViolatedAssumptionAnswer());
      polyhedronsSet0.applyTransform(transform0);
      AbstractRegion<Euclidean3D, Euclidean2D> abstractRegion0 = new PolyhedronsSet();
      BSPTree.LeafMerger<Euclidean3D> bSPTree_LeafMerger0 = (BSPTree.LeafMerger<Euclidean3D>) mock(BSPTree.LeafMerger.class, new ViolatedAssumptionAnswer());
      doReturn((BSPTree) null).when(bSPTree_LeafMerger0).merge(nullable(org.apache.commons.math3.geometry.partitioning.BSPTree.class) , nullable(org.apache.commons.math3.geometry.partitioning.BSPTree.class) , nullable(org.apache.commons.math3.geometry.partitioning.BSPTree.class) , anyBoolean() , anyBoolean());
      bSPTree0.merge((BSPTree<Euclidean3D>) null, bSPTree_LeafMerger0);
      polyhedronsSet0.buildNew(bSPTree0);
      polyhedronsSet0.side(plane0);
      BSPTree<Euclidean2D> bSPTree2 = new BSPTree<Euclidean2D>(intervalsSet0);
      PolygonsSet polygonsSet0 = new PolygonsSet(bSPTree2);
      intervalsSet0.asList();
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(6440.0, 6440.0, 1.0);
      affineTransform0.getType();
      polygonsSet0.buildNew(bSPTree2);
      Line.getTransform(affineTransform0);
      // Undeclared exception!
      polygonsSet0.getSize();
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Thu May 14 12:15:29 UTC 2020
 */

package org.apache.commons.math3.geometry.euclidean.twod;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.Line;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.euclidean.twod.SubLine;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class PolygonsSet_ESTest extends PolygonsSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet();
      Vector2D vector2D0 = Vector2D.NaN;
      Vector2D vector2D1 = new Vector2D(3991.2604540384873, vector2D0, (-889.357), vector2D0);
      Vector2D vector2D2 = new Vector2D(3991.2604540384873, vector2D1, 3991.2604540384873, vector2D0, 488.0, vector2D1, 3991.2604540384873, vector2D1);
      Vector2D vector2D3 = new Vector2D(3991.2604540384873, vector2D2, (-2193.0532383810364), vector2D2, 3991.2604540384873, vector2D0);
      Line line0 = new Line(vector2D3, 5132.5724900858);
      Line line1 = new Line(line0);
      SubLine subLine0 = line1.wholeHyperplane();
      SubHyperplane<Euclidean2D> subHyperplane0 = polygonsSet0.intersection(subLine0);
      BSPTree<Euclidean2D> bSPTree0 = (BSPTree<Euclidean2D>) mock(BSPTree.class, new ViolatedAssumptionAnswer());
      doReturn("EXP_FRAC_TABLE_A").when(bSPTree0).getAttribute();
      doReturn(subHyperplane0, (SubHyperplane) null).when(bSPTree0).getCut();
      PolygonsSet polygonsSet1 = new PolygonsSet(bSPTree0);
      polygonsSet0.isEmpty();
      // Undeclared exception!
      polygonsSet1.computeGeometricalProperties();
  }
}

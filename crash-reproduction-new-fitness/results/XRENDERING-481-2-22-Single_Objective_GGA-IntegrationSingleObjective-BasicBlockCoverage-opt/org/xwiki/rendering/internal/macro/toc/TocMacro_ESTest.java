/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 29 13:33:51 UTC 2021
 */

package org.xwiki.rendering.internal.macro.toc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Map;
import javax.inject.Provider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.xwiki.component.descriptor.ComponentDescriptor;
import org.xwiki.component.descriptor.DefaultComponentDependency;
import org.xwiki.component.descriptor.DefaultComponentDescriptor;
import org.xwiki.component.embed.EmbeddableComponentManager;
import org.xwiki.filter.xml.serializer.XMLSerializerFactory;
import org.xwiki.properties.BeanManager;
import org.xwiki.rendering.block.ExpandedMacroBlock;
import org.xwiki.rendering.block.ListItemBlock;
import org.xwiki.rendering.block.NewLineBlock;
import org.xwiki.rendering.block.QuotationBlock;
import org.xwiki.rendering.internal.macro.toc.TocMacro;
import org.xwiki.rendering.internal.parser.plain.PlainTextBlockParser;
import org.xwiki.rendering.internal.renderer.AbstractBlockRenderer;
import org.xwiki.rendering.internal.renderer.DefaultLinkLabelGenerator;
import org.xwiki.rendering.internal.renderer.plain.PlainTextBlockRenderer;
import org.xwiki.rendering.listener.Listener;
import org.xwiki.rendering.macro.AbstractMacro;
import org.xwiki.rendering.macro.toc.TocMacroParameters;
import org.xwiki.rendering.transformation.MacroTransformationContext;
import org.xwiki.rendering.xdomxmlcurrent.internal.renderer.XDOMXMLRenderer;
import org.xwiki.rendering.xml.internal.renderer.AbstractStreamRendererFactory;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class TocMacro_ESTest extends TocMacro_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BeanManager beanManager0 = mock(BeanManager.class, new ViolatedAssumptionAnswer());
      ComponentDescriptor<NewLineBlock> componentDescriptor0 = (ComponentDescriptor<NewLineBlock>) mock(ComponentDescriptor.class, new ViolatedAssumptionAnswer());
      MacroTransformationContext macroTransformationContext0 = new MacroTransformationContext();
      DefaultComponentDependency<QuotationBlock> defaultComponentDependency0 = new DefaultComponentDependency<QuotationBlock>();
      DefaultComponentDependency<QuotationBlock> defaultComponentDependency1 = new DefaultComponentDependency<QuotationBlock>();
      Map<String, String> map0 = Listener.EMPTY_PARAMETERS;
      PlainTextBlockRenderer plainTextBlockRenderer0 = new PlainTextBlockRenderer();
      XDOMXMLRenderer xDOMXMLRenderer0 = new XDOMXMLRenderer();
      XMLSerializerFactory xMLSerializerFactory0 = mock(XMLSerializerFactory.class, new ViolatedAssumptionAnswer());
      Injector.inject(xDOMXMLRenderer0, (Class<?>) XDOMXMLRenderer.class, "serializerFactory", (Object) xMLSerializerFactory0);
      EmbeddableComponentManager embeddableComponentManager0 = new EmbeddableComponentManager("`=*lI>UK;[Dp");
      Injector.inject(xDOMXMLRenderer0, (Class<?>) AbstractStreamRendererFactory.class, "componentManager", (Object) embeddableComponentManager0);
      Injector.validateBean(xDOMXMLRenderer0, (Class<?>) XDOMXMLRenderer.class);
      Injector.inject(plainTextBlockRenderer0, (Class<?>) PlainTextBlockRenderer.class, "plainTextRendererFactory", (Object) xDOMXMLRenderer0);
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      Injector.inject(plainTextBlockRenderer0, (Class<?>) AbstractBlockRenderer.class, "logger", (Object) logger0);
      Injector.validateBean(plainTextBlockRenderer0, (Class<?>) PlainTextBlockRenderer.class);
      ExpandedMacroBlock expandedMacroBlock0 = new ExpandedMacroBlock("LRU", map0, plainTextBlockRenderer0, true);
      macroTransformationContext0.setCurrentMacroBlock(expandedMacroBlock0);
      TocMacroParameters tocMacroParameters0 = new TocMacroParameters();
      DefaultComponentDescriptor<ListItemBlock> defaultComponentDescriptor0 = new DefaultComponentDescriptor<ListItemBlock>();
      DefaultComponentDescriptor<ListItemBlock> defaultComponentDescriptor1 = new DefaultComponentDescriptor<ListItemBlock>();
      tocMacroParameters0.setDepth(0);
      PlainTextBlockParser plainTextBlockParser0 = new PlainTextBlockParser();
      DefaultComponentDependency<QuotationBlock> defaultComponentDependency2 = new DefaultComponentDependency<QuotationBlock>();
      DefaultComponentDependency<QuotationBlock> defaultComponentDependency3 = new DefaultComponentDependency<QuotationBlock>();
      DefaultComponentDescriptor<ListItemBlock> defaultComponentDescriptor2 = new DefaultComponentDescriptor<ListItemBlock>();
      DefaultComponentDescriptor<ListItemBlock> defaultComponentDescriptor3 = new DefaultComponentDescriptor<ListItemBlock>();
      macroTransformationContext0.clone();
      TocMacro tocMacro0 = new TocMacro();
      DefaultLinkLabelGenerator defaultLinkLabelGenerator0 = new DefaultLinkLabelGenerator();
      Injector.inject(tocMacro0, (Class<?>) TocMacro.class, "linkLabelGenerator", (Object) defaultLinkLabelGenerator0);
      Injector.inject(tocMacro0, (Class<?>) TocMacro.class, "plainTextParser", (Object) plainTextBlockParser0);
      Provider<Integer> provider0 = (Provider<Integer>) mock(Provider.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(provider0).get();
      Injector.inject(tocMacro0, (Class<?>) TocMacro.class, "wikiModelProvider", (Object) provider0);
      Injector.inject(tocMacro0, (Class<?>) AbstractMacro.class, "beanManager", (Object) beanManager0);
      Injector.inject(tocMacro0, (Class<?>) AbstractMacro.class, "componentDescriptor", (Object) defaultComponentDescriptor0);
      Injector.validateBean(tocMacro0, (Class<?>) TocMacro.class);
      TocMacroParameters.Scope tocMacroParameters_Scope0 = TocMacroParameters.Scope.LOCAL;
      tocMacroParameters0.setScope(tocMacroParameters_Scope0);
      // Undeclared exception!
      tocMacro0.execute(tocMacroParameters0, "", macroTransformationContext0);
  }
}

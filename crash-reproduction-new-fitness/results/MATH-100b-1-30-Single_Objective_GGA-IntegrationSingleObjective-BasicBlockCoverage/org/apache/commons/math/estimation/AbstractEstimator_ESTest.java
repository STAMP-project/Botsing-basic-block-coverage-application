/*
 * This file was automatically generated by EvoSuite
 * Sun May 17 16:07:01 UTC 2020
 */

package org.apache.commons.math.estimation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.estimation.GaussNewtonEstimator;
import org.apache.commons.math.estimation.LevenbergMarquardtEstimator;
import org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest;
import org.apache.commons.math.estimation.WeightedMeasurement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractEstimator_ESTest extends AbstractEstimator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      GaussNewtonEstimator gaussNewtonEstimator0 = new GaussNewtonEstimator(48, 13.695727317134477, 48);
      LevenbergMarquardtEstimatorTest levenbergMarquardtEstimatorTest0 = new LevenbergMarquardtEstimatorTest("MatD is s>ingular.");
      LevenbergMarquardtEstimatorTest.QuadraticProblem levenbergMarquardtEstimatorTest_QuadraticProblem0 = levenbergMarquardtEstimatorTest0.new QuadraticProblem();
      gaussNewtonEstimator0.initializeEstimate(levenbergMarquardtEstimatorTest_QuadraticProblem0);
      LevenbergMarquardtEstimatorTest.QuadraticProblem levenbergMarquardtEstimatorTest_QuadraticProblem1 = levenbergMarquardtEstimatorTest0.new QuadraticProblem();
      gaussNewtonEstimator0.getRMS(levenbergMarquardtEstimatorTest_QuadraticProblem1);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 13.695727317134477;
      doubleArray0[1] = (double) 48;
      doubleArray0[2] = 0.597;
      doubleArray0[3] = (double) 48;
      doubleArray0[4] = 13.695727317134477;
      doubleArray0[5] = 13.695727317134477;
      doubleArray0[6] = (double) 48;
      gaussNewtonEstimator0.residuals = doubleArray0;
      LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
      levenbergMarquardtEstimator0.setParRelativeTolerance(48);
      gaussNewtonEstimator0.getCostEvaluations();
      levenbergMarquardtEstimator0.setInitialStepBoundFactor(Double.NaN);
      WeightedMeasurement weightedMeasurement0 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(weightedMeasurement0).getResidual();
      doReturn(0.0).when(weightedMeasurement0).getWeight();
      levenbergMarquardtEstimatorTest_QuadraticProblem1.addMeasurement(weightedMeasurement0);
      levenbergMarquardtEstimator0.setCostRelativeTolerance(0.0);
      gaussNewtonEstimator0.getChiSquare(levenbergMarquardtEstimatorTest_QuadraticProblem1);
      // Undeclared exception!
      gaussNewtonEstimator0.getCovariances(levenbergMarquardtEstimatorTest_QuadraticProblem1);
  }
}

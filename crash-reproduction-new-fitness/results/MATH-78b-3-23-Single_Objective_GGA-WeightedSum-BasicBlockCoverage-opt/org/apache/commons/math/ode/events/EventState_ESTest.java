/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 26 22:27:47 UTC 2021
 */

package org.apache.commons.math.ode.events;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.events.EventHandler;
import org.apache.commons.math.ode.events.EventState;
import org.apache.commons.math.ode.nonstiff.StepProblem;
import org.apache.commons.math.ode.sampling.StepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class EventState_ESTest extends EventState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 87.68161161778485, 1512.2462351, Double.NaN, 87.68161161778485).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, 0.0, (-5.765518145910006), 46);
      double[] doubleArray0 = new double[0];
      eventState0.reinitializeBegin(46, doubleArray0);
      eventState0.getEventTime();
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = 87.68161161778485;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) 46;
      doubleArray1[4] = Double.NaN;
      doubleArray1[5] = 87.68161161778485;
      doubleArray1[6] = (-5.765518145910006);
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(stepInterpolator0).getCurrentTime();
      doReturn((Object) null, (Object) doubleArray1, (Object) doubleArray1, (Object) doubleArray1, (Object) doubleArray0).when(stepInterpolator0).getInterpolatedState();
      doReturn(false, false).when(stepInterpolator0).isForward();
      eventState0.stop();
      StepInterpolator stepInterpolator1 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      StepProblem stepProblem0 = new StepProblem(795.95, 1857.81113238001, (-5.765518145910006));
      // Undeclared exception!
      eventState0.evaluateStep(stepInterpolator0);
  }
}

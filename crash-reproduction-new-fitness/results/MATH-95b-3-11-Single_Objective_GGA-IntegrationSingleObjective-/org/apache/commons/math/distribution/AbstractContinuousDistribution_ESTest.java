/*
 * This file was automatically generated by EvoSuite
 * Sat May 16 23:12:20 UTC 2020
 */

package org.apache.commons.math.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.distribution.ChiSquaredDistributionImpl;
import org.apache.commons.math.distribution.FDistributionImpl;
import org.apache.commons.math.distribution.GammaDistributionImpl;
import org.apache.commons.math.distribution.NormalDistributionImpl;
import org.apache.commons.math.distribution.TDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractContinuousDistribution_ESTest extends AbstractContinuousDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1091.1318924210304, 1091.1318924210304);
      fDistributionImpl0.cumulativeProbability((-165.8104), 0.0);
      Double double0 = new Double((-2790.7));
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      Double double1 = new Double(1.0E-6);
      Double double2 = new Double(0.5);
      fDistributionImpl0.setNumeratorDegreesOfFreedom(244.95521230601236);
      fDistributionImpl0.setNumeratorDegreesOfFreedom(0.5);
      Double.min(0.0, (-1.0));
      Double double3 = new Double(244.95521230601236);
      fDistributionImpl0.getDenominatorDegreesOfFreedom();
      TDistributionImpl tDistributionImpl0 = new TDistributionImpl(2114.78294674555);
      tDistributionImpl0.getDomainLowerBound(6.283185307179586);
      fDistributionImpl0.inverseCumulativeProbability(1.0E-6);
      GammaDistributionImpl gammaDistributionImpl0 = new GammaDistributionImpl(0.5, 2864.2);
      ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(Double.POSITIVE_INFINITY, gammaDistributionImpl0);
      // Undeclared exception!
      chiSquaredDistributionImpl0.inverseCumulativeProbability(0.5);
  }
}

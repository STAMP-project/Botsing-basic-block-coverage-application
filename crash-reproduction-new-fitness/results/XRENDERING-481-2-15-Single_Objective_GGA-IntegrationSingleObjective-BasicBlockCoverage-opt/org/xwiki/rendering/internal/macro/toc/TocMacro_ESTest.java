/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 29 12:38:40 UTC 2021
 */

package org.xwiki.rendering.internal.macro.toc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Button;
import java.lang.reflect.Type;
import java.util.Map;
import javax.inject.Provider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.xwiki.component.descriptor.DefaultComponentDescriptor;
import org.xwiki.component.embed.EmbeddableComponentManager;
import org.xwiki.rendering.block.DefinitionTermBlock;
import org.xwiki.rendering.block.ExpandedMacroBlock;
import org.xwiki.rendering.block.MetaDataBlock;
import org.xwiki.rendering.internal.macro.toc.TocMacro;
import org.xwiki.rendering.internal.parser.AbstractBlockParser;
import org.xwiki.rendering.internal.parser.plain.PlainTextBlockParser;
import org.xwiki.rendering.internal.renderer.DefaultLinkLabelGenerator;
import org.xwiki.rendering.macro.box.BoxMacroParameters;
import org.xwiki.rendering.macro.toc.TocMacroParameters;
import org.xwiki.rendering.renderer.BlockRenderer;
import org.xwiki.rendering.transformation.MacroTransformationContext;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class TocMacro_ESTest extends TocMacro_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      classLoader0.setPackageAssertionStatus("", false);
      classLoader1.getParent();
      classLoader0.clearAssertionStatus();
      Provider<DefinitionTermBlock> provider0 = (Provider<DefinitionTermBlock>) mock(Provider.class, new ViolatedAssumptionAnswer());
      DefaultComponentDescriptor<MetaDataBlock> defaultComponentDescriptor0 = new DefaultComponentDescriptor<MetaDataBlock>();
      Class<MetaDataBlock> class0 = MetaDataBlock.class;
      TocMacroParameters tocMacroParameters0 = new TocMacroParameters();
      TocMacro tocMacro0 = new TocMacro();
      DefaultLinkLabelGenerator defaultLinkLabelGenerator0 = new DefaultLinkLabelGenerator();
      Injector.inject(tocMacro0, (Class<?>) TocMacro.class, "linkLabelGenerator", (Object) defaultLinkLabelGenerator0);
      PlainTextBlockParser plainTextBlockParser0 = new PlainTextBlockParser();
      EmbeddableComponentManager embeddableComponentManager0 = new EmbeddableComponentManager();
      BoxMacroParameters boxMacroParameters0 = new BoxMacroParameters();
      embeddableComponentManager0.hasComponent((Type) class0);
      Injector.inject(plainTextBlockParser0, (Class<?>) AbstractBlockParser.class, "componentManager", (Object) embeddableComponentManager0);
      Injector.validateBean(plainTextBlockParser0, (Class<?>) PlainTextBlockParser.class);
      TocMacroParameters.Scope tocMacroParameters_Scope0 = TocMacroParameters.Scope.LOCAL;
      tocMacroParameters0.setScope(tocMacroParameters_Scope0);
      Injector.inject(tocMacro0, (Class<?>) TocMacro.class, "plainTextParser", (Object) plainTextBlockParser0);
      Provider<Button> provider1 = (Provider<Button>) mock(Provider.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(provider1).get();
      Injector.inject(tocMacro0, (Class<?>) TocMacro.class, "wikiModelProvider", (Object) provider1);
      tocMacroParameters0.setNumbered(false);
      MacroTransformationContext macroTransformationContext0 = new MacroTransformationContext();
      MacroTransformationContext macroTransformationContext1 = macroTransformationContext0.clone();
      tocMacro0.supportsInlineMode();
      Map<String, String> map0 = embeddableComponentManager0.getInstanceMap((Type) class0);
      ExpandedMacroBlock expandedMacroBlock0 = new ExpandedMacroBlock("", map0, (BlockRenderer) null, false);
      macroTransformationContext1.setCurrentMacroBlock(expandedMacroBlock0);
      // Undeclared exception!
      tocMacro0.execute(tocMacroParameters0, "oB01", macroTransformationContext1);
  }
}

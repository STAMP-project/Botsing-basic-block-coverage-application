/*
 * This file was automatically generated by EvoSuite
 * Sat May 16 11:43:26 UTC 2020
 */

package org.apache.commons.math.estimation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.estimation.EstimatedParameter;
import org.apache.commons.math.estimation.LevenbergMarquardtEstimator;
import org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest;
import org.apache.commons.math.estimation.SimpleEstimationProblem;
import org.apache.commons.math.estimation.WeightedMeasurement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractEstimator_ESTest extends AbstractEstimator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
      LevenbergMarquardtEstimatorTest levenbergMarquardtEstimatorTest0 = new LevenbergMarquardtEstimatorTest("b");
      SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
      levenbergMarquardtEstimator0.estimate(simpleEstimationProblem0);
      LevenbergMarquardtEstimatorTest.QuadraticProblem levenbergMarquardtEstimatorTest_QuadraticProblem0 = levenbergMarquardtEstimatorTest0.new QuadraticProblem();
      EstimatedParameter estimatedParameter0 = new EstimatedParameter("W*?GA=)`d", (-1393.837185), true);
      EstimatedParameter estimatedParameter1 = new EstimatedParameter(estimatedParameter0);
      levenbergMarquardtEstimatorTest_QuadraticProblem0.addParameter(estimatedParameter1);
      levenbergMarquardtEstimatorTest_QuadraticProblem0.addPoint(0.0, (-1393.837185), 0.0);
      levenbergMarquardtEstimator0.incrementJacobianEvaluationsCounter();
      WeightedMeasurement weightedMeasurement0 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(weightedMeasurement0).getResidual();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(weightedMeasurement0).getWeight();
      simpleEstimationProblem0.addMeasurement(weightedMeasurement0);
      levenbergMarquardtEstimator0.getJacobianEvaluations();
      levenbergMarquardtEstimator0.estimate(simpleEstimationProblem0);
      levenbergMarquardtEstimator0.estimate(levenbergMarquardtEstimatorTest_QuadraticProblem0);
      levenbergMarquardtEstimator0.estimate(simpleEstimationProblem0);
      levenbergMarquardtEstimator0.setMaxCostEval(2);
      SimpleEstimationProblem simpleEstimationProblem1 = new SimpleEstimationProblem();
      levenbergMarquardtEstimator0.getRMS(simpleEstimationProblem1);
      levenbergMarquardtEstimator0.estimate(simpleEstimationProblem0);
      levenbergMarquardtEstimator0.initializeEstimate(levenbergMarquardtEstimatorTest_QuadraticProblem0);
      // Undeclared exception!
      levenbergMarquardtEstimator0.getCovariances(levenbergMarquardtEstimatorTest_QuadraticProblem0);
  }
}

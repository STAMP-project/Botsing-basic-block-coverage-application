/*
 * This file was automatically generated by EvoSuite
 * Sat May 16 12:18:04 UTC 2020
 */

package org.apache.commons.math3.geometry.euclidean.twod;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.apache.commons.math3.geometry.euclidean.threed.Plane;
import org.apache.commons.math3.geometry.euclidean.threed.SubPlane;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.Line;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.euclidean.twod.Segment;
import org.apache.commons.math3.geometry.euclidean.twod.SubLine;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.Hyperplane;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class PolygonsSet_ESTest extends PolygonsSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      PolygonsSet polygonsSet0 = new PolygonsSet(linkedList0);
      PolygonsSet polygonsSet1 = new PolygonsSet();
      BSPTree<Euclidean2D> bSPTree0 = (BSPTree<Euclidean2D>) mock(BSPTree.class, new ViolatedAssumptionAnswer());
      polygonsSet1.buildNew(bSPTree0);
      polygonsSet0.getVertices();
      Hyperplane<Euclidean2D> hyperplane0 = (Hyperplane<Euclidean2D>) mock(Hyperplane.class, new ViolatedAssumptionAnswer());
      doReturn((SubHyperplane) null).when(hyperplane0).wholeHyperplane();
      polygonsSet1.side(hyperplane0);
      PolygonsSet polygonsSet2 = new PolygonsSet();
      PolygonsSet polygonsSet3 = new PolygonsSet(0.0, 917.77507533, (-904.794819874), 289.7384);
      polygonsSet3.computeGeometricalProperties();
      PolygonsSet polygonsSet4 = new PolygonsSet(linkedList0);
      polygonsSet4.getBarycenter();
      PolygonsSet polygonsSet5 = new PolygonsSet(289.7384, 2268.134527032, 0.0, 289.7384);
      PolygonsSet polygonsSet6 = new PolygonsSet();
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Vector2D vector2D1 = new Vector2D(Double.NEGATIVE_INFINITY, vector2D0, 3661.30859540995, vector2D0, 917.77507533, vector2D0, 5454.652463952681, vector2D0);
      Line line0 = new Line(vector2D1, 908.65);
      Segment segment0 = new Segment(vector2D1, vector2D1, line0);
      SubLine subLine0 = new SubLine(segment0);
      polygonsSet6.intersection(subLine0);
      Vector3D vector3D0 = new Vector3D(0.75, 0.01745329052209854);
      Plane plane0 = new Plane(vector3D0);
      Plane plane1 = new Plane(plane0);
      SubPlane subPlane0 = new SubPlane(plane1, polygonsSet2);
      BSPTree<Euclidean2D> bSPTree1 = new BSPTree<Euclidean2D>(subPlane0);
      PolygonsSet polygonsSet7 = polygonsSet1.buildNew(bSPTree1);
      // Undeclared exception!
      polygonsSet7.computeGeometricalProperties();
  }
}

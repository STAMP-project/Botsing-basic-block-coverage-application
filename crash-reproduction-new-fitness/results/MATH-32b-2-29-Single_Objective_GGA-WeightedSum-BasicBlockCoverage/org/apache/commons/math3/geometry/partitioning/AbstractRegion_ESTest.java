/*
 * This file was automatically generated by EvoSuite
 * Sun May 17 16:53:51 UTC 2020
 */

package org.apache.commons.math3.geometry.partitioning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.Plane;
import org.apache.commons.math3.geometry.euclidean.threed.SubPlane;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractRegion_ESTest extends AbstractRegion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Euclidean1D.getInstance();
      Euclidean2D.getInstance();
      Object object0 = new Object();
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>(object0);
      Euclidean3D.getInstance();
      Euclidean1D.getInstance();
      Euclidean1D.getInstance();
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Plane plane0 = new Plane(vector3D0);
      Plane plane1 = new Plane(plane0);
      Integer integer0 = new Integer((-3408));
      BSPTree<Euclidean1D> bSPTree1 = new BSPTree<Euclidean1D>(bSPTree0);
      plane1.sameOrientationAs(plane0);
      plane1.copySelf();
      Euclidean3D.getInstance();
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Vector2D vector2D1 = new Vector2D((-3408), vector2D0, (-3408), vector2D0);
      plane0.wholeHyperplane();
      BSPTree<Euclidean2D> bSPTree2 = new BSPTree<Euclidean2D>(plane1);
      PolygonsSet polygonsSet0 = new PolygonsSet(bSPTree2);
      SubPlane subPlane0 = new SubPlane(plane0, polygonsSet0);
      // Undeclared exception!
      subPlane0.getSize();
  }
}

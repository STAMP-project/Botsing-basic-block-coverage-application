/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 26 20:11:26 UTC 2021
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class Line_ESTest extends Line_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Vector1D vector1D0 = Vector1D.ZERO;
      vector1D0.add((Vector<Euclidean1D>) vector1D0);
      Vector1D vector1D1 = Vector1D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.pointAt(0.0);
      line0.getAbscissa(vector3D0);
      line0.getAbscissa(vector3D0);
      Line line1 = new Line(line0);
      line1.revert();
      Line line2 = new Line(vector3D1, vector3D0);
      Line line3 = new Line(vector3D1, vector3D0);
      Vector1D vector1D2 = new Vector1D((-2544.0024));
      Line line4 = new Line(line3);
      Vector1D vector1D3 = new Vector1D(1.7976931348623157E308, vector1D2);
      line4.toSpace(vector1D3);
      Line line5 = new Line(line2);
      line5.toSpace(vector1D3);
      Line line6 = new Line(line0);
      line6.distance(line2);
      Vector3D vector3D2 = Vector3D.POSITIVE_INFINITY;
      Vector3D vector3D3 = new Vector3D((-2544.0024), 787.9249, Double.NaN);
      Line line7 = new Line(vector3D2, vector3D3);
      line2.getDirection();
      line2.closestPoint(line6);
      // Undeclared exception!
      line3.toSubSpace((Vector<Euclidean3D>) null);
  }
}

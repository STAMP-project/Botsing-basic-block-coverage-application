/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 27 00:14:01 GMT 2021
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDateTime;
import org.joda.time.chrono.BasicFixedMonthChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class BaseChronology_ESTest extends BaseChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      DateTimeFieldType.halfdayOfDay();
      DateTimeFieldType.era();
      UTCProvider uTCProvider0 = new UTCProvider();
      DateTimeFieldType.weekOfWeekyear();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = new LocalDateTime((-752L), (DateTimeZone) fixedDateTimeZone0);
      localDateTime0.property(dateTimeFieldType0);
      localDateTime0.withFields(localDateTime0);
      DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
      DateTimeZone.setNameProvider(defaultNameProvider0);
      DateMidnight dateMidnight0 = DateMidnight.now();
      dateMidnight0.withWeekOfWeekyear(15);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      dateMidnight0.withWeekyear(15);
      DateTimeZone.forOffsetHours(24);
      EthiopicChronology.getInstance();
      DateTimeZone.getAvailableIDs();
      int int0 = IslamicChronology.AH;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      long long0 = BasicFixedMonthChronology.MILLIS_PER_YEAR;
      gregorianChronology0.dayOfWeek();
      islamicChronology0.seconds();
      // Undeclared exception!
      islamicChronology0.set(localDateTime0, 3193L);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Mon May 18 07:14:09 UTC 2020
 */

package org.xwiki.rendering.internal.macro.toc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Map;
import java.util.Stack;
import javax.inject.Provider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.xwiki.component.descriptor.DefaultComponentDependency;
import org.xwiki.properties.BeanManager;
import org.xwiki.rendering.block.Block;
import org.xwiki.rendering.block.CompositeBlock;
import org.xwiki.rendering.block.MacroBlock;
import org.xwiki.rendering.block.MacroMarkerBlock;
import org.xwiki.rendering.block.NumberedListBlock;
import org.xwiki.rendering.block.match.MetadataBlockMatcher;
import org.xwiki.rendering.internal.macro.toc.TocMacro;
import org.xwiki.rendering.internal.parser.plain.PlainTextBlockParser;
import org.xwiki.rendering.internal.renderer.DefaultLinkLabelGenerator;
import org.xwiki.rendering.macro.AbstractMacro;
import org.xwiki.rendering.macro.toc.TocMacroParameters;
import org.xwiki.rendering.transformation.MacroTransformationContext;
import org.xwiki.xml.internal.html.DefaultHTMLCleanerConfiguration;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class TocMacro_ESTest extends TocMacro_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PlainTextBlockParser plainTextBlockParser0 = new PlainTextBlockParser();
      DefaultComponentDependency<MacroMarkerBlock> defaultComponentDependency0 = new DefaultComponentDependency<MacroMarkerBlock>();
      TocMacro tocMacro0 = new TocMacro();
      DefaultLinkLabelGenerator defaultLinkLabelGenerator0 = new DefaultLinkLabelGenerator();
      Injector.inject(tocMacro0, (Class<?>) TocMacro.class, "linkLabelGenerator", (Object) defaultLinkLabelGenerator0);
      Injector.inject(tocMacro0, (Class<?>) TocMacro.class, "plainTextParser", (Object) plainTextBlockParser0);
      Provider<NumberedListBlock> provider0 = (Provider<NumberedListBlock>) mock(Provider.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(provider0).get();
      Injector.inject(tocMacro0, (Class<?>) TocMacro.class, "wikiModelProvider", (Object) provider0);
      BeanManager beanManager0 = mock(BeanManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(tocMacro0, (Class<?>) AbstractMacro.class, "beanManager", (Object) beanManager0);
      TocMacroParameters tocMacroParameters0 = new TocMacroParameters();
      CompositeBlock compositeBlock0 = new CompositeBlock();
      MetadataBlockMatcher metadataBlockMatcher0 = new MetadataBlockMatcher("Navi0*ation");
      MacroTransformationContext macroTransformationContext0 = new MacroTransformationContext();
      MacroTransformationContext macroTransformationContext1 = macroTransformationContext0.clone();
      TocMacroParameters tocMacroParameters1 = new TocMacroParameters();
      macroTransformationContext0.clone();
      MacroTransformationContext macroTransformationContext2 = macroTransformationContext1.clone();
      MacroTransformationContext macroTransformationContext3 = macroTransformationContext2.clone();
      ArrayList<Block> arrayList0 = new ArrayList<Block>();
      tocMacro0.supportsInlineMode();
      Stack<Block> stack0 = new Stack<Block>();
      macroTransformationContext1.clone();
      DefaultHTMLCleanerConfiguration defaultHTMLCleanerConfiguration0 = new DefaultHTMLCleanerConfiguration();
      Map<String, String> map0 = defaultHTMLCleanerConfiguration0.getParameters();
      MacroBlock macroBlock0 = new MacroBlock("Maximum buffer size reached.", map0, "END_TABLE_CELL", true);
      macroTransformationContext3.setCurrentMacroBlock(macroBlock0);
      TocMacroParameters.Scope tocMacroParameters_Scope0 = TocMacroParameters.Scope.LOCAL;
      tocMacroParameters0.setScope(tocMacroParameters_Scope0);
      macroTransformationContext0.setId("Navi0*ation");
      TocMacroParameters tocMacroParameters2 = new TocMacroParameters();
      // Undeclared exception!
      tocMacro0.execute(tocMacroParameters0, "", macroTransformationContext3);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 27 00:15:05 UTC 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.Hours;
import org.joda.time.LocalDateTime;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.chrono.IslamicChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      PeriodType periodType1 = PeriodType.standard();
      periodType0.withMonthsRemoved();
      PeriodType.minutes();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3782), (-330L), periodType1);
      Integer.min((-1930), (-3782));
      Integer.compare((-3782), (-3782));
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime((long) (-3782));
      LocalDateTime localDateTime1 = LocalDateTime.now((Chronology) islamicChronology0);
      Months months0 = Months.FIVE;
      localDateTime0.plusYears((-3782));
      Weeks weeks0 = Weeks.ONE;
      months0.negated();
      Hours hours0 = Hours.ZERO;
      localDateTime1.getMillisOfDay();
      Months months1 = Months.THREE;
      months0.isLessThan(months1);
      Weeks weeks1 = Weeks.TWO;
      Seconds.secondsIn((ReadableInterval) null);
      // Undeclared exception!
      Seconds.secondsBetween((ReadablePartial) localDateTime1, (ReadablePartial) localDateTime0);
  }
}

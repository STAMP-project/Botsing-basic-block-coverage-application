/*
 * This file was automatically generated by EvoSuite
 * Fri May 15 12:20:37 UTC 2020
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.field.DelegatedDateTimeField;
import org.joda.time.format.DateTimeParserBucket;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class DateTimeParserBucket_ESTest extends DateTimeParserBucket_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(808);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      dateTimeFieldType0.getRangeDurationType();
      buddhistChronology0.seconds();
      dateTimeFieldType0.getRangeDurationType();
      delegatedDateTimeField0.getAsShortText(1383L);
      Locale locale0 = Locale.GERMAN;
      Integer integer1 = new Integer(808);
      Integer integer2 = new Integer(2783);
      Integer.divideUnsigned(808, (-1));
      Locale locale1 = Locale.KOREAN;
      dateTimeFieldType0.getDurationType();
      Integer.getInteger((String) null);
      buddhistChronology0.add(2592000000L, (long) 2783, (-1426));
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1383L, buddhistChronology0, locale0, integer2, 10);
      dateTimeParserBucket0.saveField(dateTimeFieldType0, (-1426));
      dateTimeParserBucket0.saveField(dateTimeFieldType0, (-1426));
      dateTimeParserBucket0.saveState();
      dateTimeParserBucket0.saveState();
      dateTimeParserBucket0.restoreState((Object) null);
      // Undeclared exception!
      dateTimeParserBucket0.computeMillis();
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Thu May 14 20:29:16 UTC 2020
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.Plane;
import org.apache.commons.math3.geometry.euclidean.threed.SubLine;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class SubLine_ESTest extends SubLine_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      SubLine subLine0 = new SubLine(line0, (IntervalsSet) null);
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Vector3D vector3D2 = new Vector3D(1.0, vector3D1, 182.7661087126841, vector3D0);
      Plane plane0 = new Plane(vector3D2, vector3D0, vector3D2);
      Plane plane1 = new Plane(vector3D1, vector3D1, vector3D1);
      Line line1 = plane1.intersection(plane0);
      Line line2 = new Line(line1);
      SubLine subLine1 = new SubLine(line2, (IntervalsSet) null);
      IntervalsSet intervalsSet0 = new IntervalsSet(182.7661087126841, 182.7661087126841);
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>();
      IntervalsSet intervalsSet1 = intervalsSet0.buildNew(bSPTree0);
      SubLine subLine2 = new SubLine(line1, intervalsSet1);
      SubLine subLine3 = line2.wholeLine();
      // Undeclared exception!
      subLine3.intersection(subLine2, false);
  }
}

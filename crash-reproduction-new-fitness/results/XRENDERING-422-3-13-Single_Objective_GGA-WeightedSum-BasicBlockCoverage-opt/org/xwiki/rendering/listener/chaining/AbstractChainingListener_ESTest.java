/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 27 03:28:45 UTC 2021
 */

package org.xwiki.rendering.listener.chaining;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.xwiki.rendering.listener.Format;
import org.xwiki.rendering.listener.chaining.BlockStateChainingListener;
import org.xwiki.rendering.listener.chaining.ChainingListener;
import org.xwiki.rendering.listener.chaining.ConsecutiveNewLineStateChainingListener;
import org.xwiki.rendering.listener.chaining.EmptyBlockChainingListener;
import org.xwiki.rendering.listener.chaining.ListenerChain;
import org.xwiki.rendering.listener.reference.ResourceReference;
import org.xwiki.rendering.listener.reference.ResourceType;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractChainingListener_ESTest extends AbstractChainingListener_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String string0 = "!";
      ListenerChain listenerChain0 = new ListenerChain();
      BlockStateChainingListener blockStateChainingListener0 = new BlockStateChainingListener(listenerChain0);
      listenerChain0.addListener(blockStateChainingListener0);
      ConsecutiveNewLineStateChainingListener consecutiveNewLineStateChainingListener0 = new ConsecutiveNewLineStateChainingListener(listenerChain0);
      Class<BlockStateChainingListener> class0 = BlockStateChainingListener.class;
      listenerChain0.indexOf(class0);
      ListenerChain listenerChain1 = mock(ListenerChain.class, new ViolatedAssumptionAnswer());
      EmptyBlockChainingListener emptyBlockChainingListener0 = new EmptyBlockChainingListener(listenerChain1);
      EmptyBlockChainingListener emptyBlockChainingListener1 = new EmptyBlockChainingListener(listenerChain0);
      Class<ChainingListener> class1 = ChainingListener.class;
      listenerChain0.popListener(class1);
      ResourceType resourceType0 = ResourceType.ATTACHMENT;
      ResourceReference resourceReference0 = new ResourceReference("!", resourceType0);
      Map<String, String> map0 = resourceReference0.getParameters();
      blockStateChainingListener0.beginTable(map0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      EmptyBlockChainingListener emptyBlockChainingListener2 = new EmptyBlockChainingListener(listenerChain0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      listenerChain0.addListener(emptyBlockChainingListener1);
      Format format0 = Format.ITALIC;
      // Undeclared exception!
      blockStateChainingListener0.endFormat(format0, hashMap1);
  }
}

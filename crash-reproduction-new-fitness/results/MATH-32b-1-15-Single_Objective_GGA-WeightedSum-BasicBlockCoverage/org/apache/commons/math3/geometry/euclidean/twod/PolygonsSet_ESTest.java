/*
 * This file was automatically generated by EvoSuite
 * Thu May 14 12:25:32 UTC 2020
 */

package org.apache.commons.math3.geometry.euclidean.twod;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.Line;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.apache.commons.math3.geometry.partitioning.Transform;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class PolygonsSet_ESTest extends PolygonsSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      PolygonsSet polygonsSet0 = new PolygonsSet(linkedList0);
      polygonsSet0.contains(polygonsSet0);
      SubHyperplane<Euclidean2D> subHyperplane0 = (SubHyperplane<Euclidean2D>) mock(SubHyperplane.class, new ViolatedAssumptionAnswer());
      doReturn((SubHyperplane) null).when(subHyperplane0).copySelf();
      polygonsSet0.intersection(subHyperplane0);
      polygonsSet0.getBoundarySize();
      polygonsSet0.contains(polygonsSet0);
      Transform<Euclidean2D, Euclidean1D> transform0 = (Transform<Euclidean2D, Euclidean1D>) mock(Transform.class, new ViolatedAssumptionAnswer());
      polygonsSet0.computeGeometricalProperties();
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Vector2D vector2D1 = new Vector2D(0.0, vector2D0, 0.0, vector2D0, 944.6, vector2D0, (-513.0914050267029), vector2D0);
      vector2D0.distance1(vector2D1);
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>(vector2D1);
      BSPTree<Euclidean2D> bSPTree1 = bSPTree0.copySelf();
      BSPTree<Euclidean2D> bSPTree2 = bSPTree1.split((SubHyperplane<Euclidean2D>) null);
      bSPTree2.getPlus();
      PolygonsSet polygonsSet1 = polygonsSet0.buildNew(bSPTree1);
      polygonsSet1.getVertices();
      polygonsSet1.getVertices();
      BSPTree<Euclidean2D> bSPTree3 = polygonsSet1.getTree(true);
      PolygonsSet polygonsSet2 = polygonsSet0.buildNew(bSPTree3);
      polygonsSet1.getBoundarySize();
      BSPTree<Euclidean2D> bSPTree4 = bSPTree1.getCell(vector2D0);
      polygonsSet2.buildNew(bSPTree4);
      Line line0 = new Line(vector2D1, 4670.099307126246);
      Line line1 = new Line(vector2D1, vector2D1);
      line1.wholeSpace();
      // Undeclared exception!
      polygonsSet1.computeGeometricalProperties();
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 26 01:57:44 UTC 2021
 */

package org.xwiki.rest.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.qos.logback.classic.Logger;
import com.xpn.xwiki.XWikiContext;
import com.xpn.xwiki.objects.BaseObject;
import com.xpn.xwiki.objects.BaseStringProperty;
import java.net.URI;
import java.util.LinkedList;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.codehaus.groovy.control.CompilerConfiguration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.hibernate.cfg.annotations.MapKeyColumnDelegator;
import org.hibernate.loader.custom.sql.SQLCustomQuery;
import org.junit.runner.RunWith;
import org.slf4j.helpers.NOPLogger;
import org.xwiki.component.manager.ComponentManager;
import org.xwiki.job.DefaultJobStatus;
import org.xwiki.job.DefaultRequest;
import org.xwiki.job.event.status.JobStatus;
import org.xwiki.logging.logback.internal.DefaultLoggerManager;
import org.xwiki.model.reference.EntityReferenceSerializer;
import org.xwiki.observation.ObservationManager;
import org.xwiki.observation.internal.DefaultObservationManager;
import org.xwiki.rest.internal.DomainObjectFactory;
import org.xwiki.rest.internal.ModelFactory;
import org.xwiki.rest.internal.resources.pages.PageResourceImpl;
import org.xwiki.rest.model.jaxb.ObjectFactory;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class DomainObjectFactory_ESTest extends DomainObjectFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BaseObject baseObject0 = new BaseObject();
      BaseStringProperty baseStringProperty0 = new BaseStringProperty();
      baseObject0.addPropertyForRemoval(baseStringProperty0);
      MapKeyColumnDelegator mapKeyColumnDelegator0 = mock(MapKeyColumnDelegator.class, new ViolatedAssumptionAnswer());
      Boolean boolean0 = GVTAttributedCharacterIterator.TextAttribute.OVERLINE_ON;
      baseObject0.getOwnerDocument();
      XWikiContext xWikiContext0 = new XWikiContext();
      ObjectFactory objectFactory0 = new ObjectFactory();
      CompilerConfiguration compilerConfiguration0 = CompilerConfiguration.DEFAULT;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.WRITING_MODE_RTL;
      ModelFactory modelFactory0 = new ModelFactory();
      EntityReferenceSerializer<PageResourceImpl> entityReferenceSerializer0 = (EntityReferenceSerializer<PageResourceImpl>) mock(EntityReferenceSerializer.class, new ViolatedAssumptionAnswer());
      DefaultRequest defaultRequest0 = new DefaultRequest();
      DefaultObservationManager defaultObservationManager0 = new DefaultObservationManager();
      ComponentManager componentManager0 = mock(ComponentManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(defaultObservationManager0, (Class<?>) DefaultObservationManager.class, "componentManager", (Object) componentManager0);
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      Injector.inject(defaultObservationManager0, (Class<?>) DefaultObservationManager.class, "logger", (Object) nOPLogger0);
      Injector.validateBean(defaultObservationManager0, (Class<?>) DefaultObservationManager.class);
      DefaultLoggerManager defaultLoggerManager0 = new DefaultLoggerManager();
      Logger logger0 = (Logger)SQLCustomQuery.log;
      Injector.inject(defaultLoggerManager0, (Class<?>) DefaultLoggerManager.class, "logger", (Object) logger0);
      ObservationManager observationManager0 = mock(ObservationManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(defaultLoggerManager0, (Class<?>) DefaultLoggerManager.class, "observation", (Object) observationManager0);
      Injector.validateBean(defaultLoggerManager0, (Class<?>) DefaultLoggerManager.class);
      DefaultJobStatus<DefaultRequest> defaultJobStatus0 = new DefaultJobStatus<DefaultRequest>(defaultRequest0, (JobStatus) null, defaultObservationManager0, defaultLoggerManager0);
      DefaultRequest defaultRequest1 = defaultJobStatus0.getRequest();
      DefaultRequest defaultRequest2 = new DefaultRequest(defaultRequest1);
      DefaultJobStatus<DefaultRequest> defaultJobStatus1 = new DefaultJobStatus<DefaultRequest>(defaultRequest2, defaultJobStatus0, defaultObservationManager0, defaultLoggerManager0);
      defaultJobStatus0.getParentJobStatus();
      ObjectFactory objectFactory1 = new ObjectFactory();
      // Undeclared exception!
      DomainObjectFactory.createJobStatus(objectFactory1, (URI) null, defaultJobStatus0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 27 03:32:17 UTC 2021
 */

package org.xwiki.rendering.listener.chaining;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.xwiki.rendering.listener.Format;
import org.xwiki.rendering.listener.HeaderLevel;
import org.xwiki.rendering.listener.Listener;
import org.xwiki.rendering.listener.chaining.BlockStateChainingListener;
import org.xwiki.rendering.listener.chaining.EmptyBlockChainingListener;
import org.xwiki.rendering.listener.chaining.GroupStateChainingListener;
import org.xwiki.rendering.listener.chaining.ListenerChain;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractChainingListener_ESTest extends AbstractChainingListener_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Format format0 = Format.BOLD;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ListenerChain listenerChain0 = new ListenerChain();
      GroupStateChainingListener groupStateChainingListener0 = new GroupStateChainingListener(listenerChain0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      BlockStateChainingListener blockStateChainingListener0 = new BlockStateChainingListener(listenerChain0);
      HeaderLevel headerLevel0 = HeaderLevel.LEVEL2;
      Map<String, String> map0 = Listener.EMPTY_PARAMETERS;
      blockStateChainingListener0.beginHeader(headerLevel0, ",2.Lb[[r%4(oP7^R", map0);
      listenerChain0.addListener(groupStateChainingListener0);
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      listenerChain0.addListener(blockStateChainingListener0);
      EmptyBlockChainingListener emptyBlockChainingListener0 = new EmptyBlockChainingListener(listenerChain0);
      Map<String, String> map1 = Listener.EMPTY_PARAMETERS;
      blockStateChainingListener0.endTableCell(hashMap2);
      listenerChain0.addListener(emptyBlockChainingListener0);
      // Undeclared exception!
      groupStateChainingListener0.endFormat(format0, hashMap1);
  }
}

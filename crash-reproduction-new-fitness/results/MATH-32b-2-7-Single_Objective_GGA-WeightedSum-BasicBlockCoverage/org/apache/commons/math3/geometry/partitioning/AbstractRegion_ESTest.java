/*
 * This file was automatically generated by EvoSuite
 * Thu May 14 12:17:20 UTC 2020
 */

package org.apache.commons.math3.geometry.partitioning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;
import org.apache.commons.math3.geometry.euclidean.threed.Rotation;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractRegion_ESTest extends AbstractRegion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BSPTree<Euclidean3D> bSPTree0 = new BSPTree<Euclidean3D>();
      BSPTree.LeafMerger<Euclidean3D> bSPTree_LeafMerger0 = (BSPTree.LeafMerger<Euclidean3D>) mock(BSPTree.LeafMerger.class, new ViolatedAssumptionAnswer());
      doReturn((BSPTree) null).when(bSPTree_LeafMerger0).merge(nullable(org.apache.commons.math3.geometry.partitioning.BSPTree.class) , nullable(org.apache.commons.math3.geometry.partitioning.BSPTree.class) , nullable(org.apache.commons.math3.geometry.partitioning.BSPTree.class) , anyBoolean() , anyBoolean());
      bSPTree0.merge((BSPTree<Euclidean3D>) null, bSPTree_LeafMerger0);
      Rotation rotation0 = Rotation.IDENTITY;
      PolyhedronsSet polyhedronsSet0 = new PolyhedronsSet(bSPTree0);
      polyhedronsSet0.getBoundarySize();
      PolyhedronsSet polyhedronsSet1 = new PolyhedronsSet();
      LinkedList<SubHyperplane<Euclidean1D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean1D>>();
      IntervalsSet intervalsSet0 = new IntervalsSet(linkedList0);
      intervalsSet0.getSize();
      PolyhedronsSet polyhedronsSet2 = new PolyhedronsSet(bSPTree0);
      BSPTree<Euclidean2D> bSPTree1 = new BSPTree<Euclidean2D>("nN},");
      IntervalsSet intervalsSet1 = new IntervalsSet(linkedList0);
      intervalsSet0.contains(intervalsSet1);
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      polyhedronsSet2.rotate(vector3D0, rotation0);
      PolygonsSet polygonsSet0 = new PolygonsSet();
      PolygonsSet polygonsSet1 = new PolygonsSet(bSPTree1);
      // Undeclared exception!
      polygonsSet1.getSize();
  }
}

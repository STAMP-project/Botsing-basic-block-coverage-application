/*
 * This file was automatically generated by EvoSuite
 * Sun May 17 00:17:55 UTC 2020
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDate;
import org.joda.time.Period;
import org.joda.time.ReadablePeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.IslamicChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class BaseChronology_ESTest extends BaseChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      islamicChronology0.centuries();
      buddhistChronology0.days();
      islamicChronology0.hourOfDay();
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance(dateTimeZone0);
      islamicChronology1.days();
      islamicChronology0.hourOfDay();
      islamicChronology1.minuteOfDay();
      islamicChronology1.dayOfWeek();
      islamicChronology1.yearOfCentury();
      Period period0 = Period.millis(633);
      islamicChronology0.get((ReadablePeriod) period0, (-2263L), 453L);
      islamicChronology1.minuteOfHour();
      LocalDate localDate0 = new LocalDate(3227L, dateTimeZone0);
      LocalDate localDate1 = localDate0.plusYears((-1222));
      int int0 = (-1);
      localDate1.minusDays((-1));
      localDate1.plusMonths((-5));
      LocalDate localDate2 = localDate1.minusWeeks(100);
      // Undeclared exception!
      islamicChronology0.set(localDate2, 1145L);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 29 10:28:44 UTC 2021
 */

package org.xwiki.extension.job.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.Connection;
import java.util.PriorityQueue;
import java.util.function.UnaryOperator;
import org.apache.commons.dbcp2.DelegatingConnection;
import org.apache.commons.dbcp2.PoolingConnection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.xwiki.extension.job.internal.AbstractInstallPlanJob;
import org.xwiki.extension.job.plan.ExtensionPlanNode;
import org.xwiki.extension.job.plan.internal.DefaultExtensionPlanNode;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractInstallPlanJob$ModifableExtensionPlanTree_ESTest extends AbstractInstallPlanJob$ModifableExtensionPlanTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AbstractInstallPlanJob.ModifableExtensionPlanTree abstractInstallPlanJob_ModifableExtensionPlanTree0 = new AbstractInstallPlanJob.ModifableExtensionPlanTree();
      PriorityQueue<PoolingConnection> priorityQueue0 = new PriorityQueue<PoolingConnection>();
      PoolingConnection poolingConnection0 = mock(PoolingConnection.class, new ViolatedAssumptionAnswer());
      DelegatingConnection<PoolingConnection> delegatingConnection0 = new DelegatingConnection<PoolingConnection>(poolingConnection0);
      delegatingConnection0.getInnermostDelegate();
      PoolingConnection poolingConnection1 = new PoolingConnection((Connection) null);
      priorityQueue0.add(poolingConnection1);
      abstractInstallPlanJob_ModifableExtensionPlanTree0.retainAll(priorityQueue0);
      abstractInstallPlanJob_ModifableExtensionPlanTree0.listIterator();
      AbstractInstallPlanJob.ModifableExtensionPlanTree abstractInstallPlanJob_ModifableExtensionPlanTree1 = abstractInstallPlanJob_ModifableExtensionPlanTree0.clone();
      UnaryOperator<ExtensionPlanNode> unaryOperator0 = (UnaryOperator<ExtensionPlanNode>) mock(UnaryOperator.class, new ViolatedAssumptionAnswer());
      AbstractInstallPlanJob.ModifableExtensionPlanTree abstractInstallPlanJob_ModifableExtensionPlanTree2 = abstractInstallPlanJob_ModifableExtensionPlanTree0.clone();
      Integer.valueOf(3450);
      abstractInstallPlanJob_ModifableExtensionPlanTree1.equals(poolingConnection1);
      abstractInstallPlanJob_ModifableExtensionPlanTree1.spliterator();
      AbstractInstallPlanJob.ModifableExtensionPlanTree abstractInstallPlanJob_ModifableExtensionPlanTree3 = new AbstractInstallPlanJob.ModifableExtensionPlanTree();
      DefaultExtensionPlanNode defaultExtensionPlanNode0 = new DefaultExtensionPlanNode();
      abstractInstallPlanJob_ModifableExtensionPlanTree3.addIfAbsent(defaultExtensionPlanNode0);
      DefaultExtensionPlanNode defaultExtensionPlanNode1 = new DefaultExtensionPlanNode();
      abstractInstallPlanJob_ModifableExtensionPlanTree2.clone();
      abstractInstallPlanJob_ModifableExtensionPlanTree1.listIterator();
      AbstractInstallPlanJob.ModifableExtensionPlanTree abstractInstallPlanJob_ModifableExtensionPlanTree4 = new AbstractInstallPlanJob.ModifableExtensionPlanTree();
      abstractInstallPlanJob_ModifableExtensionPlanTree4.clone();
      abstractInstallPlanJob_ModifableExtensionPlanTree2.replaceAll(unaryOperator0);
      // Undeclared exception!
      abstractInstallPlanJob_ModifableExtensionPlanTree3.clone();
  }
}

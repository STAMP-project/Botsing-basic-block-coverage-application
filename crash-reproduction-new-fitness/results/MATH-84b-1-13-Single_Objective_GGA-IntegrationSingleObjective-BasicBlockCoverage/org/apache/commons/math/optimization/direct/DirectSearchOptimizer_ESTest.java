/*
 * This file was automatically generated by EvoSuite
 * Sat May 16 22:59:16 UTC 2020
 */

package org.apache.commons.math.optimization.direct;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import org.apache.commons.math.analysis.MultivariateRealFunction;
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.OptimizationException;
import org.apache.commons.math.optimization.RealPointValuePair;
import org.apache.commons.math.optimization.SimpleRealPointChecker;
import org.apache.commons.math.optimization.direct.NelderMead;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class DirectSearchOptimizer_ESTest extends DirectSearchOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NelderMead nelderMead0 = new NelderMead();
      nelderMead0.setMaxIterations(1706);
      SimpleRealPointChecker simpleRealPointChecker0 = new SimpleRealPointChecker((-2810.1872), 1317.72242);
      nelderMead0.setConvergenceChecker(simpleRealPointChecker0);
      MultivariateRealFunction multivariateRealFunction0 = mock(MultivariateRealFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(multivariateRealFunction0).value(any(double[].class));
      GoalType goalType0 = GoalType.MAXIMIZE;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2810.1872);
      doubleArray0[1] = 1317.72242;
      doubleArray0[2] = (-2810.1872);
      doubleArray0[3] = (-2810.1872);
      doubleArray0[4] = 1317.72242;
      doubleArray0[5] = (-2810.1872);
      doubleArray0[6] = (-1064.9302807020379);
      RealPointValuePair realPointValuePair0 = nelderMead0.optimize(multivariateRealFunction0, goalType0, doubleArray0);
      Comparator<RealPointValuePair> comparator0 = (Comparator<RealPointValuePair>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any(org.apache.commons.math.optimization.RealPointValuePair.class) , any(org.apache.commons.math.optimization.RealPointValuePair.class));
      nelderMead0.replaceWorstPoint(realPointValuePair0, comparator0);
      nelderMead0.incrementIterationsCounter();
      nelderMead0.evaluate(doubleArray0);
      nelderMead0.getMaxIterations();
      nelderMead0.getEvaluations();
      Comparator<RealPointValuePair> comparator1 = (Comparator<RealPointValuePair>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator1).compare(any(org.apache.commons.math.optimization.RealPointValuePair.class) , any(org.apache.commons.math.optimization.RealPointValuePair.class));
      nelderMead0.replaceWorstPoint(realPointValuePair0, comparator1);
      MultivariateRealFunction multivariateRealFunction1 = mock(MultivariateRealFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(multivariateRealFunction1).value(any(double[].class));
      nelderMead0.optimize(multivariateRealFunction1, goalType0, doubleArray0);
      nelderMead0.setMaxIterations(1706);
      nelderMead0.setMaxIterations(1);
      try { 
        nelderMead0.incrementIterationsCounter();
        fail("Expecting exception: OptimizationException");
      
      } catch(OptimizationException e) {
         //
         // org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (1) exceeded
         //
         verifyException("org.apache.commons.math.optimization.direct.DirectSearchOptimizer", e);
      }
  }
}

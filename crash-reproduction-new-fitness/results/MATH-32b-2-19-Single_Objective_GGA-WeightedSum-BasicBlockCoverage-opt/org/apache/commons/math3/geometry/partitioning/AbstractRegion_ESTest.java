/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 26 09:50:09 UTC 2021
 */

package org.apache.commons.math3.geometry.partitioning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint;
import org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVFS = true, useJEE = true) 
public class AbstractRegion_ESTest extends AbstractRegion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BSPTree.LeafMerger<Euclidean1D> bSPTree_LeafMerger0 = (BSPTree.LeafMerger<Euclidean1D>) mock(BSPTree.LeafMerger.class, new ViolatedAssumptionAnswer());
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      BoundarySizeVisitor<Euclidean1D> boundarySizeVisitor0 = new BoundarySizeVisitor<Euclidean1D>();
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>(boundarySizeVisitor0);
      bSPTree0.visit(boundarySizeVisitor0);
      Vector1D vector1D1 = Vector1D.NEGATIVE_INFINITY;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D1, true);
      SubOrientedPoint subOrientedPoint0 = orientedPoint0.wholeHyperplane();
      subOrientedPoint0.split(orientedPoint0);
      Vector1D vector1D2 = Vector1D.NEGATIVE_INFINITY;
      OrientedPoint orientedPoint1 = new OrientedPoint(vector1D2, true);
      IntervalsSet intervalsSet0 = orientedPoint0.wholeSpace();
      intervalsSet0.getInf();
      IntervalsSet intervalsSet1 = orientedPoint1.wholeSpace();
      intervalsSet1.getSize();
      PolygonsSet polygonsSet0 = new PolygonsSet();
      Euclidean2D euclidean2D0 = Euclidean2D.getInstance();
      BSPTree<Euclidean2D> bSPTree1 = new BSPTree<Euclidean2D>(euclidean2D0);
      PolygonsSet polygonsSet1 = polygonsSet0.buildNew(bSPTree1);
      // Undeclared exception!
      polygonsSet1.getSize();
  }
}

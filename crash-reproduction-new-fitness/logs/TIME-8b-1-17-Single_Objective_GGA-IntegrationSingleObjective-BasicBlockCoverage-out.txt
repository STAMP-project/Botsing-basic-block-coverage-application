11:08:31.736 [main] INFO  eu.stamp.botsing.StackTrace - Exception type is detected: java.lang.IllegalArgumentException
11:08:31.743 [main] INFO  eu.stamp.botsing.StackTrace - Target frame is set to: org.joda.time.DateTimeZone.forOffsetHoursMinutes(DateTimeZone:280)
11:08:31.743 [main] INFO  eu.stamp.botsing.StackTrace - Target Class is set to: org.joda.time.DateTimeZone
11:08:31.744 [main] INFO  eu.stamp.botsing.Botsing - Single_Objective_GGA
11:08:32.971 [main] INFO  e.s.botsing.graphs.cfg.CFGGenerator - Analyzing org.joda.time.DateTimeZone
11:08:32.995 [main] INFO  e.stamp.botsing.commons.SetupUtility - Starting the dependency analysis. The number of detected jar files is 5.
11:08:37.182 [main] INFO  e.stamp.botsing.commons.SetupUtility - Analysing dependencies done!
11:08:37.195 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - test generation strategy: Botsing individual
11:08:37.202 [main] INFO  e.s.b.s.TestCaseSecondaryObjective - Secondary Objectives: BasicBlockCoverage
11:08:37.208 [main] INFO  e.s.b.g.s.GuidedSingleObjectiveGA - Initializing the first population with size of 50 individuals
11:08:37.417 [main] INFO  e.s.b.f.utils.CrashDistanceEvolution - New value for Crash Distance after 1 fitness evolutions and 0 second: 1.8333333333333335
11:08:37.435 [main] INFO  e.s.b.f.utils.CrashDistanceEvolution - New value for Crash Distance after 2 fitness evolutions and 0 second: 1.6666212348371268
11:08:37.438 [main] INFO  e.s.b.f.utils.CrashDistanceEvolution - New value for Crash Distance after 3 fitness evolutions and 0 second: 1.6665029469548134
11:08:37.815 [main] INFO  e.s.b.f.utils.CrashDistanceEvolution - New value for Crash Distance after 8 fitness evolutions and 0 second: 1.6664670658682634
11:08:37.856 [main] INFO  e.s.b.f.utils.CrashDistanceEvolution - New value for Crash Distance after 30 fitness evolutions and 0 second: 1.6658653846153846
11:08:37.879 [main] INFO  e.s.b.f.utils.CrashDistanceEvolution - New value for Crash Distance after 47 fitness evolutions and 0 second: 1.4
11:08:38.065 [main] INFO  e.s.b.g.s.GuidedSingleObjectiveGA - Best fitness in the initial population is: 0.0
11:08:38.066 [main] INFO  e.s.b.g.s.GuidedSingleObjectiveGA - Best fitness in the final population is: 0.0. PT: 0 seconds
11:08:38.066 [main] INFO  e.s.b.g.s.GuidedSingleObjectiveGA - Starting evolution
11:08:38.067 [main] INFO  e.s.b.g.s.GuidedSingleObjectiveGA - ZeroFitness :                      0 / 0            Finished!
11:08:38.067 [main] INFO  e.s.b.g.s.GuidedSingleObjectiveGA - The search process is finished.
11:08:38.067 [main] INFO  e.s.b.g.s.GuidedSingleObjectiveGA - Best fitness in the final population is: 0.0. PT: 0 seconds
11:08:38.068 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - * The target crash is covered. The generated test is: String string0 = "hc6MLV?`+j `F";
TestMutableDateTime_Basics testMutableDateTime_Basics0 = new TestMutableDateTime_Basics(string0);
TestMutableDateTime_Basics.MockEqualsChronology testMutableDateTime_Basics_MockEqualsChronology0 = testMutableDateTime_Basics0.new MockEqualsChronology();
testMutableDateTime_Basics_MockEqualsChronology0.getZone();
String string1 = "RA1gTFQd 6";
TestDateMidnight_Basics testDateMidnight_Basics0 = new TestDateMidnight_Basics(string1);
TestDateMidnight_Basics.MockInstant testDateMidnight_Basics_MockInstant0 = testDateMidnight_Basics0.new MockInstant();
CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)testDateMidnight_Basics_MockInstant0.getZone();
cachedDateTimeZone0.isFixed();
int int0 = 1;
int int1 = 120;
DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(int0, int1);
DateTimeZone.getNameProvider();
TestDateTime_Basics testDateTime_Basics0 = null;
TestDateTime_Basics.MockEqualsChronology testDateTime_Basics_MockEqualsChronology0 = testDateTime_Basics0.new MockEqualsChronology();
DateTimeZone dateTimeZone1 = testDateTime_Basics_MockEqualsChronology0.getZone();
long long0 = 0L;
dateTimeZone1.getOffsetFromLocal(long0);
DateTimeZone.setDefault(dateTimeZone0);
DateTimeZone dateTimeZone2 = DateTimeZone.getDefault();
long long1 = 3036L;
dateTimeZone2.getName(long1);
MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
DateTimeZone dateTimeZone3 = mockNullZoneChronology0.getZone();
long long2 = 2036L;
dateTimeZone3.previousTransition(long2);
DateTimeZone.getProvider();
int int2 = (-1279);
int int3 = (-1572);
DateTimeZone.forOffsetHoursMinutes(int2, int3);
DateTimeZone.getDefault();
int int4 = 1188;
SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int4, string1);
DateTimeZone dateTimeZone4 = DateTimeZone.forTimeZone(simpleTimeZone0);
long long3 = 0L;
dateTimeZone4.isStandardOffset(long3);

11:08:38.068 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - 1 thrown exception(s) are detected in the solution: 
11:08:38.068 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - java.lang.IllegalArgumentException: Minutes out of range: 120
11:08:38.068 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - org.joda.time.DateTimeZone.forOffsetHoursMinutes(DateTimeZone.java:280)
11:08:38.068 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:08:38.068 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
11:08:38.068 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
11:08:38.068 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - java.lang.reflect.Method.invoke(Method.java:498)
11:08:38.068 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
11:08:38.068 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
11:08:38.068 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
11:08:38.069 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
11:08:38.069 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
11:08:38.069 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
11:08:38.069 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - java.util.concurrent.FutureTask.run(FutureTask.java:266)
11:08:38.069 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
11:08:38.069 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
11:08:38.069 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - java.lang.Thread.run(Thread.java:748)
11:08:38.070 [main] INFO  e.s.b.commons.PostProcessUtility - test size before post-process: 1
11:08:38.074 [main] INFO  e.s.b.commons.PostProcessUtility - * Minimizing test suite
11:08:38.074 [main] INFO  e.s.b.commons.PostProcessUtility - test size after post-process: 1
11:08:38.074 [main] INFO  e.s.b.commons.PostProcessUtility - * Compiling and checking tests
11:08:39.047 [main] INFO  e.s.b.commons.PostProcessUtility - * Writing JUnit test case 'DateTimeZone_ESTest' to results/TIME-8b-1-17-Single_Objective_GGA-IntegrationSingleObjective-BasicBlockCoverage-opt
11:08:39.062 [main] INFO  e.s.b.reproduction.CrashReproduction - The solution test is saved!

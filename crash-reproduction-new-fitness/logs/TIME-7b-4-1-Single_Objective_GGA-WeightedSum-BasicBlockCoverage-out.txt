06:35:18.651 [main] INFO  eu.stamp.botsing.StackTrace - Exception type is detected: org.joda.time.IllegalFieldValueException
06:35:18.653 [main] INFO  eu.stamp.botsing.StackTrace - Target frame is set to: org.joda.time.format.DateTimeParserBucket.computeMillis(DateTimeParserBucket:366)
06:35:18.653 [main] INFO  eu.stamp.botsing.StackTrace - Target Class is set to: org.joda.time.format.DateTimeParserBucket
06:35:18.653 [main] INFO  eu.stamp.botsing.Botsing - Single_Objective_GGA
06:35:18.952 [main] INFO  e.stamp.botsing.commons.SetupUtility - Starting the dependency analysis. The number of detected jar files is 5.
06:35:20.671 [main] INFO  e.stamp.botsing.commons.SetupUtility - Analysing dependencies done!
06:35:20.680 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - test generation strategy: Botsing individual
06:35:20.687 [main] INFO  e.s.b.s.TestCaseSecondaryObjective - Secondary Objectives: BasicBlockCoverage
06:35:20.692 [main] INFO  e.s.b.g.s.GuidedSingleObjectiveGA - Initializing the first population with size of 50 individuals
06:35:21.685 [main] INFO  e.s.b.f.utils.CrashDistanceEvolution - New value for Crash Distance after 1 fitness evolutions and 0 second: 5.979166666666667
06:35:21.702 [main] INFO  e.s.b.f.utils.CrashDistanceEvolution - New value for Crash Distance after 6 fitness evolutions and 1 second: 0.42857142857142855
06:35:22.521 [main] INFO  e.s.b.g.s.GuidedSingleObjectiveGA - Best fitness in the initial population is: 0.42857142857142855
06:35:22.522 [main] INFO  e.s.b.g.s.GuidedSingleObjectiveGA - Best fitness in the final population is: 0.42857142857142855. PT: 1 seconds
06:35:22.522 [main] INFO  e.s.b.g.s.GuidedSingleObjectiveGA - Starting evolution
06:35:22.934 [main] INFO  e.s.b.g.s.GuidedSingleObjectiveGA - Best fitness in the current population: 0.42857142857142855 | 100
06:35:23.291 [main] INFO  e.s.b.g.s.GuidedSingleObjectiveGA - Best fitness in the current population: 0.42857142857142855 | 150
06:35:23.553 [main] INFO  e.s.b.g.s.GuidedSingleObjectiveGA - Best fitness in the current population: 0.42857142857142855 | 200
06:35:23.844 [main] INFO  e.s.b.g.s.GuidedSingleObjectiveGA - Best fitness in the current population: 0.42857142857142855 | 250
06:35:24.124 [main] INFO  e.s.b.g.s.GuidedSingleObjectiveGA - Best fitness in the current population: 0.42857142857142855 | 300
06:35:24.368 [main] INFO  e.s.b.g.s.GuidedSingleObjectiveGA - Best fitness in the current population: 0.42857142857142855 | 350
06:35:24.675 [main] INFO  e.s.b.g.s.GuidedSingleObjectiveGA - Best fitness in the current population: 0.42857142857142855 | 400
06:35:24.968 [main] INFO  e.s.b.g.s.GuidedSingleObjectiveGA - Best fitness in the current population: 0.42857142857142855 | 450
06:35:25.295 [main] INFO  e.s.b.g.s.GuidedSingleObjectiveGA - Best fitness in the current population: 0.42857142857142855 | 500
06:35:25.693 [main] INFO  e.s.b.g.s.GuidedSingleObjectiveGA - Best fitness in the current population: 0.42857142857142855 | 550
06:35:26.270 [main] INFO  e.s.b.g.s.GuidedSingleObjectiveGA - Best fitness in the current population: 0.42857142857142855 | 600
06:35:26.675 [main] INFO  e.s.b.g.s.GuidedSingleObjectiveGA - Best fitness in the current population: 0.42857142857142855 | 650
06:35:27.149 [main] INFO  e.s.b.g.s.GuidedSingleObjectiveGA - Best fitness in the current population: 0.42857142857142855 | 700
06:35:27.553 [main] INFO  e.s.b.g.s.GuidedSingleObjectiveGA - Best fitness in the current population: 0.42857142857142855 | 750
06:35:27.858 [main] INFO  e.s.b.g.s.GuidedSingleObjectiveGA - Best fitness in the current population: 0.42857142857142855 | 800
06:35:28.121 [main] INFO  e.s.b.g.s.GuidedSingleObjectiveGA - Best fitness in the current population: 0.42857142857142855 | 850
06:35:28.426 [main] INFO  e.s.b.g.s.GuidedSingleObjectiveGA - Best fitness in the current population: 0.42857142857142855 | 900
06:35:28.826 [main] INFO  e.s.b.g.s.GuidedSingleObjectiveGA - Best fitness in the current population: 0.42857142857142855 | 950
06:35:29.313 [main] INFO  e.s.b.g.s.GuidedSingleObjectiveGA - Best fitness in the current population: 0.42857142857142855 | 1000
06:35:29.676 [main] INFO  e.s.b.g.s.GuidedSingleObjectiveGA - Best fitness in the current population: 0.42857142857142855 | 1050
06:35:29.979 [main] INFO  e.s.b.g.s.GuidedSingleObjectiveGA - Best fitness in the current population: 0.42857142857142855 | 1100
06:35:30.299 [main] INFO  e.s.b.g.s.GuidedSingleObjectiveGA - Best fitness in the current population: 0.42857142857142855 | 1150
06:35:30.511 [main] INFO  e.s.b.f.utils.CrashDistanceEvolution - New value for Crash Distance after 1222 fitness evolutions and 9 second: 0.0
06:35:30.695 [main] INFO  e.s.b.g.s.GuidedSingleObjectiveGA - Best fitness in the current population: 0.0 | 1200
06:35:30.695 [main] INFO  e.s.b.g.s.GuidedSingleObjectiveGA - Best fitness in the final population is: 0.0. PT: 10 seconds
06:35:30.696 [main] INFO  e.s.b.g.s.GuidedSingleObjectiveGA - ZeroFitness :                      0 / 0            Finished!
06:35:30.696 [main] INFO  e.s.b.g.s.GuidedSingleObjectiveGA - The search process is finished.
06:35:30.696 [main] INFO  e.s.b.g.s.GuidedSingleObjectiveGA - Best fitness in the final population is: 0.0. PT: 10 seconds
06:35:30.697 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - * The target crash is covered. The generated test is: Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
doReturn(false, false).when(durationField0).isSupported();
int int0 = DateTimeParserBucket.compareReverse(durationField0, durationField0);
Locale locale0 = null;
long long0 = 0L;
IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, islamicChronology0, locale0);
DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
int int1 = 297;
dateTimeParserBucket0.saveField(dateTimeFieldType0, int1);
boolean boolean0 = false;
String string0 = "";
dateTimeParserBucket0.computeMillis(boolean0, string0);
int int2 = 4;
dateTimeParserBucket0.saveField(dateTimeFieldType0, int2);
int int3 = (-1612);
int int4 = (-2826);
int int5 = Integer.min(int0, int4);
Integer integer0 = null;
BuddhistChronology.getInstanceUTC();
DateTimeParserBucket dateTimeParserBucket1 = new DateTimeParserBucket(int5, chronology0, locale0);
DateTimeParserBucket.SavedState dateTimeParserBucket_SavedState0 = dateTimeParserBucket1.new SavedState();
Locale locale1 = Locale.SIMPLIFIED_CHINESE;
DateTimeParserBucket dateTimeParserBucket2 = new DateTimeParserBucket(long0, islamicChronology0, locale1);
DateTimeParserBucket.SavedState dateTimeParserBucket_SavedState1 = dateTimeParserBucket2.new SavedState();
Integer integer1 = dateTimeParserBucket_SavedState0.iOffset;
Integer integer2 = dateTimeParserBucket_SavedState1.iOffset;
dateTimeParserBucket0.setOffset(integer0);

06:35:30.697 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - 1 thrown exception(s) are detected in the solution: 
06:35:30.697 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - org.joda.time.IllegalFieldValueException: Cannot parse "": Value 297 for weekOfWeekyear must be in the range [1,50]
06:35:30.697 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)
06:35:30.697 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)
06:35:30.697 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - org.joda.time.chrono.LimitChronology$LimitDateTimeField.set(LimitChronology.java:510)
06:35:30.697 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)
06:35:30.697 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - org.joda.time.format.DateTimeParserBucket.computeMillis(DateTimeParserBucket.java:366)
06:35:30.697 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - org.joda.time.format.DateTimeParserBucket.computeMillis(DateTimeParserBucket.java:359)
06:35:30.697 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - sun.reflect.GeneratedMethodAccessor26.invoke(Unknown Source)
06:35:30.697 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
06:35:30.697 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - java.lang.reflect.Method.invoke(Method.java:498)
06:35:30.697 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
06:35:30.697 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
06:35:30.697 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
06:35:30.697 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
06:35:30.697 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
06:35:30.697 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
06:35:30.697 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - java.util.concurrent.FutureTask.run(FutureTask.java:266)
06:35:30.697 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
06:35:30.697 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
06:35:30.698 [main] INFO  e.s.b.t.s.BotsingIndividualStrategy - java.lang.Thread.run(Thread.java:748)
06:35:30.699 [main] INFO  e.s.b.commons.PostProcessUtility - test size before post-process: 1
06:35:30.703 [main] INFO  e.s.b.commons.PostProcessUtility - * Minimizing test suite
06:35:30.703 [main] INFO  e.s.b.commons.PostProcessUtility - test size after post-process: 1
06:35:30.703 [main] INFO  e.s.b.commons.PostProcessUtility - * Compiling and checking tests
06:35:31.484 [main] INFO  e.s.b.commons.PostProcessUtility - * Writing JUnit test case 'DateTimeParserBucket_ESTest' to results/TIME-7b-4-1-Single_Objective_GGA-WeightedSum-BasicBlockCoverage-opt
06:35:31.491 [main] INFO  e.s.b.reproduction.CrashReproduction - The solution test is saved!
